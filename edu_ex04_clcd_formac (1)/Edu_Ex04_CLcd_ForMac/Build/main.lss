
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003470  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  20000000  08003470  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001118  20000200  08003800  00010200  2**9
                  ALLOC
  3 ._usrstack    00000100  20001318  08004918  00010200  2**0
                  ALLOC
  4 .debug_info   00007a71  00000000  00000000  000100f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00002af6  00000000  00000000  00017b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00005cee  00000000  00000000  0001a65b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000009b0  00000000  00000000  00020349  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000c40  00000000  00000000  00020cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000028f9  00000000  00000000  00021939  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002194  00000000  00000000  00024232  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000070  00000000  00000000  000263c6  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  00026436  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000018dc  00000000  00000000  0002646c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 89 08 00 08                             .P. ....

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	2000      	movs	r0, #0
 800000c:	4b01      	ldr	r3, [pc, #4]	; (8000014 <LED_Tick+0xc>)
 800000e:	4798      	blx	r3
 8000010:	bd08      	pop	{r3, pc}
 8000012:	bf00      	nop
 8000014:	08000c09 	.word	0x08000c09

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0a      	ldr	r3, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4b09      	ldr	r3, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4798      	blx	r3
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	4620      	mov	r0, r4
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	2202      	movs	r2, #2
 8000030:	4b07      	ldr	r3, [pc, #28]	; (8000050 <main+0x38>)
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 8000036:	4b07      	ldr	r3, [pc, #28]	; (8000054 <main+0x3c>)
 8000038:	4620      	mov	r0, r4
 800003a:	4798      	blx	r3

	//-- 명령어 처리
	//
	//Ap_RadioMenu_ExeCmd();    
	//Ap_GLcdMenu_ExeCmd();    
	Ap_EduMenu_ExeCmd();
 800003c:	4b06      	ldr	r3, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4798      	blx	r3

    while(1);
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	0800092d 	.word	0x0800092d
 8000048:	0800005d 	.word	0x0800005d
 800004c:	08000ea5 	.word	0x08000ea5
 8000050:	08000009 	.word	0x08000009
 8000054:	08000ec1 	.word	0x08000ec1
 8000058:	08000161 	.word	0x08000161

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	4770      	bx	lr
 800005e:	bf00      	nop

08000060 <KeyPad_UpKeyEvent>:



void KeyPad_UpKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 8000060:	3801      	subs	r0, #1
 8000062:	2801      	cmp	r0, #1
 8000064:	d900      	bls.n	8000068 <KeyPad_UpKeyEvent+0x8>
 8000066:	4770      	bx	lr
void Ap_EduMenu_ShowMenu(void);



void KeyPad_UpKeyEvent( u32 Event )
{
 8000068:	b538      	push	{r3, r4, r5, lr}
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
	{
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 800006a:	4b04      	ldr	r3, [pc, #16]	; (800007c <KeyPad_UpKeyEvent+0x1c>)
 800006c:	2000      	movs	r0, #0
 800006e:	881a      	ldrh	r2, [r3, #0]
 8000070:	4903      	ldr	r1, [pc, #12]	; (8000080 <KeyPad_UpKeyEvent+0x20>)
 8000072:	1c55      	adds	r5, r2, #1
 8000074:	4c03      	ldr	r4, [pc, #12]	; (8000084 <KeyPad_UpKeyEvent+0x24>)
 8000076:	801d      	strh	r5, [r3, #0]
 8000078:	47a0      	blx	r4
 800007a:	bd38      	pop	{r3, r4, r5, pc}
 800007c:	20000200 	.word	0x20000200
 8000080:	08003058 	.word	0x08003058
 8000084:	08001739 	.word	0x08001739

08000088 <KeyPad_DownKeyEvent>:
	}
}

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 8000088:	3801      	subs	r0, #1
 800008a:	2801      	cmp	r0, #1
 800008c:	d900      	bls.n	8000090 <KeyPad_DownKeyEvent+0x8>
 800008e:	4770      	bx	lr
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
	}
}

void KeyPad_DownKeyEvent( u32 Event )
{
 8000090:	b538      	push	{r3, r4, r5, lr}
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
	{
		Seg_Count -= 2;
 8000092:	4c05      	ldr	r4, [pc, #20]	; (80000a8 <KeyPad_DownKeyEvent+0x20>)
		
		
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 8000094:	2000      	movs	r0, #0

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
	{
		Seg_Count -= 2;
 8000096:	8823      	ldrh	r3, [r4, #0]
		
		
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 8000098:	4904      	ldr	r1, [pc, #16]	; (80000ac <KeyPad_DownKeyEvent+0x24>)

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
	{
		Seg_Count -= 2;
 800009a:	1e9a      	subs	r2, r3, #2
		
		
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 800009c:	b292      	uxth	r2, r2
 800009e:	3b01      	subs	r3, #1
 80000a0:	4d03      	ldr	r5, [pc, #12]	; (80000b0 <KeyPad_DownKeyEvent+0x28>)
 80000a2:	8023      	strh	r3, [r4, #0]
 80000a4:	47a8      	blx	r5
 80000a6:	bd38      	pop	{r3, r4, r5, pc}
 80000a8:	20000200 	.word	0x20000200
 80000ac:	08003058 	.word	0x08003058
 80000b0:	08001739 	.word	0x08001739

080000b4 <Ap_EduMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_EduMenu_ShowMenu(void)
{
 80000b4:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
	Lb_printf("*******************************************************\n");
 80000b6:	4d11      	ldr	r5, [pc, #68]	; (80000fc <Ap_EduMenu_ShowMenu+0x48>)
---------------------------------------------------------------------------*/
void Ap_EduMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80000b8:	4c11      	ldr	r4, [pc, #68]	; (8000100 <Ap_EduMenu_ShowMenu+0x4c>)
 80000ba:	4812      	ldr	r0, [pc, #72]	; (8000104 <Ap_EduMenu_ShowMenu+0x50>)
 80000bc:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80000be:	4628      	mov	r0, r5
 80000c0:	47a0      	blx	r4
	Lb_printf("                      Edu V0.3                         \n");
 80000c2:	4811      	ldr	r0, [pc, #68]	; (8000108 <Ap_EduMenu_ShowMenu+0x54>)
 80000c4:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80000c6:	4628      	mov	r0, r5
 80000c8:	47a0      	blx	r4
	Lb_printf("* 1. LED Test                                         *\n");
 80000ca:	4810      	ldr	r0, [pc, #64]	; (800010c <Ap_EduMenu_ShowMenu+0x58>)
 80000cc:	47a0      	blx	r4
	Lb_printf("* 2. KeyPad Test                                      *\n");
 80000ce:	4810      	ldr	r0, [pc, #64]	; (8000110 <Ap_EduMenu_ShowMenu+0x5c>)
 80000d0:	47a0      	blx	r4
	Lb_printf("* 3. 7Seg Test                                        *\n");
 80000d2:	4810      	ldr	r0, [pc, #64]	; (8000114 <Ap_EduMenu_ShowMenu+0x60>)
 80000d4:	47a0      	blx	r4
	Lb_printf("* 4.                                                  *\n");
 80000d6:	4810      	ldr	r0, [pc, #64]	; (8000118 <Ap_EduMenu_ShowMenu+0x64>)
 80000d8:	47a0      	blx	r4
	Lb_printf("* 5.                                                  *\n");
 80000da:	4810      	ldr	r0, [pc, #64]	; (800011c <Ap_EduMenu_ShowMenu+0x68>)
 80000dc:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 80000de:	4810      	ldr	r0, [pc, #64]	; (8000120 <Ap_EduMenu_ShowMenu+0x6c>)
 80000e0:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 80000e2:	4810      	ldr	r0, [pc, #64]	; (8000124 <Ap_EduMenu_ShowMenu+0x70>)
 80000e4:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 80000e6:	4810      	ldr	r0, [pc, #64]	; (8000128 <Ap_EduMenu_ShowMenu+0x74>)
 80000e8:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 80000ea:	4810      	ldr	r0, [pc, #64]	; (800012c <Ap_EduMenu_ShowMenu+0x78>)
 80000ec:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 80000ee:	4810      	ldr	r0, [pc, #64]	; (8000130 <Ap_EduMenu_ShowMenu+0x7c>)
 80000f0:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80000f2:	4628      	mov	r0, r5
 80000f4:	47a0      	blx	r4
	Lb_printf("\n");
 80000f6:	480f      	ldr	r0, [pc, #60]	; (8000134 <Ap_EduMenu_ShowMenu+0x80>)
 80000f8:	47a0      	blx	r4
 80000fa:	bd38      	pop	{r3, r4, r5, pc}
 80000fc:	08003060 	.word	0x08003060
 8000100:	080006b1 	.word	0x080006b1
 8000104:	0800305c 	.word	0x0800305c
 8000108:	0800309c 	.word	0x0800309c
 800010c:	080030d8 	.word	0x080030d8
 8000110:	08003114 	.word	0x08003114
 8000114:	08003150 	.word	0x08003150
 8000118:	0800318c 	.word	0x0800318c
 800011c:	080031c8 	.word	0x080031c8
 8000120:	08003204 	.word	0x08003204
 8000124:	08003240 	.word	0x08003240
 8000128:	0800327c 	.word	0x0800327c
 800012c:	080032b8 	.word	0x080032b8
 8000130:	080032f4 	.word	0x080032f4
 8000134:	0800339c 	.word	0x0800339c

08000138 <Ap_EduMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_EduMenu_GetCmd(void)
{
 8000138:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 800013a:	4805      	ldr	r0, [pc, #20]	; (8000150 <Ap_EduMenu_GetCmd+0x18>)
 800013c:	4c05      	ldr	r4, [pc, #20]	; (8000154 <Ap_EduMenu_GetCmd+0x1c>)
 800013e:	47a0      	blx	r4

    key=get_byte();
 8000140:	4b05      	ldr	r3, [pc, #20]	; (8000158 <Ap_EduMenu_GetCmd+0x20>)
 8000142:	4798      	blx	r3
 8000144:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8000146:	4805      	ldr	r0, [pc, #20]	; (800015c <Ap_EduMenu_GetCmd+0x24>)
 8000148:	47a0      	blx	r4
	
    return key;
}
 800014a:	4628      	mov	r0, r5
 800014c:	bd38      	pop	{r3, r4, r5, pc}
 800014e:	bf00      	nop
 8000150:	08003330 	.word	0x08003330
 8000154:	080006b1 	.word	0x080006b1
 8000158:	08000b11 	.word	0x08000b11
 800015c:	0800339c 	.word	0x0800339c

08000160 <Ap_EduMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_EduMenu_ExeCmd(void)
{
 8000160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16 Ret = ERR_NONE;
			
	
	if( ExeFirst == TRUE )
	{
		Ap_EduMenu_ShowMenu();		
 8000164:	4b3b      	ldr	r3, [pc, #236]	; (8000254 <Ap_EduMenu_ExeCmd+0xf4>)
 8000166:	4798      	blx	r3
		
		Hw_KeyPad_SetEventFunc( 2, KeyPad_UpKeyEvent );
 8000168:	4c3b      	ldr	r4, [pc, #236]	; (8000258 <Ap_EduMenu_ExeCmd+0xf8>)
 800016a:	2002      	movs	r0, #2
 800016c:	493b      	ldr	r1, [pc, #236]	; (800025c <Ap_EduMenu_ExeCmd+0xfc>)
 800016e:	47a0      	blx	r4
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
 8000170:	2000      	movs	r0, #0
 8000172:	493b      	ldr	r1, [pc, #236]	; (8000260 <Ap_EduMenu_ExeCmd+0x100>)
 8000174:	47a0      	blx	r4
 8000176:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80002a0 <Ap_EduMenu_ExeCmd+0x140>
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
					{
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
 800017a:	4f3a      	ldr	r7, [pc, #232]	; (8000264 <Ap_EduMenu_ExeCmd+0x104>)
		
		Hw_KeyPad_SetEventFunc( 2, KeyPad_UpKeyEvent );
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
	}

    while( (key = Ap_EduMenu_GetCmd()) != 0 )
 800017c:	47c0      	blx	r8
 800017e:	4603      	mov	r3, r0
 8000180:	b340      	cbz	r0, 80001d4 <Ap_EduMenu_ExeCmd+0x74>
    {
        switch(key)
 8000182:	2b33      	cmp	r3, #51	; 0x33
 8000184:	d05b      	beq.n	800023e <Ap_EduMenu_ExeCmd+0xde>
 8000186:	d83c      	bhi.n	8000202 <Ap_EduMenu_ExeCmd+0xa2>
 8000188:	2b31      	cmp	r3, #49	; 0x31
 800018a:	d041      	beq.n	8000210 <Ap_EduMenu_ExeCmd+0xb0>
 800018c:	2b32      	cmp	r3, #50	; 0x32
 800018e:	d1f5      	bne.n	800017c <Ap_EduMenu_ExeCmd+0x1c>
           		Hw_Led_Toggle( 3 );
           		Hw_Timer_Delay_ms(500);
               	break;

           case '2':
           		Lb_printf("KeyPad Start : press two keys to exit\n");
 8000190:	4835      	ldr	r0, [pc, #212]	; (8000268 <Ap_EduMenu_ExeCmd+0x108>)
 8000192:	4e36      	ldr	r6, [pc, #216]	; (800026c <Ap_EduMenu_ExeCmd+0x10c>)
 8000194:	47b0      	blx	r6
 8000196:	4d36      	ldr	r5, [pc, #216]	; (8000270 <Ap_EduMenu_ExeCmd+0x110>)
 8000198:	4c36      	ldr	r4, [pc, #216]	; (8000274 <Ap_EduMenu_ExeCmd+0x114>)
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
					{
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
 800019a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80002a4 <Ap_EduMenu_ExeCmd+0x144>
 800019e:	e006      	b.n	80001ae <Ap_EduMenu_ExeCmd+0x4e>
           			if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_PRESSED) )
           			{ 
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
					}										
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_RELEASED) )
 80001a0:	0742      	lsls	r2, r0, #29
 80001a2:	d419      	bmi.n	80001d8 <Ap_EduMenu_ExeCmd+0x78>
					{
						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );           		           									
					}
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
 80001a4:	0783      	lsls	r3, r0, #30
 80001a6:	d41d      	bmi.n	80001e4 <Ap_EduMenu_ExeCmd+0x84>
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
					}
					
					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
 80001a8:	47a0      	blx	r4
						
					if( KeyPressedCnt >= 2 )
 80001aa:	2801      	cmp	r0, #1
 80001ac:	d80c      	bhi.n	80001c8 <Ap_EduMenu_ExeCmd+0x68>

           case '2':
           		Lb_printf("KeyPad Start : press two keys to exit\n");
           		while(1)
           		{
           			KeyEvent = Hw_KeyPad_WaitForEvent(1000);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	47a8      	blx	r5
           			 
           			if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_PRESSED) )
 80001b4:	07c1      	lsls	r1, r0, #31
 80001b6:	d5f3      	bpl.n	80001a0 <Ap_EduMenu_ExeCmd+0x40>
           			{ 
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
 80001b8:	2000      	movs	r0, #0
 80001ba:	47b8      	blx	r7
 80001bc:	4601      	mov	r1, r0
 80001be:	482e      	ldr	r0, [pc, #184]	; (8000278 <Ap_EduMenu_ExeCmd+0x118>)
 80001c0:	47b0      	blx	r6
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
					}
					
					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
 80001c2:	47a0      	blx	r4
						
					if( KeyPressedCnt >= 2 )
 80001c4:	2801      	cmp	r0, #1
 80001c6:	d9f2      	bls.n	80001ae <Ap_EduMenu_ExeCmd+0x4e>
					{
						Lb_printf("Key Exit\n");
 80001c8:	482c      	ldr	r0, [pc, #176]	; (800027c <Ap_EduMenu_ExeCmd+0x11c>)
 80001ca:	47b0      	blx	r6
		
		Hw_KeyPad_SetEventFunc( 2, KeyPad_UpKeyEvent );
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
	}

    while( (key = Ap_EduMenu_GetCmd()) != 0 )
 80001cc:	47c0      	blx	r8
 80001ce:	4603      	mov	r3, r0
 80001d0:	2800      	cmp	r0, #0
 80001d2:	d1d6      	bne.n	8000182 <Ap_EduMenu_ExeCmd+0x22>
               break;
        }
    }
    
    return Ret;
}
 80001d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
					}										
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_RELEASED) )
					{
						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );           		           									
 80001d8:	2002      	movs	r0, #2
 80001da:	47b8      	blx	r7
 80001dc:	4601      	mov	r1, r0
 80001de:	4828      	ldr	r0, [pc, #160]	; (8000280 <Ap_EduMenu_ExeCmd+0x120>)
 80001e0:	47b0      	blx	r6
 80001e2:	e7e1      	b.n	80001a8 <Ap_EduMenu_ExeCmd+0x48>
					}
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
					{
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <Ap_EduMenu_ExeCmd+0x124>)
 80001e6:	2001      	movs	r0, #1
 80001e8:	4798      	blx	r3
 80001ea:	4682      	mov	sl, r0
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
 80001ec:	2001      	movs	r0, #1
 80001ee:	47b8      	blx	r7
 80001f0:	4683      	mov	fp, r0
 80001f2:	fa5f f08a 	uxtb.w	r0, sl
 80001f6:	47c8      	blx	r9
 80001f8:	4659      	mov	r1, fp
 80001fa:	4602      	mov	r2, r0
 80001fc:	4822      	ldr	r0, [pc, #136]	; (8000288 <Ap_EduMenu_ExeCmd+0x128>)
 80001fe:	47b0      	blx	r6
 8000200:	e7d2      	b.n	80001a8 <Ap_EduMenu_ExeCmd+0x48>
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
	}

    while( (key = Ap_EduMenu_GetCmd()) != 0 )
    {
        switch(key)
 8000202:	2b4d      	cmp	r3, #77	; 0x4d
 8000204:	d001      	beq.n	800020a <Ap_EduMenu_ExeCmd+0xaa>
 8000206:	2b6d      	cmp	r3, #109	; 0x6d
 8000208:	d1b8      	bne.n	800017c <Ap_EduMenu_ExeCmd+0x1c>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_EduMenu_ShowMenu();
 800020a:	4b12      	ldr	r3, [pc, #72]	; (8000254 <Ap_EduMenu_ExeCmd+0xf4>)
 800020c:	4798      	blx	r3
				break;
 800020e:	e7b5      	b.n	800017c <Ap_EduMenu_ExeCmd+0x1c>
    while( (key = Ap_EduMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Hw_Led_Toggle( 0 );
 8000210:	4d1e      	ldr	r5, [pc, #120]	; (800028c <Ap_EduMenu_ExeCmd+0x12c>)
 8000212:	2000      	movs	r0, #0
           		Hw_Timer_Delay_ms(500);
 8000214:	4c1e      	ldr	r4, [pc, #120]	; (8000290 <Ap_EduMenu_ExeCmd+0x130>)
    while( (key = Ap_EduMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Hw_Led_Toggle( 0 );
 8000216:	47a8      	blx	r5
           		Hw_Timer_Delay_ms(500);
 8000218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021c:	47a0      	blx	r4
           		Hw_Led_Toggle( 1 );
 800021e:	2001      	movs	r0, #1
 8000220:	47a8      	blx	r5
           		Hw_Timer_Delay_ms(500);
 8000222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000226:	47a0      	blx	r4
           		Hw_Led_Toggle( 2 );;
 8000228:	2002      	movs	r0, #2
 800022a:	47a8      	blx	r5
           		Hw_Timer_Delay_ms(500);
 800022c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000230:	47a0      	blx	r4
           		Hw_Led_Toggle( 3 );
 8000232:	2003      	movs	r0, #3
 8000234:	47a8      	blx	r5
           		Hw_Timer_Delay_ms(500);
 8000236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800023a:	47a0      	blx	r4
               	break;
 800023c:	e79e      	b.n	800017c <Ap_EduMenu_ExeCmd+0x1c>
					}	
				}
				break;

           case '3':	
           		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <Ap_EduMenu_ExeCmd+0x134>)
 8000240:	4d14      	ldr	r5, [pc, #80]	; (8000294 <Ap_EduMenu_ExeCmd+0x134>)
 8000242:	881a      	ldrh	r2, [r3, #0]
 8000244:	2000      	movs	r0, #0
 8000246:	1c54      	adds	r4, r2, #1
 8000248:	4913      	ldr	r1, [pc, #76]	; (8000298 <Ap_EduMenu_ExeCmd+0x138>)
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <Ap_EduMenu_ExeCmd+0x13c>)
 800024c:	802c      	strh	r4, [r5, #0]
 800024e:	4798      	blx	r3
               break; 
 8000250:	e794      	b.n	800017c <Ap_EduMenu_ExeCmd+0x1c>
 8000252:	bf00      	nop
 8000254:	080000b5 	.word	0x080000b5
 8000258:	08001595 	.word	0x08001595
 800025c:	08000061 	.word	0x08000061
 8000260:	08000089 	.word	0x08000089
 8000264:	08001605 	.word	0x08001605
 8000268:	08003334 	.word	0x08003334
 800026c:	080006b1 	.word	0x080006b1
 8000270:	080015d5 	.word	0x080015d5
 8000274:	080015c9 	.word	0x080015c9
 8000278:	0800335c 	.word	0x0800335c
 800027c:	08003394 	.word	0x08003394
 8000280:	0800336c 	.word	0x0800336c
 8000284:	08001619 	.word	0x08001619
 8000288:	0800337c 	.word	0x0800337c
 800028c:	08000c09 	.word	0x08000c09
 8000290:	08000ed5 	.word	0x08000ed5
 8000294:	20000200 	.word	0x20000200
 8000298:	08003058 	.word	0x08003058
 800029c:	08001739 	.word	0x08001739
 80002a0:	08000139 	.word	0x08000139
 80002a4:	080015ad 	.word	0x080015ad

080002a8 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 80002a8:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <print_byte_out+0x28>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b163      	cbz	r3, 80002ca <print_byte_out+0x22>
 80002b0:	4604      	mov	r4, r0
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <print_byte_out+0x2c>)
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <print_byte_out+0x30>)
 80002b6:	6819      	ldr	r1, [r3, #0]
 80002b8:	6810      	ldr	r0, [r2, #0]
 80002ba:	1c4d      	adds	r5, r1, #1
 80002bc:	601d      	str	r5, [r3, #0]
 80002be:	5444      	strb	r4, [r0, r1]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	2100      	movs	r1, #0
 80002c6:	54d1      	strb	r1, [r2, r3]
 80002c8:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <print_byte_out+0x34>)
 80002cc:	4798      	blx	r3
 80002ce:	bd38      	pop	{r3, r4, r5, pc}
 80002d0:	20000208 	.word	0x20000208
 80002d4:	20000204 	.word	0x20000204
 80002d8:	200002f8 	.word	0x200002f8
 80002dc:	08000ae5 	.word	0x08000ae5

080002e0 <PrintString>:
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 80002e0:	b158      	cbz	r0, 80002fa <PrintString+0x1a>
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 80002e2:	b538      	push	{r3, r4, r5, lr}
 80002e4:	460c      	mov	r4, r1
        if (!fmt || !s) return;
 80002e6:	b139      	cbz	r1, 80002f8 <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 80002e8:	7808      	ldrb	r0, [r1, #0]
 80002ea:	b128      	cbz	r0, 80002f8 <PrintString+0x18>
 80002ec:	4d03      	ldr	r5, [pc, #12]	; (80002fc <PrintString+0x1c>)
 80002ee:	47a8      	blx	r5
 80002f0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80002f4:	2800      	cmp	r0, #0
 80002f6:	d1fa      	bne.n	80002ee <PrintString+0xe>
 80002f8:	bd38      	pop	{r3, r4, r5, pc}
 80002fa:	4770      	bx	lr
 80002fc:	080002a9 	.word	0x080002a9

08000300 <DecToLong>:
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000300:	b1e8      	cbz	r0, 800033e <DecToLong+0x3e>
 8000302:	7803      	ldrb	r3, [r0, #0]
 8000304:	b1db      	cbz	r3, 800033e <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 8000306:	2300      	movs	r3, #0
 8000308:	600b      	str	r3, [r1, #0]
 800030a:	7802      	ldrb	r2, [r0, #0]
 800030c:	b1e2      	cbz	r2, 8000348 <DecToLong+0x48>
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 800030e:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8000310:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000314:	b2e2      	uxtb	r2, r4
 8000316:	2a09      	cmp	r2, #9
 8000318:	d902      	bls.n	8000320 <DecToLong+0x20>
 800031a:	e012      	b.n	8000342 <DecToLong+0x42>
 800031c:	2d09      	cmp	r5, #9
 800031e:	d810      	bhi.n	8000342 <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8000320:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000324:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000328:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800032a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 800032e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000332:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000334:	2a00      	cmp	r2, #0
 8000336:	d1f1      	bne.n	800031c <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000338:	2001      	movs	r0, #1
}        // DecToLong.
 800033a:	bc30      	pop	{r4, r5}
 800033c:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 800033e:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 8000340:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000342:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 8000344:	bc30      	pop	{r4, r5}
 8000346:	4770      	bx	lr
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000348:	2001      	movs	r0, #1
}        // DecToLong.
 800034a:	4770      	bx	lr

0800034c <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000350:	7803      	ldrb	r3, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 8000352:	b084      	sub	sp, #16
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8000354:	2400      	movs	r4, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 8000356:	4680      	mov	r8, r0
 8000358:	4689      	mov	r9, r1
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800035a:	9400      	str	r4, [sp, #0]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800035c:	2b00      	cmp	r3, #0
 800035e:	f000 8081 	beq.w	8000464 <PrintDec+0x118>
	{
		if (c=='d') break;
 8000362:	2b64      	cmp	r3, #100	; 0x64
 8000364:	d07e      	beq.n	8000464 <PrintDec+0x118>
 8000366:	46a2      	mov	sl, r4
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000368:	4626      	mov	r6, r4
			i--;
			DecToLong(tol, &flagcnt);
 800036a:	4d59      	ldr	r5, [pc, #356]	; (80004d0 <PrintDec+0x184>)

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 800036c:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000370:	2a08      	cmp	r2, #8
 8000372:	d873      	bhi.n	800045c <PrintDec+0x110>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000374:	f818 200a 	ldrb.w	r2, [r8, sl]
 8000378:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800037c:	2b09      	cmp	r3, #9
 800037e:	f200 8094 	bhi.w	80004aa <PrintDec+0x15e>
 8000382:	a801      	add	r0, sp, #4
 8000384:	4607      	mov	r7, r0
 8000386:	f10a 0301 	add.w	r3, sl, #1
 800038a:	4443      	add	r3, r8
 800038c:	2100      	movs	r1, #0
			{
				tol[j] = s[i++];
 800038e:	f807 2b01 	strb.w	r2, [r7], #1
 8000392:	ebc8 0a03 	rsb	sl, r8, r3
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800039a:	3101      	adds	r1, #1
 800039c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80003a0:	f1be 0f09 	cmp.w	lr, #9
 80003a4:	d9f3      	bls.n	800038e <PrintDec+0x42>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80003a6:	ab04      	add	r3, sp, #16
 80003a8:	185a      	adds	r2, r3, r1
			i--;
			DecToLong(tol, &flagcnt);
 80003aa:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80003ac:	f802 6c0c 	strb.w	r6, [r2, #-12]
			i--;
 80003b0:	f10a 3aff 	add.w	sl, sl, #4294967295
			DecToLong(tol, &flagcnt);
 80003b4:	47a8      	blx	r5
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80003b6:	f10a 0a01 	add.w	sl, sl, #1
 80003ba:	f818 300a 	ldrb.w	r3, [r8, sl]
 80003be:	b10b      	cbz	r3, 80003c4 <PrintDec+0x78>
	{
		if (c=='d') break;
 80003c0:	2b64      	cmp	r3, #100	; 0x64
 80003c2:	d1d3      	bne.n	800036c <PrintDec+0x20>
		else if (c=='l') flagl=true;
		else continue;
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	2800      	cmp	r0, #0
 80003c8:	d04c      	beq.n	8000464 <PrintDec+0x118>
	{
                if (flagcnt>9) flagcnt=9;
 80003ca:	2809      	cmp	r0, #9
 80003cc:	dc68      	bgt.n	80004a0 <PrintDec+0x154>
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003ce:	2801      	cmp	r0, #1
 80003d0:	f1a0 0102 	sub.w	r1, r0, #2
 80003d4:	d06c      	beq.n	80004b0 <PrintDec+0x164>
 80003d6:	1ec2      	subs	r2, r0, #3

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80003d8:	230a      	movs	r3, #10
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003da:	3901      	subs	r1, #1
                retval *= num;
 80003dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003e0:	1c4d      	adds	r5, r1, #1
                retval *= num;
 80003e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003e6:	d1f8      	bne.n	80003da <PrintDec+0x8e>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80003e8:	fb99 f6f3 	sdiv	r6, r9, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003ec:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80003ee:	fb03 9616 	mls	r6, r3, r6, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003f2:	d06b      	beq.n	80004cc <PrintDec+0x180>
 80003f4:	4613      	mov	r3, r2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80003f6:	250a      	movs	r5, #10
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003f8:	3b01      	subs	r3, #1
                retval *= num;
 80003fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003fe:	1c5a      	adds	r2, r3, #1
                retval *= num;
 8000400:	ea4f 0545 	mov.w	r5, r5, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000404:	d1f8      	bne.n	80003f8 <PrintDec+0xac>
 8000406:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80004dc <PrintDec+0x190>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800040a:	4f32      	ldr	r7, [pc, #200]	; (80004d4 <PrintDec+0x188>)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
 800040c:	f04f 0901 	mov.w	r9, #1
 8000410:	e00f      	b.n	8000432 <PrintDec+0xe6>
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000412:	2d01      	cmp	r5, #1
 8000414:	d015      	beq.n	8000442 <PrintDec+0xf6>


                        if (leading_zero==true){
 8000416:	f1b9 0f00 	cmp.w	r9, #0
 800041a:	d012      	beq.n	8000442 <PrintDec+0xf6>
                                if (flag0)        print_byte_out('0');
 800041c:	2030      	movs	r0, #48	; 0x30
 800041e:	b904      	cbnz	r4, 8000422 <PrintDec+0xd6>
                                else                print_byte_out(' ');
 8000420:	2020      	movs	r0, #32
 8000422:	47c0      	blx	r8
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000424:	fb87 2305 	smull	r2, r3, r7, r5
 8000428:	17ed      	asrs	r5, r5, #31
 800042a:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
 800042e:	2d00      	cmp	r5, #0
 8000430:	dd11      	ble.n	8000456 <PrintDec+0x10a>
                        result = remainder/divisor;
 8000432:	fb96 f2f5 	sdiv	r2, r6, r5

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000436:	b2d0      	uxtb	r0, r2
 8000438:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800043a:	fb05 6612 	mls	r6, r5, r2, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 800043e:	2a00      	cmp	r2, #0
 8000440:	d0e7      	beq.n	8000412 <PrintDec+0xc6>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000442:	47c0      	blx	r8
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000444:	fb87 2305 	smull	r2, r3, r7, r5
 8000448:	17ed      	asrs	r5, r5, #31
 800044a:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
 800044e:	2d00      	cmp	r5, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000450:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000454:	dced      	bgt.n	8000432 <PrintDec+0xe6>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8000456:	b004      	add	sp, #16
 8000458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 800045c:	2b30      	cmp	r3, #48	; 0x30
 800045e:	bf08      	it	eq
 8000460:	2401      	moveq	r4, #1
 8000462:	e7a8      	b.n	80003b6 <PrintDec+0x6a>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000464:	250a      	movs	r5, #10
 8000466:	4c1c      	ldr	r4, [pc, #112]	; (80004d8 <PrintDec+0x18c>)
 8000468:	2201      	movs	r2, #1
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800046a:	4e1c      	ldr	r6, [pc, #112]	; (80004dc <PrintDec+0x190>)
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 800046c:	4f19      	ldr	r7, [pc, #100]	; (80004d4 <PrintDec+0x188>)
 800046e:	e009      	b.n	8000484 <PrintDec+0x138>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000470:	47b0      	blx	r6
 8000472:	2200      	movs	r2, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 8000474:	fb87 1304 	smull	r1, r3, r7, r4
 8000478:	3d01      	subs	r5, #1
 800047a:	ea4f 74e4 	mov.w	r4, r4, asr #31
 800047e:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000482:	d0e8      	beq.n	8000456 <PrintDec+0x10a>
                        result = remainder/divisor;
 8000484:	fb99 f3f4 	sdiv	r3, r9, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000488:	b2d8      	uxtb	r0, r3
 800048a:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800048c:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1ed      	bne.n	8000470 <PrintDec+0x124>
 8000494:	2c01      	cmp	r4, #1
 8000496:	d0eb      	beq.n	8000470 <PrintDec+0x124>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8000498:	2a00      	cmp	r2, #0
 800049a:	d0e9      	beq.n	8000470 <PrintDec+0x124>
 800049c:	2201      	movs	r2, #1
 800049e:	e7e9      	b.n	8000474 <PrintDec+0x128>
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 80004a0:	2009      	movs	r0, #9
 80004a2:	9000      	str	r0, [sp, #0]
 80004a4:	2206      	movs	r2, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004a6:	2107      	movs	r1, #7
 80004a8:	e796      	b.n	80003d8 <PrintDec+0x8c>
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80004aa:	2100      	movs	r1, #0
 80004ac:	a801      	add	r0, sp, #4
 80004ae:	e77a      	b.n	80003a6 <PrintDec+0x5a>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <PrintDec+0x188>)
 80004b2:	ea4f 76e9 	mov.w	r6, r9, asr #31
 80004b6:	fb83 2309 	smull	r2, r3, r3, r9
 80004ba:	ebc6 06a3 	rsb	r6, r6, r3, asr #2
 80004be:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80004c2:	eba9 0643 	sub.w	r6, r9, r3, lsl #1
 80004c6:	f06f 0301 	mvn.w	r3, #1
 80004ca:	e794      	b.n	80003f6 <PrintDec+0xaa>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80004cc:	250a      	movs	r5, #10
 80004ce:	e79a      	b.n	8000406 <PrintDec+0xba>
 80004d0:	08000301 	.word	0x08000301
 80004d4:	66666667 	.word	0x66666667
 80004d8:	3b9aca00 	.word	0x3b9aca00
 80004dc:	080002a9 	.word	0x080002a9

080004e0 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80004e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80004e4:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80004e6:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80004e8:	2400      	movs	r4, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80004ea:	4681      	mov	r9, r0
 80004ec:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80004ee:	9402      	str	r4, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d05b      	beq.n	80005ac <PrintHex+0xcc>
                if (c=='x') break;
 80004f4:	2b78      	cmp	r3, #120	; 0x78
 80004f6:	d059      	beq.n	80005ac <PrintHex+0xcc>
 80004f8:	46a0      	mov	r8, r4
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80004fa:	4626      	mov	r6, r4
                        i--;
                        DecToLong(tol, &flagcnt);
 80004fc:	4d6a      	ldr	r5, [pc, #424]	; (80006a8 <PrintHex+0x1c8>)


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80004fe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000502:	2a08      	cmp	r2, #8
 8000504:	d84e      	bhi.n	80005a4 <PrintHex+0xc4>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000506:	f819 2008 	ldrb.w	r2, [r9, r8]
 800050a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800050e:	2b09      	cmp	r3, #9
 8000510:	f200 80ac 	bhi.w	800066c <PrintHex+0x18c>
 8000514:	a803      	add	r0, sp, #12
 8000516:	4607      	mov	r7, r0
 8000518:	f108 0301 	add.w	r3, r8, #1
 800051c:	444b      	add	r3, r9
 800051e:	2100      	movs	r1, #0
                                tol[j] = s[i++];
 8000520:	f807 2b01 	strb.w	r2, [r7], #1
 8000524:	ebc9 0803 	rsb	r8, r9, r3

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000528:	f813 2b01 	ldrb.w	r2, [r3], #1
 800052c:	3101      	adds	r1, #1
 800052e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8000532:	f1be 0f09 	cmp.w	lr, #9
 8000536:	d9f3      	bls.n	8000520 <PrintHex+0x40>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000538:	ab06      	add	r3, sp, #24
 800053a:	185a      	adds	r2, r3, r1
                        i--;
                        DecToLong(tol, &flagcnt);
 800053c:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800053e:	f802 6c0c 	strb.w	r6, [r2, #-12]
                        i--;
 8000542:	f108 38ff 	add.w	r8, r8, #4294967295
                        DecToLong(tol, &flagcnt);
 8000546:	47a8      	blx	r5
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000548:	f108 0801 	add.w	r8, r8, #1
 800054c:	f819 3008 	ldrb.w	r3, [r9, r8]
 8000550:	b10b      	cbz	r3, 8000556 <PrintHex+0x76>
                if (c=='x') break;
 8000552:	2b78      	cmp	r3, #120	; 0x78
 8000554:	d1d3      	bne.n	80004fe <PrintHex+0x1e>
 8000556:	9a01      	ldr	r2, [sp, #4]
 8000558:	9b02      	ldr	r3, [sp, #8]
 800055a:	ba12      	rev	r2, r2
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800055c:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 800055e:	b343      	cbz	r3, 80005b2 <PrintHex+0xd2>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000560:	07da      	lsls	r2, r3, #31
 8000562:	d44f      	bmi.n	8000604 <PrintHex+0x124>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000564:	2201      	movs	r2, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000566:	f1c3 0308 	rsb	r3, r3, #8
 800056a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800056e:	105d      	asrs	r5, r3, #1
 8000570:	2d03      	cmp	r5, #3
 8000572:	dc38      	bgt.n	80005e6 <PrintHex+0x106>
 8000574:	ab01      	add	r3, sp, #4
 8000576:	441d      	add	r5, r3
                        c = s[i];
 8000578:	f815 3b01 	ldrb.w	r3, [r5], #1
 800057c:	4e4b      	ldr	r6, [pc, #300]	; (80006ac <PrintHex+0x1cc>)
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800057e:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000582:	091b      	lsrs	r3, r3, #4


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000584:	46b1      	mov	r9, r6
 8000586:	f10d 0808 	add.w	r8, sp, #8
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800058a:	d05d      	beq.n	8000648 <PrintHex+0x168>
                        if (uHex<10) uHex+='0';
 800058c:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 800058e:	bf88      	it	hi
 8000590:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000594:	f240 8081 	bls.w	800069a <PrintHex+0x1ba>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000598:	47b0      	blx	r6
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800059a:	2f00      	cmp	r7, #0
 800059c:	d146      	bne.n	800062c <PrintHex+0x14c>
                        if (lHex<10) lHex+='0';
 800059e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80005a2:	e047      	b.n	8000634 <PrintHex+0x154>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 80005a4:	2b30      	cmp	r3, #48	; 0x30
 80005a6:	bf08      	it	eq
 80005a8:	2401      	moveq	r4, #1
 80005aa:	e7cd      	b.n	8000548 <PrintHex+0x68>
 80005ac:	9b01      	ldr	r3, [sp, #4]
 80005ae:	ba1b      	rev	r3, r3
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80005b0:	9301      	str	r3, [sp, #4]

                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80005b2:	4f3e      	ldr	r7, [pc, #248]	; (80006ac <PrintHex+0x1cc>)
 80005b4:	ae01      	add	r6, sp, #4
 80005b6:	2201      	movs	r2, #1
 80005b8:	2500      	movs	r5, #0
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80005ba:	f816 3b01 	ldrb.w	r3, [r6], #1
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80005be:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	d01a      	beq.n	80005fc <PrintHex+0x11c>
                        if (uHex<10) uHex+='0';
 80005c6:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 80005c8:	bf88      	it	hi
 80005ca:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80005ce:	d961      	bls.n	8000694 <PrintHex+0x1b4>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80005d0:	47b8      	blx	r7
 80005d2:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80005d4:	b954      	cbnz	r4, 80005ec <PrintHex+0x10c>
 80005d6:	2d03      	cmp	r5, #3
 80005d8:	d062      	beq.n	80006a0 <PrintHex+0x1c0>
 80005da:	2201      	movs	r2, #1
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d05f      	beq.n	80006a0 <PrintHex+0x1c0>
                        }
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 80005e0:	3501      	adds	r5, #1
 80005e2:	2d04      	cmp	r5, #4
 80005e4:	d1e9      	bne.n	80005ba <PrintHex+0xda>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 80005e6:	b007      	add	sp, #28
 80005e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80005ec:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 80005ee:	bf88      	it	hi
 80005f0:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80005f4:	d954      	bls.n	80006a0 <PrintHex+0x1c0>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80005f6:	47b8      	blx	r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	e7f1      	b.n	80005e0 <PrintHex+0x100>

                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80005fc:	2a00      	cmp	r2, #0
 80005fe:	d049      	beq.n	8000694 <PrintHex+0x1b4>
 8000600:	2301      	movs	r3, #1
 8000602:	e7e7      	b.n	80005d4 <PrintHex+0xf4>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000604:	f1c3 0307 	rsb	r3, r3, #7
 8000608:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800060c:	aa06      	add	r2, sp, #24
 800060e:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000612:	f813 3c14 	ldrb.w	r3, [r3, #-20]
                        if (lHex!=0) leading_zero=false;
 8000616:	f013 030f 	ands.w	r3, r3, #15
 800061a:	d02a      	beq.n	8000672 <PrintHex+0x192>
                        if (lHex<10) lHex+='0';
 800061c:	2b09      	cmp	r3, #9
 800061e:	d936      	bls.n	800068e <PrintHex+0x1ae>
                        else         lHex+='A'-10;
 8000620:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000624:	4e21      	ldr	r6, [pc, #132]	; (80006ac <PrintHex+0x1cc>)
 8000626:	47b0      	blx	r6
 8000628:	2200      	movs	r2, #0
 800062a:	e027      	b.n	800067c <PrintHex+0x19c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800062c:	2f09      	cmp	r7, #9
 800062e:	d9b6      	bls.n	800059e <PrintHex+0xbe>
                        else         lHex+='A'-10;
 8000630:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000634:	47b0      	blx	r6
 8000636:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000638:	4545      	cmp	r5, r8
 800063a:	d0d4      	beq.n	80005e6 <PrintHex+0x106>
                        c = s[i];
 800063c:	f815 3b01 	ldrb.w	r3, [r5], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000640:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000644:	091b      	lsrs	r3, r3, #4
 8000646:	d1a1      	bne.n	800058c <PrintHex+0xac>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000648:	b33a      	cbz	r2, 800069a <PrintHex+0x1ba>
                                if (flag0) print_byte_out('0');
 800064a:	b13c      	cbz	r4, 800065c <PrintHex+0x17c>
 800064c:	2030      	movs	r0, #48	; 0x30
 800064e:	47b0      	blx	r6
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000650:	2f00      	cmp	r7, #0
 8000652:	d1eb      	bne.n	800062c <PrintHex+0x14c>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000654:	2030      	movs	r0, #48	; 0x30
 8000656:	47c8      	blx	r9
 8000658:	2201      	movs	r2, #1
 800065a:	e7ed      	b.n	8000638 <PrintHex+0x158>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800065c:	2020      	movs	r0, #32
 800065e:	47b0      	blx	r6
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000660:	2f00      	cmp	r7, #0
 8000662:	d1e3      	bne.n	800062c <PrintHex+0x14c>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000664:	2020      	movs	r0, #32
 8000666:	47c8      	blx	r9
 8000668:	2201      	movs	r2, #1
 800066a:	e7e5      	b.n	8000638 <PrintHex+0x158>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800066c:	2100      	movs	r1, #0
 800066e:	a803      	add	r0, sp, #12
 8000670:	e762      	b.n	8000538 <PrintHex+0x58>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000672:	b13c      	cbz	r4, 8000684 <PrintHex+0x1a4>
 8000674:	2030      	movs	r0, #48	; 0x30
 8000676:	4e0d      	ldr	r6, [pc, #52]	; (80006ac <PrintHex+0x1cc>)
 8000678:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800067a:	2201      	movs	r2, #1
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 800067c:	9b02      	ldr	r3, [sp, #8]
 800067e:	3b01      	subs	r3, #1
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	e770      	b.n	8000566 <PrintHex+0x86>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000684:	2020      	movs	r0, #32
 8000686:	4e09      	ldr	r6, [pc, #36]	; (80006ac <PrintHex+0x1cc>)
 8000688:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800068a:	2201      	movs	r2, #1
 800068c:	e7f6      	b.n	800067c <PrintHex+0x19c>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 800068e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000692:	e7c7      	b.n	8000624 <PrintHex+0x144>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000694:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000698:	e79a      	b.n	80005d0 <PrintHex+0xf0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800069a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800069e:	e77b      	b.n	8000598 <PrintHex+0xb8>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80006a0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80006a4:	e7a7      	b.n	80005f6 <PrintHex+0x116>
 80006a6:	bf00      	nop
 80006a8:	08000301 	.word	0x08000301
 80006ac:	080002a9 	.word	0x080002a9

080006b0 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 80006b0:	b40f      	push	{r0, r1, r2, r3}
 80006b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b4:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 80006b6:	ad0a      	add	r5, sp, #40	; 0x28
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <Lb_printf+0xd0>)
 80006ba:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 80006bc:	f855 4b04 	ldr.w	r4, [r5], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80006c0:	4e30      	ldr	r6, [pc, #192]	; (8000784 <Lb_printf+0xd4>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 80006c2:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 80006c4:	7820      	ldrb	r0, [r4, #0]
 80006c6:	b358      	cbz	r0, 8000720 <Lb_printf+0x70>
	{
		if (*s=='%')
 80006c8:	2825      	cmp	r0, #37	; 0x25
 80006ca:	d12e      	bne.n	800072a <Lb_printf+0x7a>
 80006cc:	a901      	add	r1, sp, #4
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 80006ce:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 80006d2:	1c63      	adds	r3, r4, #1
 80006d4:	f104 0c0a 	add.w	ip, r4, #10
 80006d8:	1b1f      	subs	r7, r3, r4
 80006da:	469e      	mov	lr, r3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80006dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80006e0:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 80006e4:	2a01      	cmp	r2, #1
 80006e6:	d92e      	bls.n	8000746 <Lb_printf+0x96>
 80006e8:	2878      	cmp	r0, #120	; 0x78
 80006ea:	d02c      	beq.n	8000746 <Lb_printf+0x96>
 80006ec:	2873      	cmp	r0, #115	; 0x73
 80006ee:	d02a      	beq.n	8000746 <Lb_printf+0x96>
 80006f0:	2825      	cmp	r0, #37	; 0x25
 80006f2:	d028      	beq.n	8000746 <Lb_printf+0x96>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80006f4:	4563      	cmp	r3, ip
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80006f6:	461a      	mov	r2, r3
 80006f8:	f801 0f01 	strb.w	r0, [r1, #1]!
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80006fc:	d1ec      	bne.n	80006d8 <Lb_printf+0x28>
 80006fe:	f89e 0001 	ldrb.w	r0, [lr, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000702:	1c54      	adds	r4, r2, #1
 8000704:	2864      	cmp	r0, #100	; 0x64
 8000706:	d02b      	beq.n	8000760 <Lb_printf+0xb0>
 8000708:	d812      	bhi.n	8000730 <Lb_printf+0x80>
 800070a:	2825      	cmp	r0, #37	; 0x25
 800070c:	d02f      	beq.n	800076e <Lb_printf+0xbe>
 800070e:	2863      	cmp	r0, #99	; 0x63
 8000710:	d1d8      	bne.n	80006c4 <Lb_printf+0x14>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000712:	7828      	ldrb	r0, [r5, #0]
 8000714:	47b0      	blx	r6
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000716:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000718:	1d2f      	adds	r7, r5, #4
 800071a:	463d      	mov	r5, r7
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800071c:	2800      	cmp	r0, #0
 800071e:	d1d3      	bne.n	80006c8 <Lb_printf+0x18>
			s++;
		}
	}
	va_end(args);
	return;
}
 8000720:	b005      	add	sp, #20
 8000722:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000726:	b004      	add	sp, #16
 8000728:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800072a:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 800072c:	3401      	adds	r4, #1
 800072e:	e7c9      	b.n	80006c4 <Lb_printf+0x14>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000730:	2873      	cmp	r0, #115	; 0x73
 8000732:	d01e      	beq.n	8000772 <Lb_printf+0xc2>
 8000734:	2878      	cmp	r0, #120	; 0x78
 8000736:	d1c5      	bne.n	80006c4 <Lb_printf+0x14>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000738:	1d2a      	adds	r2, r5, #4
 800073a:	6829      	ldr	r1, [r5, #0]
 800073c:	a801      	add	r0, sp, #4
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <Lb_printf+0xd8>)
 8000740:	4615      	mov	r5, r2
 8000742:	4798      	blx	r3
					break;
 8000744:	e7be      	b.n	80006c4 <Lb_printf+0x14>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
                	break;
 8000746:	4672      	mov	r2, lr
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000748:	ab04      	add	r3, sp, #16
 800074a:	441f      	add	r7, r3
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800074c:	2864      	cmp	r0, #100	; 0x64
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 800074e:	f04f 0300 	mov.w	r3, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000752:	f807 0c0c 	strb.w	r0, [r7, #-12]
					format[i] = '\0';
 8000756:	f807 3c0b 	strb.w	r3, [r7, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800075a:	f102 0401 	add.w	r4, r2, #1
 800075e:	d1d3      	bne.n	8000708 <Lb_printf+0x58>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000760:	1d2a      	adds	r2, r5, #4
 8000762:	6829      	ldr	r1, [r5, #0]
 8000764:	a801      	add	r0, sp, #4
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <Lb_printf+0xdc>)
 8000768:	4615      	mov	r5, r2
 800076a:	4798      	blx	r3
					break;
 800076c:	e7aa      	b.n	80006c4 <Lb_printf+0x14>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800076e:	47b0      	blx	r6
 8000770:	e7a8      	b.n	80006c4 <Lb_printf+0x14>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000772:	1d2a      	adds	r2, r5, #4
 8000774:	6829      	ldr	r1, [r5, #0]
 8000776:	a801      	add	r0, sp, #4
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <Lb_printf+0xe0>)
 800077a:	4615      	mov	r5, r2
 800077c:	4798      	blx	r3
 					break;
 800077e:	e7a1      	b.n	80006c4 <Lb_printf+0x14>
 8000780:	20000208 	.word	0x20000208
 8000784:	080002a9 	.word	0x080002a9
 8000788:	080004e1 	.word	0x080004e1
 800078c:	0800034d 	.word	0x0800034d
 8000790:	080002e1 	.word	0x080002e1

08000794 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	460c      	mov	r4, r1
 8000798:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800079a:	4b34      	ldr	r3, [pc, #208]	; (800086c <Lb_vsprintf+0xd8>)
 800079c:	2600      	movs	r6, #0
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800079e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8000884 <Lb_vsprintf+0xf0>
	pStrPrintBuf = pStr;
 80007a2:	4f33      	ldr	r7, [pc, #204]	; (8000870 <Lb_vsprintf+0xdc>)
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80007a4:	f04f 0c01 	mov.w	ip, #1
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 80007a8:	601e      	str	r6, [r3, #0]



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80007aa:	4e32      	ldr	r6, [pc, #200]	; (8000874 <Lb_vsprintf+0xe0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 80007ac:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80007ae:	f88e c000 	strb.w	ip, [lr]
	pStrPrintBuf = pStr;
 80007b2:	6038      	str	r0, [r7, #0]
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80007b4:	7820      	ldrb	r0, [r4, #0]
 80007b6:	b358      	cbz	r0, 8000810 <Lb_vsprintf+0x7c>
	{
		if (*s=='%')
 80007b8:	2825      	cmp	r0, #37	; 0x25
 80007ba:	d12b      	bne.n	8000814 <Lb_vsprintf+0x80>
 80007bc:	a901      	add	r1, sp, #4
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 80007be:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 80007c2:	1c63      	adds	r3, r4, #1
 80007c4:	f104 0c0a 	add.w	ip, r4, #10
 80007c8:	1b1f      	subs	r7, r3, r4
 80007ca:	469e      	mov	lr, r3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80007cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80007d0:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 80007d4:	2a01      	cmp	r2, #1
 80007d6:	d92b      	bls.n	8000830 <Lb_vsprintf+0x9c>
 80007d8:	2878      	cmp	r0, #120	; 0x78
 80007da:	d029      	beq.n	8000830 <Lb_vsprintf+0x9c>
 80007dc:	2873      	cmp	r0, #115	; 0x73
 80007de:	d027      	beq.n	8000830 <Lb_vsprintf+0x9c>
 80007e0:	2825      	cmp	r0, #37	; 0x25
 80007e2:	d025      	beq.n	8000830 <Lb_vsprintf+0x9c>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80007e4:	4563      	cmp	r3, ip
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80007e6:	461a      	mov	r2, r3
 80007e8:	f801 0f01 	strb.w	r0, [r1, #1]!
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80007ec:	d1ec      	bne.n	80007c8 <Lb_vsprintf+0x34>
 80007ee:	f89e 0001 	ldrb.w	r0, [lr, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80007f2:	1c54      	adds	r4, r2, #1
 80007f4:	2864      	cmp	r0, #100	; 0x64
 80007f6:	d028      	beq.n	800084a <Lb_vsprintf+0xb6>
 80007f8:	d80f      	bhi.n	800081a <Lb_vsprintf+0x86>
 80007fa:	2825      	cmp	r0, #37	; 0x25
 80007fc:	d02c      	beq.n	8000858 <Lb_vsprintf+0xc4>
 80007fe:	2863      	cmp	r0, #99	; 0x63
 8000800:	d1d8      	bne.n	80007b4 <Lb_vsprintf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000802:	7828      	ldrb	r0, [r5, #0]
 8000804:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000806:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000808:	1d2f      	adds	r7, r5, #4
 800080a:	463d      	mov	r5, r7
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800080c:	2800      	cmp	r0, #0
 800080e:	d1d3      	bne.n	80007b8 <Lb_vsprintf+0x24>
			s++;
		}
	}
	
	return;
}
 8000810:	b005      	add	sp, #20
 8000812:	bdf0      	pop	{r4, r5, r6, r7, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000814:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000816:	3401      	adds	r4, #1
 8000818:	e7cc      	b.n	80007b4 <Lb_vsprintf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800081a:	2873      	cmp	r0, #115	; 0x73
 800081c:	d01e      	beq.n	800085c <Lb_vsprintf+0xc8>
 800081e:	2878      	cmp	r0, #120	; 0x78
 8000820:	d1c8      	bne.n	80007b4 <Lb_vsprintf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000822:	1d2a      	adds	r2, r5, #4
 8000824:	6829      	ldr	r1, [r5, #0]
 8000826:	a801      	add	r0, sp, #4
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <Lb_vsprintf+0xe4>)
 800082a:	4615      	mov	r5, r2
 800082c:	4798      	blx	r3
					break;
 800082e:	e7c1      	b.n	80007b4 <Lb_vsprintf+0x20>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
                	break;
 8000830:	4672      	mov	r2, lr
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000832:	ab04      	add	r3, sp, #16
 8000834:	441f      	add	r7, r3
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000836:	2864      	cmp	r0, #100	; 0x64
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 8000838:	f04f 0300 	mov.w	r3, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800083c:	f807 0c0c 	strb.w	r0, [r7, #-12]
					format[i] = '\0';
 8000840:	f807 3c0b 	strb.w	r3, [r7, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000844:	f102 0401 	add.w	r4, r2, #1
 8000848:	d1d6      	bne.n	80007f8 <Lb_vsprintf+0x64>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800084a:	1d2a      	adds	r2, r5, #4
 800084c:	6829      	ldr	r1, [r5, #0]
 800084e:	a801      	add	r0, sp, #4
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <Lb_vsprintf+0xe8>)
 8000852:	4615      	mov	r5, r2
 8000854:	4798      	blx	r3
					break;
 8000856:	e7ad      	b.n	80007b4 <Lb_vsprintf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000858:	47b0      	blx	r6
 800085a:	e7ab      	b.n	80007b4 <Lb_vsprintf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 800085c:	1d2a      	adds	r2, r5, #4
 800085e:	6829      	ldr	r1, [r5, #0]
 8000860:	a801      	add	r0, sp, #4
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <Lb_vsprintf+0xec>)
 8000864:	4615      	mov	r5, r2
 8000866:	4798      	blx	r3
 					break;
 8000868:	e7a4      	b.n	80007b4 <Lb_vsprintf+0x20>
 800086a:	bf00      	nop
 800086c:	20000204 	.word	0x20000204
 8000870:	200002f8 	.word	0x200002f8
 8000874:	080002a9 	.word	0x080002a9
 8000878:	080004e1 	.word	0x080004e1
 800087c:	0800034d 	.word	0x0800034d
 8000880:	080002e1 	.word	0x080002e1
 8000884:	20000208 	.word	0x20000208

08000888 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8000888:	4668      	mov	r0, sp
 800088a:	f020 0107 	bic.w	r1, r0, #7
 800088e:	468d      	mov	sp, r1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000890:	4a1e      	ldr	r2, [pc, #120]	; (800090c <zero_loop+0x4e>)
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <zero_loop+0x52>)
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8000894:	b501      	push	{r0, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000896:	429a      	cmp	r2, r3
 8000898:	d20d      	bcs.n	80008b6 <Hw_StartUp_Init+0x2e>
 800089a:	43d0      	mvns	r0, r2
 800089c:	491d      	ldr	r1, [pc, #116]	; (8000914 <zero_loop+0x56>)
 800089e:	4418      	add	r0, r3
 80008a0:	460b      	mov	r3, r1
 80008a2:	f020 0003 	bic.w	r0, r0, #3
 80008a6:	3004      	adds	r0, #4
 80008a8:	4408      	add	r0, r1
	{
		*(pulDest++) = *(pulSrc++);
 80008aa:	f853 1b04 	ldr.w	r1, [r3], #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80008ae:	4283      	cmp	r3, r0
	{
		*(pulDest++) = *(pulSrc++);
 80008b0:	f842 1b04 	str.w	r1, [r2], #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80008b4:	d1f9      	bne.n	80008aa <Hw_StartUp_Init+0x22>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <zero_loop+0x66>)
 80008b8:	491b      	ldr	r1, [pc, #108]	; (8000928 <zero_loop+0x6a>)
 80008ba:	f04f 0200 	mov.w	r2, #0

080008be <zero_loop>:
 80008be:	4288      	cmp	r0, r1
 80008c0:	bfb8      	it	lt
 80008c2:	f840 2b04 	strlt.w	r2, [r0], #4
 80008c6:	dbfa      	blt.n	80008be <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <zero_loop+0x5a>)
 80008ca:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80008ce:	6810      	ldr	r0, [r2, #0]
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80008d0:	4611      	mov	r1, r2
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80008d2:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80008d6:	6010      	str	r0, [r2, #0]
 80008d8:	e001      	b.n	80008de <zero_loop+0x20>
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80008da:	3b01      	subs	r3, #1
 80008dc:	d002      	beq.n	80008e4 <zero_loop+0x26>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80008de:	680a      	ldr	r2, [r1, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80008e0:	0392      	lsls	r2, r2, #14
 80008e2:	d5fa      	bpl.n	80008da <zero_loop+0x1c>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <zero_loop+0x5e>)
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait


    main();
 80008e6:	490e      	ldr	r1, [pc, #56]	; (8000920 <zero_loop+0x62>)
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	f042 0210 	orr.w	r2, r2, #16
 80008ee:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	f022 0203 	bic.w	r2, r2, #3
 80008f6:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	f042 0202 	orr.w	r2, r2, #2
 80008fe:	601a      	str	r2, [r3, #0]


    main();
 8000900:	4788      	blx	r1

}
 8000902:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8000906:	4685      	mov	sp, r0
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000000 	.word	0x20000000
 8000910:	200000f4 	.word	0x200000f4
 8000914:	08003470 	.word	0x08003470
 8000918:	40021000 	.word	0x40021000
 800091c:	40022000 	.word	0x40022000
 8000920:	08000019 	.word	0x08000019
 8000924:	20000200 	.word	0x20000200
 8000928:	20001318 	.word	0x20001318

0800092c <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 800092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <Hw_Init+0x48>)
 8000930:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <Hw_Init+0x4c>)
 8000934:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000936:	4e11      	ldr	r6, [pc, #68]	; (800097c <Hw_Init+0x50>)
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000938:	4911      	ldr	r1, [pc, #68]	; (8000980 <Hw_Init+0x54>)
 800093a:	4812      	ldr	r0, [pc, #72]	; (8000984 <Hw_Init+0x58>)
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <Hw_Init+0x5c>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800093e:	4f13      	ldr	r7, [pc, #76]	; (800098c <Hw_Init+0x60>)
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000940:	4d13      	ldr	r5, [pc, #76]	; (8000990 <Hw_Init+0x64>)
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000942:	4c14      	ldr	r4, [pc, #80]	; (8000994 <Hw_Init+0x68>)
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000944:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 8000948:	6013      	str	r3, [r2, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800094a:	4a13      	ldr	r2, [pc, #76]	; (8000998 <Hw_Init+0x6c>)
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800094c:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800094e:	602b      	str	r3, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000950:	6023      	str	r3, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000952:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000954:	4790      	blx	r2
	Hw_Timer_Init();
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <Hw_Init+0x70>)
 8000958:	4798      	blx	r3
	//Hw_Si47xx_Init();
	//Hw_N5110G_Init();
	Hw_VBus_Init();
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <Hw_Init+0x74>)
 800095c:	4798      	blx	r3
	Hw_VCom_Init();
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <Hw_Init+0x78>)
 8000960:	4798      	blx	r3
	
	Hw_Led_Init();
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <Hw_Init+0x7c>)
 8000964:	4798      	blx	r3
	Hw_KeyPad_Init();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <Hw_Init+0x80>)
 8000968:	4798      	blx	r3
	Hw_7Seg_Init();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <Hw_Init+0x84>)
 800096c:	4798      	blx	r3
	Hw_CLcd_Init();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <Hw_Init+0x88>)
 8000970:	4798      	blx	r3
 8000972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000974:	08000b21 	.word	0x08000b21
 8000978:	08000d81 	.word	0x08000d81
 800097c:	40010804 	.word	0x40010804
 8000980:	40011004 	.word	0x40011004
 8000984:	33444444 	.word	0x33444444
 8000988:	40010800 	.word	0x40010800
 800098c:	333334b3 	.word	0x333334b3
 8000990:	40010c00 	.word	0x40010c00
 8000994:	40010c04 	.word	0x40010c04
 8000998:	08000a85 	.word	0x08000a85
 800099c:	08000db1 	.word	0x08000db1
 80009a0:	08001109 	.word	0x08001109
 80009a4:	08000ef5 	.word	0x08000ef5
 80009a8:	08000be5 	.word	0x08000be5
 80009ac:	0800152d 	.word	0x0800152d
 80009b0:	08001661 	.word	0x08001661
 80009b4:	08001889 	.word	0x08001889

080009b8 <Hw_Wait_Usec>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
 80009b8:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80009ba:	2300      	movs	r3, #0
 80009bc:	9301      	str	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80009be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80009c2:	9b01      	ldr	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80009c4:	0040      	lsls	r0, r0, #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80009c6:	4298      	cmp	r0, r3
 80009c8:	d905      	bls.n	80009d6 <Hw_Wait_Usec+0x1e>
 80009ca:	9b01      	ldr	r3, [sp, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	9b01      	ldr	r3, [sp, #4]
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d8f9      	bhi.n	80009ca <Hw_Wait_Usec+0x12>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
}
 80009d6:	b002      	add	sp, #8
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80009dc:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <Hw_ISR_UART1_Handler+0x1c>)


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80009e0:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <Hw_ISR_UART1_Handler+0x20>)
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80009e8:	f801 2d01 	strb.w	r2, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80009ec:	2000      	movs	r0, #0
 80009ee:	4798      	blx	r3
}
 80009f0:	b003      	add	sp, #12
 80009f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f6:	bf00      	nop
 80009f8:	40013804 	.word	0x40013804
 80009fc:	08000c95 	.word	0x08000c95

08000a00 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a04:	f240 2e71 	movw	lr, #625	; 0x271
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a08:	4d15      	ldr	r5, [pc, #84]	; (8000a60 <Hw_Uart_Open_COM1+0x60>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a0a:	4c16      	ldr	r4, [pc, #88]	; (8000a64 <Hw_Uart_Open_COM1+0x64>)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a0c:	682b      	ldr	r3, [r5, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 8000a0e:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8000a7c <Hw_Uart_Open_COM1+0x7c>
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a12:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000a80 <Hw_Uart_Open_COM1+0x80>
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a16:	4f14      	ldr	r7, [pc, #80]	; (8000a68 <Hw_Uart_Open_COM1+0x68>)
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a18:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a1e:	4e13      	ldr	r6, [pc, #76]	; (8000a6c <Hw_Uart_Open_COM1+0x6c>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a20:	f04f 090c 	mov.w	r9, #12
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a24:	602b      	str	r3, [r5, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a26:	f8c4 9000 	str.w	r9, [r4]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a2a:	f8c8 2000 	str.w	r2, [r8]
	REG_USART1_CR3  = 0;
 8000a2e:	f8cc 2000 	str.w	r2, [ip]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a32:	f8c7 e000 	str.w	lr, [r7]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a36:	6833      	ldr	r3, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000a38:	4d0d      	ldr	r5, [pc, #52]	; (8000a70 <Hw_Uart_Open_COM1+0x70>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a3a:	f043 0320 	orr.w	r3, r3, #32
 8000a3e:	6033      	str	r3, [r6, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	f043 0320 	orr.w	r3, r3, #32
 8000a46:	6023      	str	r3, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000a48:	6068      	str	r0, [r5, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8000a4a:	60a9      	str	r1, [r5, #8]
	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <Hw_Uart_Open_COM1+0x74>)
 8000a4e:	2025      	movs	r0, #37	; 0x25
 8000a50:	4909      	ldr	r1, [pc, #36]	; (8000a78 <Hw_Uart_Open_COM1+0x78>)
 8000a52:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a5a:	6023      	str	r3, [r4, #0]
 8000a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a60:	40021018 	.word	0x40021018
 8000a64:	4001380c 	.word	0x4001380c
 8000a68:	40013808 	.word	0x40013808
 8000a6c:	e000e104 	.word	0xe000e104
 8000a70:	200002fc 	.word	0x200002fc
 8000a74:	08000d91 	.word	0x08000d91
 8000a78:	080009dd 	.word	0x080009dd
 8000a7c:	40013814 	.word	0x40013814
 8000a80:	40013810 	.word	0x40013810

08000a84 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8000a84:	b508      	push	{r3, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <Hw_Uart_Init+0x24>)
 8000a88:	4798      	blx	r3
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <Hw_Uart_Init+0x28>)
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000a92:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	330c      	adds	r3, #12
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d1fa      	bne.n	8000a92 <Hw_Uart_Init+0xe>
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000a9c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <Hw_Uart_Init+0x2c>)
 8000aa4:	4798      	blx	r3
 8000aa6:	bd08      	pop	{r3, pc}
 8000aa8:	08000c45 	.word	0x08000c45
 8000aac:	200002fc 	.word	0x200002fc
 8000ab0:	08000a01 	.word	0x08000a01

08000ab4 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000ab4:	b530      	push	{r4, r5, lr}
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	b083      	sub	sp, #12
	u8 Uart_GetData = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	4d07      	ldr	r5, [pc, #28]	; (8000adc <Hw_Uart_Getch+0x28>)
 8000abe:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	47a8      	blx	r5
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d0fb      	beq.n	8000ac2 <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000aca:	4620      	mov	r0, r4
 8000acc:	f10d 0107 	add.w	r1, sp, #7
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <Hw_Uart_Getch+0x2c>)
 8000ad2:	4798      	blx	r3

	return Uart_GetData;
}
 8000ad4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ad8:	b003      	add	sp, #12
 8000ada:	bd30      	pop	{r4, r5, pc}
 8000adc:	08000c65 	.word	0x08000c65
 8000ae0:	08000d0d 	.word	0x08000d0d

08000ae4 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 8000ae4:	280a      	cmp	r0, #10
 8000ae6:	d007      	beq.n	8000af8 <print_byte+0x14>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <print_byte+0x24>)
 8000aea:	6813      	ldr	r3, [r2, #0]
 8000aec:	061b      	lsls	r3, r3, #24
 8000aee:	d5fc      	bpl.n	8000aea <print_byte+0x6>
    
    REG_USART1_DR = Uart_PutData;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <print_byte+0x28>)
 8000af2:	b2c0      	uxtb	r0, r0
 8000af4:	6018      	str	r0, [r3, #0]
 8000af6:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8000af8:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <print_byte+0x24>)
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	0619      	lsls	r1, r3, #24
 8000afe:	d5fc      	bpl.n	8000afa <print_byte+0x16>
    
    REG_USART1_DR = Uart_PutData;
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <print_byte+0x28>)
 8000b02:	220d      	movs	r2, #13
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e7ef      	b.n	8000ae8 <print_byte+0x4>
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	40013804 	.word	0x40013804

08000b10 <get_byte>:
#endif    
}


char get_byte(void)
{
 8000b10:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 8000b12:	2000      	movs	r0, #0
 8000b14:	4b01      	ldr	r3, [pc, #4]	; (8000b1c <get_byte+0xc>)
 8000b16:	4798      	blx	r3
#endif
	
	return Ch;
}
 8000b18:	bd08      	pop	{r3, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08000ab5 	.word	0x08000ab5

08000b20 <Hw_PLL_Init>:
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b20:	481e      	ldr	r0, [pc, #120]	; (8000b9c <Hw_PLL_Init+0x7c>)
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000b22:	491f      	ldr	r1, [pc, #124]	; (8000ba0 <Hw_PLL_Init+0x80>)
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000b24:	4602      	mov	r2, r0
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000b26:	680b      	ldr	r3, [r1, #0]
 8000b28:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b30:	600b      	str	r3, [r1, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000b32:	680b      	ldr	r3, [r1, #0]
 8000b34:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000b38:	600b      	str	r3, [r1, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b3a:	6803      	ldr	r3, [r0, #0]
 8000b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b40:	6003      	str	r3, [r0, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000b42:	6813      	ldr	r3, [r2, #0]
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	d5fc      	bpl.n	8000b42 <Hw_PLL_Init+0x22>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <Hw_PLL_Init+0x80>)
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000b4a:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	f021 0103 	bic.w	r1, r1, #3
 8000b52:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8000b54:	6819      	ldr	r1, [r3, #0]
 8000b56:	f041 0102 	orr.w	r1, r1, #2
 8000b5a:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8000b5c:	6819      	ldr	r1, [r3, #0]
 8000b5e:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8000b62:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8000b64:	6819      	ldr	r1, [r3, #0]
 8000b66:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000b6a:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000b72:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8000b74:	6819      	ldr	r1, [r3, #0]
 8000b76:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8000b7a:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8000b7c:	6819      	ldr	r1, [r3, #0]
 8000b7e:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	f003 030c 	and.w	r3, r3, #12
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d1fa      	bne.n	8000b80 <Hw_PLL_Init+0x60>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000b8a:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <Hw_PLL_Init+0x84>)
 8000b8c:	6813      	ldr	r3, [r2, #0]
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	f043 031d 	orr.w	r3, r3, #29
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40021004 	.word	0x40021004
 8000ba4:	40021018 	.word	0x40021018

08000ba8 <Hw_Led_Off>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Off( u8 Ch )
{
 8000ba8:	b508      	push	{r3, lr}
	switch( Ch )
 8000baa:	2803      	cmp	r0, #3
 8000bac:	d807      	bhi.n	8000bbe <Hw_Led_Off+0x16>
 8000bae:	e8df f000 	tbb	[pc, r0]
 8000bb2:	0c11      	.short	0x0c11
 8000bb4:	0207      	.short	0x0207
		case 2:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 2 );
			break;

		case 3:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 3 );
 8000bb6:	2012      	movs	r0, #18
 8000bb8:	2103      	movs	r1, #3
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <Hw_Led_Off+0x38>)
 8000bbc:	4798      	blx	r3
 8000bbe:	bd08      	pop	{r3, pc}
		case 1:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 1 );
			break;

		case 2:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 2 );
 8000bc0:	2012      	movs	r0, #18
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <Hw_Led_Off+0x38>)
 8000bc6:	4798      	blx	r3
			break;
 8000bc8:	bd08      	pop	{r3, pc}
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
			break;

		case 1:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 1 );
 8000bca:	2012      	movs	r0, #18
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <Hw_Led_Off+0x38>)
 8000bd0:	4798      	blx	r3
			break;
 8000bd2:	bd08      	pop	{r3, pc}
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
 8000bd4:	2012      	movs	r0, #18
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4b01      	ldr	r3, [pc, #4]	; (8000be0 <Hw_Led_Off+0x38>)
 8000bda:	4798      	blx	r3
 8000bdc:	bd08      	pop	{r3, pc}
 8000bde:	bf00      	nop
 8000be0:	080012b5 	.word	0x080012b5

08000be4 <Hw_Led_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{		
 8000be4:	b510      	push	{r4, lr}
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
 8000be6:	2100      	movs	r1, #0
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <Hw_Led_Init+0x1c>)
 8000bea:	2012      	movs	r0, #18
 8000bec:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{		
	Hw_Led_Off(0);
	Hw_Led_Off(1);
 8000bee:	4c05      	ldr	r4, [pc, #20]	; (8000c04 <Hw_Led_Init+0x20>)
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	47a0      	blx	r4
	Hw_Led_Off(2);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	47a0      	blx	r4
	Hw_Led_Off(3);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	47a0      	blx	r4
 8000bfc:	bd10      	pop	{r4, pc}
 8000bfe:	bf00      	nop
 8000c00:	080012b5 	.word	0x080012b5
 8000c04:	08000ba9 	.word	0x08000ba9

08000c08 <Hw_Led_Toggle>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
 8000c08:	b508      	push	{r3, lr}
	switch( Ch )
 8000c0a:	2803      	cmp	r0, #3
 8000c0c:	d807      	bhi.n	8000c1e <Hw_Led_Toggle+0x16>
 8000c0e:	e8df f000 	tbb	[pc, r0]
 8000c12:	0c11      	.short	0x0c11
 8000c14:	0207      	.short	0x0207
		case 2:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 2 );
			break;

		case 3:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 3 );
 8000c16:	2012      	movs	r0, #18
 8000c18:	2103      	movs	r1, #3
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <Hw_Led_Toggle+0x38>)
 8000c1c:	4798      	blx	r3
 8000c1e:	bd08      	pop	{r3, pc}
		case 1:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 1 );
			break;

		case 2:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 2 );
 8000c20:	2012      	movs	r0, #18
 8000c22:	2102      	movs	r1, #2
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <Hw_Led_Toggle+0x38>)
 8000c26:	4798      	blx	r3
			break;
 8000c28:	bd08      	pop	{r3, pc}
		case 0:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 0 );
			break;

		case 1:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 1 );
 8000c2a:	2012      	movs	r0, #18
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <Hw_Led_Toggle+0x38>)
 8000c30:	4798      	blx	r3
			break;
 8000c32:	bd08      	pop	{r3, pc}
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 0 );
 8000c34:	2012      	movs	r0, #18
 8000c36:	2100      	movs	r1, #0
 8000c38:	4b01      	ldr	r3, [pc, #4]	; (8000c40 <Hw_Led_Toggle+0x38>)
 8000c3a:	4798      	blx	r3
			break;
 8000c3c:	bd08      	pop	{r3, pc}
 8000c3e:	bf00      	nop
 8000c40:	08001335 	.word	0x08001335

08000c44 <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <Hw_Uart_Q_Init+0x18>)
 8000c46:	4906      	ldr	r1, [pc, #24]	; (8000c60 <Hw_Uart_Q_Init+0x1c>)
 8000c48:	f103 000e 	add.w	r0, r3, #14
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f823 2f02 	strh.w	r2, [r3, #2]!
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000c52:	4283      	cmp	r3, r0
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000c54:	f821 2f02 	strh.w	r2, [r1, #2]!
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000c58:	d1f9      	bne.n	8000c4e <Hw_Uart_Q_Init+0xa>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 8000c5a:	4770      	bx	lr
 8000c5c:	2000042e 	.word	0x2000042e
 8000c60:	2000043e 	.word	0x2000043e

08000c64 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HW_UART_Q_VAILD+0x24>)
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <HW_UART_Q_VAILD+0x28>)
 8000c68:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000c6c:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <HW_UART_Q_VAILD+0x2c>)
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	3320      	adds	r3, #32
 8000c76:	4018      	ands	r0, r3
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	db00      	blt.n	8000c7e <HW_UART_Q_VAILD+0x1a>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000c7c:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000c7e:	3801      	subs	r0, #1
 8000c80:	f060 001f 	orn	r0, r0, #31
 8000c84:	3001      	adds	r0, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000c86:	4770      	bx	lr
 8000c88:	20000440 	.word	0x20000440
 8000c8c:	20000430 	.word	0x20000430
 8000c90:	8000001f 	.word	0x8000001f

08000c94 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000c94:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000c96:	4e19      	ldr	r6, [pc, #100]	; (8000cfc <Hw_Uart_Q_Push+0x68>)
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <Hw_Uart_Q_Push+0x6c>)
 8000c9a:	f836 3010 	ldrh.w	r3, [r6, r0, lsl #1]
 8000c9e:	f932 4010 	ldrsh.w	r4, [r2, r0, lsl #1]
 8000ca2:	b21d      	sxth	r5, r3
 8000ca4:	1b2c      	subs	r4, r5, r4
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <Hw_Uart_Q_Push+0x70>)
 8000ca8:	3420      	adds	r4, #32
 8000caa:	4022      	ands	r2, r4
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	db16      	blt.n	8000cde <Hw_Uart_Q_Push+0x4a>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000cb0:	2a1f      	cmp	r2, #31
 8000cb2:	d01a      	beq.n	8000cea <Hw_Uart_Q_Push+0x56>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b29b      	uxth	r3, r3
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <Hw_Uart_Q_Push+0x70>)
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cba:	f826 3010 	strh.w	r3, [r6, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cbe:	b21b      	sxth	r3, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cc0:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cc2:	401a      	ands	r2, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cc4:	eb00 1140 	add.w	r1, r0, r0, lsl #5
 8000cc8:	4c0f      	ldr	r4, [pc, #60]	; (8000d08 <Hw_Uart_Q_Push+0x74>)
 8000cca:	440d      	add	r5, r1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000ccc:	2a00      	cmp	r2, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cce:	5566      	strb	r6, [r4, r5]
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <Hw_Uart_Q_Push+0x68>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cd2:	db0d      	blt.n	8000cf0 <Hw_Uart_Q_Push+0x5c>

	return TRUE;
}
 8000cd4:	bc70      	pop	{r4, r5, r6}
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cd6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]

	return TRUE;
 8000cda:	2001      	movs	r0, #1
}
 8000cdc:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000cde:	3a01      	subs	r2, #1
 8000ce0:	f062 021f 	orn	r2, r2, #31
 8000ce4:	3201      	adds	r2, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000ce6:	2a1f      	cmp	r2, #31
 8000ce8:	d1e4      	bne.n	8000cb4 <Hw_Uart_Q_Push+0x20>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
}
 8000cea:	bc70      	pop	{r4, r5, r6}
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000cec:	2000      	movs	r0, #0

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
}
 8000cee:	4770      	bx	lr
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	f062 021f 	orn	r2, r2, #31
 8000cf6:	3201      	adds	r2, #1
 8000cf8:	e7ec      	b.n	8000cd4 <Hw_Uart_Q_Push+0x40>
 8000cfa:	bf00      	nop
 8000cfc:	20000440 	.word	0x20000440
 8000d00:	20000430 	.word	0x20000430
 8000d04:	8000001f 	.word	0x8000001f
 8000d08:	20000338 	.word	0x20000338

08000d0c <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000d0c:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d0e:	4e18      	ldr	r6, [pc, #96]	; (8000d70 <Hw_Uart_Q_Pop+0x64>)
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <Hw_Uart_Q_Pop+0x68>)
 8000d12:	f836 4010 	ldrh.w	r4, [r6, r0, lsl #1]
 8000d16:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000d1a:	b225      	sxth	r5, r4
 8000d1c:	1b52      	subs	r2, r2, r5
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <Hw_Uart_Q_Pop+0x6c>)
 8000d20:	3220      	adds	r2, #32
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db15      	blt.n	8000d54 <Hw_Uart_Q_Pop+0x48>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000d28:	b1d3      	cbz	r3, 8000d60 <Hw_Uart_Q_Pop+0x54>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d2a:	eb00 1340 	add.w	r3, r0, r0, lsl #5
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <Hw_Uart_Q_Pop+0x70>)
 8000d30:	441d      	add	r5, r3
 8000d32:	5d53      	ldrb	r3, [r2, r5]
 8000d34:	3401      	adds	r4, #1
 8000d36:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
 8000d3a:	700b      	strb	r3, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d3c:	f936 1010 	ldrsh.w	r1, [r6, r0, lsl #1]
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <Hw_Uart_Q_Pop+0x6c>)
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <Hw_Uart_Q_Pop+0x64>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d44:	400b      	ands	r3, r1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0d      	blt.n	8000d66 <Hw_Uart_Q_Pop+0x5a>

    return TRUE;
}
 8000d4a:	bc70      	pop	{r4, r5, r6}
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d4c:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]

    return TRUE;
 8000d50:	2001      	movs	r0, #1
}
 8000d52:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d54:	3b01      	subs	r3, #1
 8000d56:	f063 031f 	orn	r3, r3, #31
 8000d5a:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e4      	bne.n	8000d2a <Hw_Uart_Q_Pop+0x1e>
	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
}
 8000d60:	bc70      	pop	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000d62:	4618      	mov	r0, r3
	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
}
 8000d64:	4770      	bx	lr
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f063 031f 	orn	r3, r3, #31
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	e7ec      	b.n	8000d4a <Hw_Uart_Q_Pop+0x3e>
 8000d70:	20000430 	.word	0x20000430
 8000d74:	20000440 	.word	0x20000440
 8000d78:	8000001f 	.word	0x8000001f
 8000d7c:	20000338 	.word	0x20000338

08000d80 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000d80:	4a01      	ldr	r2, [pc, #4]	; (8000d88 <Hw_ISR_Init+0x8>)
 8000d82:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <Hw_ISR_Init+0xc>)
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	4770      	bx	lr
 8000d88:	20000600 	.word	0x20000600
 8000d8c:	e000ed08 	.word	0xe000ed08

08000d90 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <Hw_ISR_SetIRQFunc+0xc>)
 8000d92:	3010      	adds	r0, #16
 8000d94:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000600 	.word	0x20000600

08000da0 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <Hw_ISR_SetIRQFuncByAddr+0xc>)
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000da2:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000da4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000600 	.word	0x20000600

08000db0 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8000db0:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8000db2:	4d15      	ldr	r5, [pc, #84]	; (8000e08 <Hw_Timer_Init+0x58>)
 8000db4:	782b      	ldrb	r3, [r5, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d024      	beq.n	8000e04 <Hw_Timer_Init+0x54>
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <Hw_Timer_Init+0x5c>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8000dc2:	701a      	strb	r2, [r3, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000dc4:	805a      	strh	r2, [r3, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8000dc6:	809a      	strh	r2, [r3, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	3310      	adds	r3, #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000dcc:	428b      	cmp	r3, r1
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000dce:	f04f 0400 	mov.w	r4, #0
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000dd2:	d1f6      	bne.n	8000dc2 <Hw_Timer_Init+0x12>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000dd4:	203c      	movs	r0, #60	; 0x3c
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <Hw_Timer_Init+0x60>)
 8000dd8:	4622      	mov	r2, r4
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <Hw_Timer_Init+0x64>)
 8000ddc:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <Hw_Timer_Init+0x68>)
	
	REG_STK_VAL  = 0;	
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <Hw_Timer_Init+0x6c>)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000de2:	480f      	ldr	r0, [pc, #60]	; (8000e20 <Hw_Timer_Init+0x70>)
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <Hw_Timer_Init+0x74>)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000de6:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 8000de8:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000dea:	681a      	ldr	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8000dec:	2101      	movs	r1, #1

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000dee:	f042 0204 	orr.w	r2, r2, #4
 8000df2:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f042 0202 	orr.w	r2, r2, #2
 8000dfa:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8000e02:	7029      	strb	r1, [r5, #0]
 8000e04:	bd38      	pop	{r3, r4, r5, pc}
 8000e06:	bf00      	nop
 8000e08:	200002ac 	.word	0x200002ac
 8000e0c:	2000020c 	.word	0x2000020c
 8000e10:	08000e99 	.word	0x08000e99
 8000e14:	08000da1 	.word	0x08000da1
 8000e18:	e000e014 	.word	0xe000e014
 8000e1c:	e000e018 	.word	0xe000e018
 8000e20:	0001193f 	.word	0x0001193f
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000e28:	4918      	ldr	r1, [pc, #96]	; (8000e8c <Hw_Timer_Tick+0x64>)
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8000e2a:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8000e2c:	680b      	ldr	r3, [r1, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <Hw_Timer_Tick+0x68>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000e30:	3301      	adds	r3, #1
 8000e32:	600b      	str	r3, [r1, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000e34:	8813      	ldrh	r3, [r2, #0]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b11b      	cbz	r3, 8000e42 <Hw_Timer_Tick+0x1a>
 8000e3a:	8813      	ldrh	r3, [r2, #0]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	8013      	strh	r3, [r2, #0]
 8000e42:	4c14      	ldr	r4, [pc, #80]	; (8000e94 <Hw_Timer_Tick+0x6c>)
 8000e44:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8000e48:	e002      	b.n	8000e50 <Hw_Timer_Tick+0x28>
 8000e4a:	3410      	adds	r4, #16
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000e4c:	42ac      	cmp	r4, r5
 8000e4e:	d01b      	beq.n	8000e88 <Hw_Timer_Tick+0x60>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000e50:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d1f8      	bne.n	8000e4a <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000e58:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	f824 3c02 	strh.w	r3, [r4, #-2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f0      	bne.n	8000e4a <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000e68:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8000e6c:	3410      	adds	r4, #16
 8000e6e:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000e70:	f834 2c10 	ldrh.w	r2, [r4, #-16]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000e74:	bf08      	it	eq
 8000e76:	f804 3c14 	strbeq.w	r3, [r4, #-20]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000e7a:	f824 2c12 	strh.w	r2, [r4, #-18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000e7e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8000e82:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000e84:	42ac      	cmp	r4, r5
 8000e86:	d1e3      	bne.n	8000e50 <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 8000e88:	bd38      	pop	{r3, r4, r5, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200002b0 	.word	0x200002b0
 8000e90:	200002b4 	.word	0x200002b4
 8000e94:	20000210 	.word	0x20000210

08000e98 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8000e98:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8000e9a:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <Hw_Timer_ISR+0x8>)
 8000e9c:	4798      	blx	r3
 8000e9e:	bd08      	pop	{r3, pc}
 8000ea0:	08000e29 	.word	0x08000e29

08000ea4 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8000ea4:	b430      	push	{r4, r5}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000ea6:	4c05      	ldr	r4, [pc, #20]	; (8000ebc <Hw_Timer_Set+0x18>)
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8000ea8:	9d02      	ldr	r5, [sp, #8]
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000eaa:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8000eae:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000eb0:	60c5      	str	r5, [r0, #12]
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8000eb2:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8000eb4:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8000eb6:	8081      	strh	r1, [r0, #4]
}
 8000eb8:	bc30      	pop	{r4, r5}
 8000eba:	4770      	bx	lr
 8000ebc:	2000020c 	.word	0x2000020c

08000ec0 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8000ec0:	2809      	cmp	r0, #9
 8000ec2:	d803      	bhi.n	8000ecc <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <Hw_Timer_Start+0x10>)
 8000ec6:	0100      	lsls	r0, r0, #4
 8000ec8:	2201      	movs	r2, #1
 8000eca:	541a      	strb	r2, [r3, r0]
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2000020c 	.word	0x2000020c

08000ed4 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <Hw_Timer_Delay_ms+0x10>)
 8000ed6:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8000ed8:	8813      	ldrh	r3, [r2, #0]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1fb      	bne.n	8000ed8 <Hw_Timer_Delay_ms+0x4>
}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200002b4 	.word	0x200002b4

08000ee8 <Hw_Timer_Get_CountValue>:
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_Get_CountValue( void )
{
	return Hw_Timer_Counter;
 8000ee8:	4b01      	ldr	r3, [pc, #4]	; (8000ef0 <Hw_Timer_Get_CountValue+0x8>)
 8000eea:	6818      	ldr	r0, [r3, #0]
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200002b0 	.word	0x200002b0

08000ef4 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000ef4:	b508      	push	{r3, lr}
	Set_System();
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <Hw_VCom_Init+0x14>)
 8000ef8:	4798      	blx	r3
	Set_USBClock();
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <Hw_VCom_Init+0x18>)
 8000efc:	4798      	blx	r3
	USB_Interrupts_Config();
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <Hw_VCom_Init+0x1c>)
 8000f00:	4798      	blx	r3
	USB_Init();	
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <Hw_VCom_Init+0x20>)
 8000f04:	4798      	blx	r3
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	0800202d 	.word	0x0800202d
 8000f0c:	08002049 	.word	0x08002049
 8000f10:	08002089 	.word	0x08002089
 8000f14:	08002b9d 	.word	0x08002b9d

08000f18 <Hw_VBus_SetDataPortOutput>:
---------------------------------------------------------------------------*/
void Hw_VBus_SetDataPortOutput( void )
{
	//-- D0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <Hw_VBus_SetDataPortOutput+0xa4>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	f022 020f 	bic.w	r2, r2, #15
 8000f20:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	f042 0203 	orr.w	r2, r2, #3
 8000f28:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	601a      	str	r2, [r3, #0]

	//-- D1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f34:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000f3c:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	601a      	str	r2, [r3, #0]

	//-- D2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000f48:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000f50:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	601a      	str	r2, [r3, #0]

	//-- D3 PB.3
	//
	REG_GPIOB_CRL &= ~(0x0F << (12));	// Clear
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000f5c:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (12));	// MODE, PB.2 Output mode, max speed 50Mhz
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000f64:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (14));	// CNF,  PB.2 General purpose output push-pul	
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	601a      	str	r2, [r3, #0]

	//-- D4 PB.4
	//
	REG_GPIOB_CRL &= ~(0x0F << (16));	// Clear
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000f70:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (16));	// MODE, PB.2 Output mode, max speed 50Mhz
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8000f78:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (18));	// CNF,  PB.2 General purpose output push-pul	
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	601a      	str	r2, [r3, #0]
	
	//-- D5 PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f84:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.6 Output mode, max speed 50Mhz
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 8000f8c:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.6 General purpose output push-pul	
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	601a      	str	r2, [r3, #0]
	
	//-- D6 PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f98:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8000fa0:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	601a      	str	r2, [r3, #0]

	//-- D7 PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000fac:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000fb4:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul				
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	4770      	bx	lr
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <Hw_VBus_SetDataPortInput>:
---------------------------------------------------------------------------*/
void Hw_VBus_SetDataPortInput( void )
{
	//-- D0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <Hw_VBus_SetDataPortInput+0xa4>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f022 020f 	bic.w	r2, r2, #15
 8000fc8:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 0));	// MODE, PB.0 Input Mode
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << ( 2));	// CNF,  PB.0 Floating input
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f042 0204 	orr.w	r2, r2, #4
 8000fd4:	601a      	str	r2, [r3, #0]
		
	//-- D1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fdc:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 4));	// MODE, PB.1 Input Mode
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << ( 6));	// CNF,  PB.1 Floating input
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fe8:	601a      	str	r2, [r3, #0]

	//-- D2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000ff0:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 8));	// MODE, PB.2 Input Mode
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (10));	// CNF,  PB.2 Floating input
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ffc:	601a      	str	r2, [r3, #0]

	//-- D3 PB.3
	//
	REG_GPIOB_CRL &= ~(0x0F << (12));	// Clear
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8001004:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (12));	// MODE, PB.2 Input Mode
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (14));	// CNF,  PB.2 Floating input
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001010:	601a      	str	r2, [r3, #0]

	//-- D4 PB.4
	//
	REG_GPIOB_CRL &= ~(0x0F << (16));	// Clear
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001018:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (16));	// MODE, PB.2 Input Mode
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (18));	// CNF,  PB.2 Floating input
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001024:	601a      	str	r2, [r3, #0]
	
	//-- D5 PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800102c:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (20));	// MODE, PB.6 Input Mode
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (22));	// CNF,  PB.6 Floating input
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001038:	601a      	str	r2, [r3, #0]
	
	//-- D6 PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001040:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (24));	// MODE, PB.6 Input Mode
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (26));	// CNF,  PB.6 Floating input
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800104c:	601a      	str	r2, [r3, #0]

	//-- D7 PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001054:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	4770      	bx	lr
 8001064:	40010c00 	.word	0x40010c00

08001068 <Hw_VBus_SetAddress>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetAddress( u32 Address )
{
	if( Address & (1<<0) )	SET_BIT( REG_GPIOA_ODR, 13 );
 8001068:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <Hw_VBus_SetAddress+0x5c>)
 800106a:	07c1      	lsls	r1, r0, #31
 800106c:	6813      	ldr	r3, [r2, #0]
 800106e:	bf4c      	ite	mi
 8001070:	f443 5300 	orrmi.w	r3, r3, #8192	; 0x2000
	else					CLR_BIT( REG_GPIOA_ODR, 13 );
 8001074:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 8001078:	6013      	str	r3, [r2, #0]

	if( Address & (1<<1) )	SET_BIT( REG_GPIOA_ODR, 14 );
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <Hw_VBus_SetAddress+0x5c>)
 800107c:	0781      	lsls	r1, r0, #30
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	bf4c      	ite	mi
 8001082:	f443 4380 	orrmi.w	r3, r3, #16384	; 0x4000
	else					CLR_BIT( REG_GPIOA_ODR, 14 );
 8001086:	f423 4380 	bicpl.w	r3, r3, #16384	; 0x4000
 800108a:	6013      	str	r3, [r2, #0]

	if( Address & (1<<2) )	SET_BIT( REG_GPIOA_ODR, 15 );
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <Hw_VBus_SetAddress+0x5c>)
 800108e:	0741      	lsls	r1, r0, #29
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	bf4c      	ite	mi
 8001094:	f443 4300 	orrmi.w	r3, r3, #32768	; 0x8000
	else					CLR_BIT( REG_GPIOA_ODR, 15 );
 8001098:	f423 4300 	bicpl.w	r3, r3, #32768	; 0x8000
 800109c:	6013      	str	r3, [r2, #0]
	
	if( Address & (1<<3) )	SET_BIT( REG_GPIOC_ODR, 14 );
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <Hw_VBus_SetAddress+0x60>)
 80010a0:	0701      	lsls	r1, r0, #28
 80010a2:	6813      	ldr	r3, [r2, #0]
 80010a4:	bf4c      	ite	mi
 80010a6:	f443 4380 	orrmi.w	r3, r3, #16384	; 0x4000
	else					CLR_BIT( REG_GPIOC_ODR, 14 );
 80010aa:	f423 4380 	bicpl.w	r3, r3, #16384	; 0x4000
 80010ae:	6013      	str	r3, [r2, #0]

	if( Address & (1<<4) )	SET_BIT( REG_GPIOC_ODR, 15 );
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <Hw_VBus_SetAddress+0x60>)
 80010b2:	06c1      	lsls	r1, r0, #27
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	bf4c      	ite	mi
 80010b8:	f443 4300 	orrmi.w	r3, r3, #32768	; 0x8000
	else					CLR_BIT( REG_GPIOC_ODR, 15 );
 80010bc:	f423 4300 	bicpl.w	r3, r3, #32768	; 0x8000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4770      	bx	lr
 80010c4:	4001080c 	.word	0x4001080c
 80010c8:	4001100c 	.word	0x4001100c

080010cc <Hw_VBus_SetIdle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
	SET_BIT( REG_GPIOC_ODR, 14 );
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <Hw_VBus_SetIdle+0x2c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
 80010ce:	b538      	push	{r3, r4, r5, lr}
	SET_BIT( REG_GPIOC_ODR, 14 );
 80010d0:	6813      	ldr	r3, [r2, #0]
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <Hw_VBus_SetIdle+0x30>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
	SET_BIT( REG_GPIOC_ODR, 14 );
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6013      	str	r3, [r2, #0]
	SET_BIT( REG_GPIOC_ODR, 15 );	
 80010da:	6811      	ldr	r1, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 80010dc:	4c08      	ldr	r4, [pc, #32]	; (8001100 <Hw_VBus_SetIdle+0x34>)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
	SET_BIT( REG_GPIOC_ODR, 14 );
	SET_BIT( REG_GPIOC_ODR, 15 );	
 80010de:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
	RegData &= ~(0xFF);
	RegData |= Data;
 80010e2:	7e45      	ldrb	r5, [r0, #25]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
	SET_BIT( REG_GPIOC_ODR, 14 );
	SET_BIT( REG_GPIOC_ODR, 15 );	
 80010e4:	6011      	str	r1, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 80010e6:	6823      	ldr	r3, [r4, #0]
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
	Hw_VBus_SetAddress( HW_VBUS_CS_FND_2 );
 80010e8:	200c      	movs	r0, #12
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
	RegData &= ~(0xFF);
 80010ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	RegData |= Data;
 80010ee:	432b      	orrs	r3, r5
	
	REG_GPIOB_ODR = RegData; 
 80010f0:	6023      	str	r3, [r4, #0]
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
	Hw_VBus_SetAddress( HW_VBUS_CS_FND_2 );
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <Hw_VBus_SetIdle+0x38>)
 80010f4:	4798      	blx	r3
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
 80010f8:	4001100c 	.word	0x4001100c
 80010fc:	20000790 	.word	0x20000790
 8001100:	40010c0c 	.word	0x40010c0c
 8001104:	08001069 	.word	0x08001069

08001108 <Hw_VBus_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
 8001108:	b538      	push	{r3, r4, r5, lr}
	u32 i;
	
	for( i=0; i<256; i++ )
 800110a:	2300      	movs	r3, #0
	{
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
 800110c:	461c      	mov	r4, r3
 800110e:	4832      	ldr	r0, [pc, #200]	; (80011d8 <Hw_VBus_Init+0xd0>)
 8001110:	f800 4013 	strb.w	r4, [r0, r3, lsl #1]
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
	u32 i;
	
	for( i=0; i<256; i++ )
 8001114:	3301      	adds	r3, #1
 8001116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
	{
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <Hw_VBus_Init+0xd0>)
 800111c:	f04f 0100 	mov.w	r1, #0
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
	u32 i;
	
	for( i=0; i<256; i++ )
 8001120:	d1f6      	bne.n	8001110 <Hw_VBus_Init+0x8>
	
	
	
	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <Hw_VBus_Init+0xd4>)
	

	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Dir = HW_VBUS_PORT_DIR_IN;
 8001124:	2501      	movs	r5, #1
	
	
	
	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001126:	6818      	ldr	r0, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	
	//-- 데이터 버스 기본으로 출력으로 설정
	//
	Hw_VBus_SetDataPortOutput();
 8001128:	4c2d      	ldr	r4, [pc, #180]	; (80011e0 <Hw_VBus_Init+0xd8>)
	
	
	
	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 800112a:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 800112e:	6018      	str	r0, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8001130:	6818      	ldr	r0, [r3, #0]
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
	}
	
	

	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Dir = HW_VBUS_PORT_DIR_OUT;
 8001132:	7511      	strb	r1, [r2, #20]
	
	
	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 8001134:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8001138:	6018      	str	r0, [r3, #0]
	}
	
	

	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
 800113a:	7611      	strb	r1, [r2, #24]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Dir = HW_VBUS_PORT_DIR_OUT;
 800113c:	f882 1020 	strb.w	r1, [r2, #32]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Dir = HW_VBUS_PORT_DIR_IN;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_1 ].Dir = HW_VBUS_PORT_DIR_OUT;
 8001140:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
 8001144:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
	Hw_VBus_AddrTbl[ HW_VBUS_CS_BUSIO ].Dir = HW_VBUS_PORT_DIR_OUT;
 8001148:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Data = 0;
 800114c:	7551      	strb	r1, [r2, #21]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data = 0;
 800114e:	7651      	strb	r1, [r2, #25]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Data = 0;
 8001150:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Data = 0;
 8001154:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_1 ].Data = 0;
 8001158:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_2 ].Data = 0;
 800115c:	f882 1027 	strb.w	r1, [r2, #39]	; 0x27
	Hw_VBus_AddrTbl[ HW_VBUS_CS_BUSIO ].Data = 0;	
 8001160:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
	

	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Dir = HW_VBUS_PORT_DIR_IN;
 8001164:	f882 5022 	strb.w	r5, [r2, #34]	; 0x22
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	
	//-- 데이터 버스 기본으로 출력으로 설정
	//
	Hw_VBus_SetDataPortOutput();
 8001168:	47a0      	blx	r4
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <Hw_VBus_Init+0xdc>)
	REG_GPIOA_CRH |=  (0x03 << (28));	// MODE, PA.15 Output mode, max speed 50Mhz
	REG_GPIOA_CRH |=  (0x00 << (30));	// CNF,  PA.15 General purpose output push-pul			

	//-- A3 PC.14
	//
	REG_GPIOC_CRH &= ~(0x0F << (24));	// Clear
 800116c:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <Hw_VBus_Init+0xe0>)
	Hw_VBus_SetDataPortOutput();
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
 800116e:	6819      	ldr	r1, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (30));	// CNF,  PC.15 General purpose output push-pul		
	
	
	//-- 버스 상태를 Idle상태로 만든다.
	//
	Hw_VBus_SetIdle();
 8001170:	481e      	ldr	r0, [pc, #120]	; (80011ec <Hw_VBus_Init+0xe4>)
	Hw_VBus_SetDataPortOutput();
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
 8001172:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8001176:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (20));	// MODE, PA.13 Output mode, max speed 50Mhz
 8001178:	6819      	ldr	r1, [r3, #0]
 800117a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800117e:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (22));	// CNF,  PA.13 General purpose output push-pul			
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	6019      	str	r1, [r3, #0]
	

	//-- A1 PA.14
	//
	REG_GPIOA_CRH &= ~(0x0F << (24));	// Clear
 8001184:	6819      	ldr	r1, [r3, #0]
 8001186:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800118a:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (24));	// MODE, PA.14 Output mode, max speed 50Mhz
 800118c:	6819      	ldr	r1, [r3, #0]
 800118e:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
 8001192:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (26));	// CNF,  PA.14 General purpose output push-pul			
 8001194:	6819      	ldr	r1, [r3, #0]
 8001196:	6019      	str	r1, [r3, #0]

	//-- A2 PA.15
	//
	REG_GPIOA_CRH &= ~(0x0F << (28));	// Clear
 8001198:	6819      	ldr	r1, [r3, #0]
 800119a:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 800119e:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (28));	// MODE, PA.15 Output mode, max speed 50Mhz
 80011a0:	6819      	ldr	r1, [r3, #0]
 80011a2:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
 80011a6:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (30));	// CNF,  PA.15 General purpose output push-pul			
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	6019      	str	r1, [r3, #0]

	//-- A3 PC.14
	//
	REG_GPIOC_CRH &= ~(0x0F << (24));	// Clear
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80011b2:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x03 << (24));	// MODE, PC.14 Output mode, max speed 50Mhz
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80011ba:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x00 << (26));	// CNF,  PC.14 General purpose output push-pul			
 80011bc:	6813      	ldr	r3, [r2, #0]
 80011be:	6013      	str	r3, [r2, #0]

	//-- A4 PC.15
	//
	REG_GPIOC_CRH &= ~(0x0F << (28));	// Clear
 80011c0:	6813      	ldr	r3, [r2, #0]
 80011c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80011c6:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x03 << (28));	// MODE, PC.15 Output mode, max speed 50Mhz
 80011c8:	6813      	ldr	r3, [r2, #0]
 80011ca:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80011ce:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x00 << (30));	// CNF,  PC.15 General purpose output push-pul		
 80011d0:	6813      	ldr	r3, [r2, #0]
 80011d2:	6013      	str	r3, [r2, #0]
	
	
	//-- 버스 상태를 Idle상태로 만든다.
	//
	Hw_VBus_SetIdle();
 80011d4:	4780      	blx	r0
 80011d6:	bd38      	pop	{r3, r4, r5, pc}
 80011d8:	20000790 	.word	0x20000790
 80011dc:	40010004 	.word	0x40010004
 80011e0:	08000f19 	.word	0x08000f19
 80011e4:	40010804 	.word	0x40010804
 80011e8:	40011004 	.word	0x40011004
 80011ec:	080010cd 	.word	0x080010cd

080011f0 <Hw_VBus_ReadData.part.1>:
     TITLE   : Hw_VBus_ReadData
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VBus_ReadData( u32 Address )
 80011f0:	b510      	push	{r4, lr}
 80011f2:	4604      	mov	r4, r0
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
	{
		Disable_ISR();
 80011f4:	b672      	cpsid	i
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <Hw_VBus_ReadData.part.1+0x34>)
		SET_BIT( REG_GPIOC_ODR, 15 );
		#endif
					
		Hw_VBus_SetDataPortInput();
 80011f8:	490b      	ldr	r1, [pc, #44]	; (8001228 <Hw_VBus_ReadData.part.1+0x38>)
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
	{
		Disable_ISR();
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001200:	601a      	str	r2, [r3, #0]
		SET_BIT( REG_GPIOC_ODR, 15 );
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001208:	601a      	str	r2, [r3, #0]
		#endif
					
		Hw_VBus_SetDataPortInput();
 800120a:	4788      	blx	r1
		Hw_VBus_SetAddress( Address  );
 800120c:	4620      	mov	r0, r4
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <Hw_VBus_ReadData.part.1+0x3c>)
 8001210:	4798      	blx	r3
---------------------------------------------------------------------------*/
u8 Hw_VBus_GetData( void  )
{
	u8 Data;
		
	Data = (u8)REG_GPIOB_IDR;
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <Hw_VBus_ReadData.part.1+0x40>)
		Hw_VBus_SetDataPortInput();
		Hw_VBus_SetAddress( Address  );
		
		Ret = Hw_VBus_GetData();
	
		Hw_VBus_SetIdle();
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <Hw_VBus_ReadData.part.1+0x44>)
---------------------------------------------------------------------------*/
u8 Hw_VBus_GetData( void  )
{
	u8 Data;
		
	Data = (u8)REG_GPIOB_IDR;
 8001216:	6814      	ldr	r4, [r2, #0]
		Hw_VBus_SetDataPortInput();
		Hw_VBus_SetAddress( Address  );
		
		Ret = Hw_VBus_GetData();
	
		Hw_VBus_SetIdle();
 8001218:	4798      	blx	r3
		
		Hw_VBus_SetDataPortOutput();
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <Hw_VBus_ReadData.part.1+0x48>)
 800121c:	4798      	blx	r3
	
		Enable_ISR();
 800121e:	b662      	cpsie	i
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
	}
		
	return Ret;	
}
 8001220:	b2e0      	uxtb	r0, r4
 8001222:	bd10      	pop	{r4, pc}
 8001224:	4001100c 	.word	0x4001100c
 8001228:	08000fc1 	.word	0x08000fc1
 800122c:	08001069 	.word	0x08001069
 8001230:	40010c08 	.word	0x40010c08
 8001234:	080010cd 	.word	0x080010cd
 8001238:	08000f19 	.word	0x08000f19

0800123c <Hw_VBus_WriteData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_WriteData( u32 Address, u8 ByteData )
{
 800123c:	b538      	push	{r3, r4, r5, lr}
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <Hw_VBus_WriteData+0x40>)
 8001240:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
	
	Hw_VBus_AddrTbl[ Address ].Data = ByteData;
 8001244:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
 8001248:	f014 0ffd 	tst.w	r4, #253	; 0xfd
{
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	Hw_VBus_AddrTbl[ Address ].Data = ByteData;
 800124c:	7059      	strb	r1, [r3, #1]
	
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
 800124e:	d114      	bne.n	800127a <Hw_VBus_WriteData+0x3e>
	{ 
		Disable_ISR();
 8001250:	b672      	cpsid	i
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <Hw_VBus_WriteData+0x44>)
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 8001254:	4c0b      	ldr	r4, [pc, #44]	; (8001284 <Hw_VBus_WriteData+0x48>)
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
	{ 
		Disable_ISR();
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 8001256:	681a      	ldr	r2, [r3, #0]
		SET_BIT( REG_GPIOC_ODR, 15 );	
		#endif
		
		Hw_VBus_SetData   ( ByteData );
		Hw_VBus_SetAddress( Address  );
 8001258:	4d0b      	ldr	r5, [pc, #44]	; (8001288 <Hw_VBus_WriteData+0x4c>)
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
	{ 
		Disable_ISR();
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 800125a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800125e:	601a      	str	r2, [r3, #0]
		SET_BIT( REG_GPIOC_ODR, 15 );	
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001266:	601a      	str	r2, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 8001268:	6823      	ldr	r3, [r4, #0]
	RegData &= ~(0xFF);
 800126a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	RegData |= Data;
 800126e:	4319      	orrs	r1, r3
	
	REG_GPIOB_ODR = RegData; 
 8001270:	6021      	str	r1, [r4, #0]
		SET_BIT( REG_GPIOC_ODR, 14 );
		SET_BIT( REG_GPIOC_ODR, 15 );	
		#endif
		
		Hw_VBus_SetData   ( ByteData );
		Hw_VBus_SetAddress( Address  );
 8001272:	47a8      	blx	r5
		Hw_VBus_SetIdle();		
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <Hw_VBus_WriteData+0x50>)
 8001276:	4798      	blx	r3
		Enable_ISR();		
 8001278:	b662      	cpsie	i
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	20000790 	.word	0x20000790
 8001280:	4001100c 	.word	0x4001100c
 8001284:	40010c0c 	.word	0x40010c0c
 8001288:	08001069 	.word	0x08001069
 800128c:	080010cd 	.word	0x080010cd

08001290 <Hw_VBus_ReadData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VBus_ReadData( u32 Address )
{
 8001290:	b508      	push	{r3, lr}
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <Hw_VBus_ReadData+0x1c>)
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 8001294:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
 8001298:	3a01      	subs	r2, #1
 800129a:	2a01      	cmp	r2, #1
 800129c:	d903      	bls.n	80012a6 <Hw_VBus_ReadData+0x16>
	
		Enable_ISR();
	}
	else
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
 800129e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80012a2:	7858      	ldrb	r0, [r3, #1]
	}
		
	return Ret;	
}
 80012a4:	bd08      	pop	{r3, pc}
 80012a6:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <Hw_VBus_ReadData+0x20>)
 80012a8:	4798      	blx	r3
 80012aa:	bd08      	pop	{r3, pc}
 80012ac:	20000790 	.word	0x20000790
 80012b0:	080011f1 	.word	0x080011f1

080012b4 <Hw_VBus_SetBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetBit( u32 Address, u8 BitNum )
{
 80012b4:	b538      	push	{r3, r4, r5, lr}
u8 Hw_VBus_ReadData( u32 Address )
{
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <Hw_VBus_SetBit+0x30>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetBit( u32 Address, u8 BitNum )
{
 80012b8:	4604      	mov	r4, r0
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 80012ba:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetBit( u32 Address, u8 BitNum )
{
 80012be:	460d      	mov	r5, r1
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 80012c0:	3a01      	subs	r2, #1
 80012c2:	2a01      	cmp	r2, #1
 80012c4:	d90a      	bls.n	80012dc <Hw_VBus_SetBit+0x28>
	
		Enable_ISR();
	}
	else
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
 80012c6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80012ca:	7858      	ldrb	r0, [r3, #1]
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	SET_BIT( Data, BitNum );
 80012cc:	2101      	movs	r1, #1
 80012ce:	40a9      	lsls	r1, r5
 80012d0:	4301      	orrs	r1, r0
	
	Hw_VBus_WriteData( Address, Data );
 80012d2:	b2c9      	uxtb	r1, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <Hw_VBus_SetBit+0x34>)
 80012d8:	4798      	blx	r3
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <Hw_VBus_SetBit+0x38>)
 80012de:	4798      	blx	r3
 80012e0:	e7f4      	b.n	80012cc <Hw_VBus_SetBit+0x18>
 80012e2:	bf00      	nop
 80012e4:	20000790 	.word	0x20000790
 80012e8:	0800123d 	.word	0x0800123d
 80012ec:	080011f1 	.word	0x080011f1

080012f0 <Hw_VBus_ClrBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_ClrBit( u32 Address, u8 BitNum )
{
 80012f0:	b510      	push	{r4, lr}
u8 Hw_VBus_ReadData( u32 Address )
{
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <Hw_VBus_ClrBit+0x38>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_ClrBit( u32 Address, u8 BitNum )
{
 80012f4:	b082      	sub	sp, #8
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 80012f6:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_ClrBit( u32 Address, u8 BitNum )
{
 80012fa:	4604      	mov	r4, r0
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 80012fc:	3a01      	subs	r2, #1
 80012fe:	2a01      	cmp	r2, #1
 8001300:	d90d      	bls.n	800131e <Hw_VBus_ClrBit+0x2e>
	
		Enable_ISR();
	}
	else
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
 8001302:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001306:	7858      	ldrb	r0, [r3, #1]
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	CLR_BIT( Data, BitNum );
 8001308:	2301      	movs	r3, #1
 800130a:	fa03 f101 	lsl.w	r1, r3, r1
 800130e:	ea20 0101 	bic.w	r1, r0, r1
	
	Hw_VBus_WriteData( Address, Data );
 8001312:	b2c9      	uxtb	r1, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <Hw_VBus_ClrBit+0x3c>)
 8001318:	4798      	blx	r3
}
 800131a:	b002      	add	sp, #8
 800131c:	bd10      	pop	{r4, pc}
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <Hw_VBus_ClrBit+0x40>)
 8001320:	9101      	str	r1, [sp, #4]
 8001322:	4798      	blx	r3
 8001324:	9901      	ldr	r1, [sp, #4]
 8001326:	e7ef      	b.n	8001308 <Hw_VBus_ClrBit+0x18>
 8001328:	20000790 	.word	0x20000790
 800132c:	0800123d 	.word	0x0800123d
 8001330:	080011f1 	.word	0x080011f1

08001334 <Hw_VBus_TglBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_TglBit( u32 Address, u8 BitNum )
{
 8001334:	b538      	push	{r3, r4, r5, lr}
u8 Hw_VBus_ReadData( u32 Address )
{
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <Hw_VBus_TglBit+0x30>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_TglBit( u32 Address, u8 BitNum )
{
 8001338:	4604      	mov	r4, r0
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 800133a:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_TglBit( u32 Address, u8 BitNum )
{
 800133e:	460d      	mov	r5, r1
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 8001340:	3a01      	subs	r2, #1
 8001342:	2a01      	cmp	r2, #1
 8001344:	d90a      	bls.n	800135c <Hw_VBus_TglBit+0x28>
	
		Enable_ISR();
	}
	else
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
 8001346:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800134a:	7858      	ldrb	r0, [r3, #1]
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	TGL_BIT( Data, BitNum );
 800134c:	2101      	movs	r1, #1
 800134e:	40a9      	lsls	r1, r5
 8001350:	4041      	eors	r1, r0
	
	Hw_VBus_WriteData( Address, Data );
 8001352:	b2c9      	uxtb	r1, r1
 8001354:	4620      	mov	r0, r4
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <Hw_VBus_TglBit+0x34>)
 8001358:	4798      	blx	r3
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <Hw_VBus_TglBit+0x38>)
 800135e:	4798      	blx	r3
 8001360:	e7f4      	b.n	800134c <Hw_VBus_TglBit+0x18>
 8001362:	bf00      	nop
 8001364:	20000790 	.word	0x20000790
 8001368:	0800123d 	.word	0x0800123d
 800136c:	080011f1 	.word	0x080011f1

08001370 <Hw_KeyPad_StateTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
 8001370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8  Value = 0;
	
	switch( pKey->State )
 8001374:	6803      	ldr	r3, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
 8001376:	b082      	sub	sp, #8
	u8  Value = 0;
	
	switch( pKey->State )
 8001378:	2b04      	cmp	r3, #4
 800137a:	d869      	bhi.n	8001450 <Hw_KeyPad_StateTick+0xe0>
 800137c:	e8df f003 	tbb	[pc, r3]
 8001380:	5a4c241d 	.word	0x5a4c241d
 8001384:	03          	.byte	0x03
 8001385:	00          	.byte	0x00
			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 8001386:	494e      	ldr	r1, [pc, #312]	; (80014c0 <Hw_KeyPad_StateTick+0x150>)
			
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
 8001388:	2400      	movs	r4, #0
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 800138a:	680b      	ldr	r3, [r1, #0]
			
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
 800138c:	6004      	str	r4, [r0, #0]
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 800138e:	b10b      	cbz	r3, 8001394 <Hw_KeyPad_StateTick+0x24>
			{
				Hw_KeyPad_PressedCount--;
 8001390:	3b01      	subs	r3, #1
 8001392:	600b      	str	r3, [r1, #0]
			}

			if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_RELEASED ) )
 8001394:	494b      	ldr	r1, [pc, #300]	; (80014c4 <Hw_KeyPad_StateTick+0x154>)
 8001396:	680b      	ldr	r3, [r1, #0]
 8001398:	075c      	lsls	r4, r3, #29
 800139a:	d404      	bmi.n	80013a6 <Hw_KeyPad_StateTick+0x36>
			{
				SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_RELEASED );
				Hw_KeyPad_EventList[HW_KEYPAD_EVENT_RELEASED] = KeyNum;				
 800139c:	4c4a      	ldr	r4, [pc, #296]	; (80014c8 <Hw_KeyPad_StateTick+0x158>)
				Hw_KeyPad_PressedCount--;
			}

			if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_RELEASED ) )
			{
				SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_RELEASED );
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	600b      	str	r3, [r1, #0]
				Hw_KeyPad_EventList[HW_KEYPAD_EVENT_RELEASED] = KeyNum;				
 80013a4:	60a2      	str	r2, [r4, #8]
			}
			
			if( pKey->EventFnct != NULL )
 80013a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d051      	beq.n	8001450 <Hw_KeyPad_StateTick+0xe0>
			{
				(*pKey->EventFnct)(HW_KEYPAD_EVENT_RELEASED);
 80013ac:	2002      	movs	r0, #2
 80013ae:	4798      	blx	r3
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
			Value       = 0;			
 80013b0:	2100      	movs	r1, #0

			break;
	}

	return Value;
}
 80013b2:	4608      	mov	r0, r1
 80013b4:	b002      	add	sp, #8
 80013b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

		case HW_KEYPAD_STATE_IDLE:
		
			Value = 0;
					
			if( KeyData > 0 )
 80013ba:	2900      	cmp	r1, #0
 80013bc:	d048      	beq.n	8001450 <Hw_KeyPad_StateTick+0xe0>
			{
				pKey->State   = HW_KEYPAD_STATE_PRESSING;
 80013be:	2301      	movs	r3, #1
				pKey->Cnt_Dly = 0;
 80013c0:	2100      	movs	r1, #0
		
			Value = 0;
					
			if( KeyData > 0 )
			{
				pKey->State   = HW_KEYPAD_STATE_PRESSING;
 80013c2:	6003      	str	r3, [r0, #0]
				pKey->Cnt_Dly = 0;
 80013c4:	60c1      	str	r1, [r0, #12]
 80013c6:	e7f4      	b.n	80013b2 <Hw_KeyPad_StateTick+0x42>

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 80013c8:	68c3      	ldr	r3, [r0, #12]
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 80013ca:	69c4      	ldr	r4, [r0, #28]

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 80013cc:	3301      	adds	r3, #1
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 80013ce:	42a3      	cmp	r3, r4

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 80013d0:	60c3      	str	r3, [r0, #12]
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 80013d2:	d93d      	bls.n	8001450 <Hw_KeyPad_StateTick+0xe0>
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 80013d4:	4e3a      	ldr	r6, [pc, #232]	; (80014c0 <Hw_KeyPad_StateTick+0x150>)
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 80013d6:	4f3b      	ldr	r7, [pc, #236]	; (80014c4 <Hw_KeyPad_StateTick+0x154>)
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 80013d8:	6835      	ldr	r5, [r6, #0]
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 80013da:	683b      	ldr	r3, [r7, #0]
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
 80013dc:	2400      	movs	r4, #0
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 80013de:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 80014cc <Hw_KeyPad_StateTick+0x15c>
				Hw_KeyPad_PressedCount++;
 80013e2:	f105 0c01 	add.w	ip, r5, #1
			
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
 80013e6:	f04f 0802 	mov.w	r8, #2
				pKey->Cnt_Pressed  = 0;
 80013ea:	6104      	str	r4, [r0, #16]
				pKey->Cnt_Released = 0;
 80013ec:	6144      	str	r4, [r0, #20]
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 80013ee:	07dc      	lsls	r4, r3, #31
			
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
 80013f0:	f8c0 8000 	str.w	r8, [r0]
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
 80013f4:	f8c6 c000 	str.w	ip, [r6]
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 80013f8:	f84e 2025 	str.w	r2, [lr, r5, lsl #2]
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 80013fc:	d404      	bmi.n	8001408 <Hw_KeyPad_StateTick+0x98>
				{
					SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED );
					Hw_KeyPad_EventList[HW_KEYPAD_EVENT_PRESSED] = KeyNum;
 80013fe:	4c32      	ldr	r4, [pc, #200]	; (80014c8 <Hw_KeyPad_StateTick+0x158>)
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
				{
					SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED );
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	603b      	str	r3, [r7, #0]
					Hw_KeyPad_EventList[HW_KEYPAD_EVENT_PRESSED] = KeyNum;
 8001406:	6022      	str	r2, [r4, #0]
				}
				
				if( pKey->EventFnct != NULL )
 8001408:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0d1      	beq.n	80013b2 <Hw_KeyPad_StateTick+0x42>
 800140e:	9101      	str	r1, [sp, #4]
				{
					(*pKey->EventFnct)(HW_KEYPAD_EVENT_PRESSED);
 8001410:	2000      	movs	r0, #0
 8001412:	4798      	blx	r3
 8001414:	9901      	ldr	r1, [sp, #4]
 8001416:	e7cc      	b.n	80013b2 <Hw_KeyPad_StateTick+0x42>

		case HW_KEYPAD_STATE_PRESSED:
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
 8001418:	6903      	ldr	r3, [r0, #16]
 800141a:	3301      	adds	r3, #1
 800141c:	6103      	str	r3, [r0, #16]
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800141e:	2900      	cmp	r1, #0
 8001420:	d131      	bne.n	8001486 <Hw_KeyPad_StateTick+0x116>
 8001422:	6944      	ldr	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 8001424:	6a05      	ldr	r5, [r0, #32]
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 8001426:	3401      	adds	r4, #1
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 8001428:	42ac      	cmp	r4, r5
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800142a:	6144      	str	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 800142c:	d92d      	bls.n	800148a <Hw_KeyPad_StateTick+0x11a>
			{
				pKey->State = HW_KEYPAD_STATE_RELEASING;
 800142e:	2304      	movs	r3, #4
 8001430:	6003      	str	r3, [r0, #0]
 8001432:	e7be      	b.n	80013b2 <Hw_KeyPad_StateTick+0x42>

		case HW_KEYPAD_STATE_REPEAT:

			Value = KeyData;

			pKey->Cnt_Pressed++;
 8001434:	6903      	ldr	r3, [r0, #16]
 8001436:	3301      	adds	r3, #1
 8001438:	6103      	str	r3, [r0, #16]
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800143a:	b971      	cbnz	r1, 800145a <Hw_KeyPad_StateTick+0xea>
 800143c:	6944      	ldr	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 800143e:	6a05      	ldr	r5, [r0, #32]

			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 8001440:	3401      	adds	r4, #1
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 8001442:	42ac      	cmp	r4, r5

			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 8001444:	6144      	str	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 8001446:	d90a      	bls.n	800145e <Hw_KeyPad_StateTick+0xee>
			{
				pKey->State      = HW_KEYPAD_STATE_RELEASING;
 8001448:	2304      	movs	r3, #4
				Value            = 0;
				pKey->Cnt_Repeat = 0;
 800144a:	6181      	str	r1, [r0, #24]
			if( KeyData == 0 )	pKey->Cnt_Released++;
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
			{
				pKey->State      = HW_KEYPAD_STATE_RELEASING;
 800144c:	6003      	str	r3, [r0, #0]
 800144e:	e7b0      	b.n	80013b2 <Hw_KeyPad_StateTick+0x42>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
	u8  Value = 0;
 8001450:	2100      	movs	r1, #0

			break;
	}

	return Value;
}
 8001452:	4608      	mov	r0, r1
 8001454:	b002      	add	sp, #8
 8001456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
			else			    pKey->Cnt_Released = 0;			
 800145a:	2400      	movs	r4, #0
 800145c:	6144      	str	r4, [r0, #20]
				Value            = 0;
				pKey->Cnt_Repeat = 0;
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
 800145e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001460:	42a3      	cmp	r3, r4
 8001462:	d9a6      	bls.n	80013b2 <Hw_KeyPad_StateTick+0x42>
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001464:	4d17      	ldr	r5, [pc, #92]	; (80014c4 <Hw_KeyPad_StateTick+0x154>)
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;
 8001466:	6983      	ldr	r3, [r0, #24]

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001468:	682c      	ldr	r4, [r5, #0]
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
 800146a:	2600      	movs	r6, #0
					pKey->Cnt_Repeat++;
 800146c:	3301      	adds	r3, #1
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
 800146e:	6106      	str	r6, [r0, #16]
					pKey->Cnt_Repeat++;

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001470:	07a6      	lsls	r6, r4, #30
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;
 8001472:	6183      	str	r3, [r0, #24]

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001474:	d51d      	bpl.n	80014b2 <Hw_KeyPad_StateTick+0x142>
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;						
					}
					
					if( pKey->EventFnct != NULL )
 8001476:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001478:	2b00      	cmp	r3, #0
 800147a:	d09a      	beq.n	80013b2 <Hw_KeyPad_StateTick+0x42>
 800147c:	9101      	str	r1, [sp, #4]
					{
						(*pKey->EventFnct)(HW_KEYPAD_EVENT_REPEAT);
 800147e:	2001      	movs	r0, #1
 8001480:	4798      	blx	r3
 8001482:	9901      	ldr	r1, [sp, #4]
 8001484:	e795      	b.n	80013b2 <Hw_KeyPad_StateTick+0x42>
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
			else			    pKey->Cnt_Released = 0;			
 8001486:	2400      	movs	r4, #0
 8001488:	6144      	str	r4, [r0, #20]
				pKey->State = HW_KEYPAD_STATE_RELEASING;
				Value       = 0;
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
 800148a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800148c:	42a3      	cmp	r3, r4
 800148e:	d990      	bls.n	80013b2 <Hw_KeyPad_StateTick+0x42>
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001490:	4d0c      	ldr	r5, [pc, #48]	; (80014c4 <Hw_KeyPad_StateTick+0x154>)
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
 8001492:	2703      	movs	r7, #3
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001494:	682b      	ldr	r3, [r5, #0]
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
 8001496:	2400      	movs	r4, #0
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
 8001498:	2601      	movs	r6, #1
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
 800149a:	6007      	str	r7, [r0, #0]
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 800149c:	079f      	lsls	r7, r3, #30
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
 800149e:	6104      	str	r4, [r0, #16]
					pKey->Cnt_Released = 0;
 80014a0:	6144      	str	r4, [r0, #20]
					pKey->Cnt_Repeat   = 1;
 80014a2:	6186      	str	r6, [r0, #24]
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 80014a4:	d4e7      	bmi.n	8001476 <Hw_KeyPad_StateTick+0x106>
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;
 80014a6:	4c08      	ldr	r4, [pc, #32]	; (80014c8 <Hw_KeyPad_StateTick+0x158>)
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	602b      	str	r3, [r5, #0]
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;
 80014ae:	6062      	str	r2, [r4, #4]
 80014b0:	e7e1      	b.n	8001476 <Hw_KeyPad_StateTick+0x106>
					pKey->Cnt_Repeat++;

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;						
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <Hw_KeyPad_StateTick+0x158>)
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
 80014b4:	f044 0402 	orr.w	r4, r4, #2
 80014b8:	602c      	str	r4, [r5, #0]
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;						
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	e7db      	b.n	8001476 <Hw_KeyPad_StateTick+0x106>
 80014be:	bf00      	nop
 80014c0:	200002bc 	.word	0x200002bc
 80014c4:	200002b8 	.word	0x200002b8
 80014c8:	20000994 	.word	0x20000994
 80014cc:	20000a60 	.word	0x20000a60

080014d0 <Hw_KeyPad_Tick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Tick( void )
{
 80014d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
u32 Hw_KeyPad_Scan( void )
{
	u32 ScanData = 0;
	
	
	ScanData = Hw_VBus_ReadData( HW_VBUS_CS_KEY );
 80014d4:	2011      	movs	r0, #17
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <Hw_KeyPad_Tick+0x4c>)
 80014d8:	4798      	blx	r3
---------------------------------------------------------------------------*/
void Hw_KeyPad_Tick( void )
{
	u32 i;
	u32 scan_data = 0;
	u32 key_data  = 0;
 80014da:	2600      	movs	r6, #0
u32 Hw_KeyPad_Scan( void )
{
	u32 ScanData = 0;
	
	
	ScanData = Hw_VBus_ReadData( HW_VBUS_CS_KEY );
 80014dc:	4607      	mov	r7, r0
	
	scan_data = Hw_KeyPad_Scan();
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 80014de:	4634      	mov	r4, r6
 80014e0:	4d0f      	ldr	r5, [pc, #60]	; (8001520 <Hw_KeyPad_Tick+0x50>)
 80014e2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001528 <Hw_KeyPad_Tick+0x58>
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
 80014e6:	f04f 0801 	mov.w	r8, #1
 80014ea:	fa08 f304 	lsl.w	r3, r8, r4
 80014ee:	403b      	ands	r3, r7
 80014f0:	b2e2      	uxtb	r2, r4
 80014f2:	bf12      	itee	ne
 80014f4:	4628      	movne	r0, r5
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 80014f6:	4628      	moveq	r0, r5
 80014f8:	b2e2      	uxtbeq	r2, r4
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
 80014fa:	f04f 0101 	mov.w	r1, #1
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 80014fe:	bf08      	it	eq
 8001500:	4619      	moveq	r1, r3
 8001502:	47c8      	blx	r9
 8001504:	40a0      	lsls	r0, r4
	
	scan_data = Hw_KeyPad_Scan();
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 8001506:	3401      	adds	r4, #1
 8001508:	2c04      	cmp	r4, #4
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 800150a:	ea46 0600 	orr.w	r6, r6, r0
 800150e:	f105 0530 	add.w	r5, r5, #48	; 0x30
	
	scan_data = Hw_KeyPad_Scan();
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 8001512:	d1ea      	bne.n	80014ea <Hw_KeyPad_Tick+0x1a>
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
		
		if( key_data & (1<<i) ) Cnt++;
	}
	
	Hw_KeyPad_Data         = key_data;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <Hw_KeyPad_Tick+0x54>)
 8001516:	601e      	str	r6, [r3, #0]
 8001518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800151c:	08001291 	.word	0x08001291
 8001520:	200009a0 	.word	0x200009a0
 8001524:	20000990 	.word	0x20000990
 8001528:	08001371 	.word	0x08001371

0800152c <Hw_KeyPad_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
{
 800152c:	b570      	push	{r4, r5, r6, lr}
	u8 i;
	
	Hw_KeyPad_Data = 0;
 800152e:	4814      	ldr	r0, [pc, #80]	; (8001580 <Hw_KeyPad_Init+0x54>)
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <Hw_KeyPad_Init+0x58>)
 8001532:	2100      	movs	r1, #0


	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{	
		Hw_KeyPad_Log[i].State         = HW_KEYPAD_STATE_IDLE;
 8001534:	460a      	mov	r2, r1
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
{
	u8 i;
	
	Hw_KeyPad_Data = 0;
 8001536:	6001      	str	r1, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
{
 8001538:	b082      	sub	sp, #8
 800153a:	f103 06c0 	add.w	r6, r3, #192	; 0xc0
		Hw_KeyPad_Log[i].Cnt_Dly       = 0;
		Hw_KeyPad_Log[i].Cnt_Pressed   = 0; 
		Hw_KeyPad_Log[i].Cnt_Released  = 0;
		Hw_KeyPad_Log[i].Cnt_Repeat    = 0;
		
		Hw_KeyPad_Log[i].Dly_Pressing  = 50  /10; // 50ms
 800153e:	2105      	movs	r1, #5
		Hw_KeyPad_Log[i].Dly_Releasing = 50  /10; // 50ms
		Hw_KeyPad_Log[i].Dly_Pressed   = 1000/10; // 1000ms
 8001540:	2564      	movs	r5, #100	; 0x64
		Hw_KeyPad_Log[i].Dly_Repeat    = 500 /10; // 500ms	
 8001542:	2432      	movs	r4, #50	; 0x32
	Hw_KeyPad_Data = 0;


	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{	
		Hw_KeyPad_Log[i].State         = HW_KEYPAD_STATE_IDLE;
 8001544:	601a      	str	r2, [r3, #0]
		Hw_KeyPad_Log[i].Event		   = 0;
 8001546:	609a      	str	r2, [r3, #8]
		Hw_KeyPad_Log[i].Value         = 0;
 8001548:	711a      	strb	r2, [r3, #4]
		Hw_KeyPad_Log[i].Cnt_Dly       = 0;
 800154a:	60da      	str	r2, [r3, #12]
		Hw_KeyPad_Log[i].Cnt_Pressed   = 0; 
 800154c:	611a      	str	r2, [r3, #16]
		Hw_KeyPad_Log[i].Cnt_Released  = 0;
 800154e:	615a      	str	r2, [r3, #20]
		Hw_KeyPad_Log[i].Cnt_Repeat    = 0;
 8001550:	619a      	str	r2, [r3, #24]
		
		Hw_KeyPad_Log[i].Dly_Pressing  = 50  /10; // 50ms
 8001552:	61d9      	str	r1, [r3, #28]
		Hw_KeyPad_Log[i].Dly_Releasing = 50  /10; // 50ms
 8001554:	6219      	str	r1, [r3, #32]
		Hw_KeyPad_Log[i].Dly_Pressed   = 1000/10; // 1000ms
 8001556:	625d      	str	r5, [r3, #36]	; 0x24
		Hw_KeyPad_Log[i].Dly_Repeat    = 500 /10; // 500ms	
 8001558:	629c      	str	r4, [r3, #40]	; 0x28
		
		Hw_KeyPad_Log[i].EventFnct     = NULL;				
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
 800155c:	3330      	adds	r3, #48	; 0x30
	u8 i;
	
	Hw_KeyPad_Data = 0;


	for( i=0; i<HW_KEYPAD_MAX; i++ )
 800155e:	42b3      	cmp	r3, r6
	{	
		Hw_KeyPad_Log[i].State         = HW_KEYPAD_STATE_IDLE;
 8001560:	f04f 0000 	mov.w	r0, #0
	u8 i;
	
	Hw_KeyPad_Data = 0;


	for( i=0; i<HW_KEYPAD_MAX; i++ )
 8001564:	d1ee      	bne.n	8001544 <Hw_KeyPad_Init+0x18>
	}

	
	//-- KeyPad 처리용 타이머 시작
	//
	Hw_Timer_Set  ( HW_TIMER_CH_KEYPAD, 10, LOOP_TIME, Hw_KeyPad_Tick, NULL );
 8001566:	9000      	str	r0, [sp, #0]
 8001568:	210a      	movs	r1, #10
 800156a:	2202      	movs	r2, #2
 800156c:	2004      	movs	r0, #4
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <Hw_KeyPad_Init+0x5c>)
 8001570:	4c06      	ldr	r4, [pc, #24]	; (800158c <Hw_KeyPad_Init+0x60>)
 8001572:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_KEYPAD );
 8001574:	2004      	movs	r0, #4
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <Hw_KeyPad_Init+0x64>)
 8001578:	4798      	blx	r3
}
 800157a:	b002      	add	sp, #8
 800157c:	bd70      	pop	{r4, r5, r6, pc}
 800157e:	bf00      	nop
 8001580:	20000990 	.word	0x20000990
 8001584:	200009a0 	.word	0x200009a0
 8001588:	080014d1 	.word	0x080014d1
 800158c:	08000ea5 	.word	0x08000ea5
 8001590:	08000ec1 	.word	0x08000ec1

08001594 <Hw_KeyPad_SetEventFunc>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_SetEventFunc( u8 KeyNum, void (*EventFnct)(u32 Event) )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return;
 8001594:	2803      	cmp	r0, #3
 8001596:	d805      	bhi.n	80015a4 <Hw_KeyPad_SetEventFunc+0x10>
	
	Hw_KeyPad_Log[KeyNum].EventFnct = EventFnct;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <Hw_KeyPad_SetEventFunc+0x14>)
 800159a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800159e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80015a2:	62c1      	str	r1, [r0, #44]	; 0x2c
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200009a0 	.word	0x200009a0

080015ac <Hw_KeyPad_GetRepeatCnt>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetRepeatCnt( u8 KeyNum )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return 0;
 80015ac:	2803      	cmp	r0, #3
 80015ae:	d806      	bhi.n	80015be <Hw_KeyPad_GetRepeatCnt+0x12>
	
	
	return Hw_KeyPad_Log[ KeyNum ].Cnt_Repeat;
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <Hw_KeyPad_GetRepeatCnt+0x18>)
 80015b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80015b6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80015ba:	6980      	ldr	r0, [r0, #24]
 80015bc:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetRepeatCnt( u8 KeyNum )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return 0;
 80015be:	2000      	movs	r0, #0
	
	
	return Hw_KeyPad_Log[ KeyNum ].Cnt_Repeat;
}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200009a0 	.word	0x200009a0

080015c8 <Hw_KeyPad_GetPressedCnt>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetPressedCnt( void )
{
	return Hw_KeyPad_PressedCount;
 80015c8:	4b01      	ldr	r3, [pc, #4]	; (80015d0 <Hw_KeyPad_GetPressedCnt+0x8>)
}
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200002bc 	.word	0x200002bc

080015d4 <Hw_KeyPad_WaitForEvent>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_WaitForEvent( u32 TimeOut )
{
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
	
	TimeStart = Hw_Timer_Get_CountValue();
 80015d6:	4d09      	ldr	r5, [pc, #36]	; (80015fc <Hw_KeyPad_WaitForEvent+0x28>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_WaitForEvent( u32 TimeOut )
{
 80015d8:	4604      	mov	r4, r0
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
	
	TimeStart = Hw_Timer_Get_CountValue();
 80015da:	47a8      	blx	r5
 80015dc:	4607      	mov	r7, r0

	Hw_KeyPad_EventFlag = 0;
 80015de:	4e08      	ldr	r6, [pc, #32]	; (8001600 <Hw_KeyPad_WaitForEvent+0x2c>)
 80015e0:	2300      	movs	r3, #0
 80015e2:	6033      	str	r3, [r6, #0]
			break;
		}
	
		//-- 타임 아웃 처리
		//
		if( TimeOut > 0 )
 80015e4:	b904      	cbnz	r4, 80015e8 <Hw_KeyPad_WaitForEvent+0x14>
 80015e6:	e7fe      	b.n	80015e6 <Hw_KeyPad_WaitForEvent+0x12>
		{
			TimeEnd = Hw_Timer_Get_CountValue();
 80015e8:	47a8      	blx	r5
			
			if( (TimeEnd - TimeStart) > TimeOut )
 80015ea:	1bc0      	subs	r0, r0, r7
 80015ec:	4284      	cmp	r4, r0
 80015ee:	d303      	bcc.n	80015f8 <Hw_KeyPad_WaitForEvent+0x24>
 80015f0:	6830      	ldr	r0, [r6, #0]

	Hw_KeyPad_EventFlag = 0;
	
	while(1)
	{	
		if( Hw_KeyPad_EventFlag > 0 )
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d0f6      	beq.n	80015e4 <Hw_KeyPad_WaitForEvent+0x10>
			}
		}
	}

	return Ret;
}
 80015f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_WaitForEvent( u32 TimeOut )
{
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
 80015f8:	2000      	movs	r0, #0
 80015fa:	e7fc      	b.n	80015f6 <Hw_KeyPad_WaitForEvent+0x22>
 80015fc:	08000ee9 	.word	0x08000ee9
 8001600:	200002b8 	.word	0x200002b8

08001604 <Hw_KeyPad_GetEventKeyData>:
u32 Hw_KeyPad_GetEventKeyData( u32 EventFlag )
{
	u32 EventKey = 0;
	u32 Ret = 0;
	
	EventKey = Hw_KeyPad_EventList[EventFlag];
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <Hw_KeyPad_GetEventKeyData+0x10>)
	Ret      = (1<<EventKey);
 8001606:	2201      	movs	r2, #1
 8001608:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	
	return Ret;
}
 800160c:	fa02 f003 	lsl.w	r0, r2, r3
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000994 	.word	0x20000994

08001618 <Hw_KeyPad_GetEventKeyNum>:
u32 Hw_KeyPad_GetEventKeyNum( u32 EventFlag )
{
	u32 EventKey = 0;
	u32 Ret = 0;
	
	EventKey = Hw_KeyPad_EventList[EventFlag];
 8001618:	4b01      	ldr	r3, [pc, #4]	; (8001620 <Hw_KeyPad_GetEventKeyNum+0x8>)
	Ret      = EventKey;
	
	return Ret;
 800161a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800161e:	4770      	bx	lr
 8001620:	20000994 	.word	0x20000994

08001624 <Hw_7Seg_Tick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Tick( void )
{
 8001624:	b538      	push	{r3, r4, r5, lr}
	static u8 Column_Cnt = 0;
	
	
	//-- 7Seg 데이터 출력
	//
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, Hw_7Seg_Data[Column_Cnt] );
 8001626:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <Hw_7Seg_Tick+0x30>)
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <Hw_7Seg_Tick+0x34>)
 800162a:	7823      	ldrb	r3, [r4, #0]
 800162c:	200a      	movs	r0, #10
 800162e:	5cd1      	ldrb	r1, [r2, r3]
 8001630:	4d0a      	ldr	r5, [pc, #40]	; (800165c <Hw_7Seg_Tick+0x38>)
 8001632:	47a8      	blx	r5
	
	
	//-- 7Seg 4개를 번갈아가며 On 시켜준다.
	//
	Hw_VBus_WriteData( HW_VBUS_CS_FND_2, ~(1<<Column_Cnt) );
 8001634:	7823      	ldrb	r3, [r4, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	4099      	lsls	r1, r3
 800163a:	43c9      	mvns	r1, r1
 800163c:	200c      	movs	r0, #12
 800163e:	b2c9      	uxtb	r1, r1
 8001640:	47a8      	blx	r5
	
	Column_Cnt++;
 8001642:	7823      	ldrb	r3, [r4, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	b2db      	uxtb	r3, r3
	
	if( Column_Cnt>=HW_7SEG_MAX )
 8001648:	2b03      	cmp	r3, #3
	{
		Column_Cnt = 0;
 800164a:	bf88      	it	hi
 800164c:	2300      	movhi	r3, #0
 800164e:	7023      	strb	r3, [r4, #0]
 8001650:	bd38      	pop	{r3, r4, r5, pc}
 8001652:	bf00      	nop
 8001654:	200002c0 	.word	0x200002c0
 8001658:	20000a70 	.word	0x20000a70
 800165c:	0800123d 	.word	0x0800123d

08001660 <Hw_7Seg_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Init( void )
{
 8001660:	b530      	push	{r4, r5, lr}
	
	//-- 7Seg 값 초기화
	//
	for( i=0; i<HW_7SEG_MAX; i++ )
	{
		Hw_7Seg_Data[i] = 0x00;
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <Hw_7Seg_Init+0x38>)
 8001664:	2400      	movs	r4, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Init( void )
{
 8001666:	b083      	sub	sp, #12
	{
		Hw_7Seg_Data[i] = 0x00;
	}
	
	
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, 0x00 );
 8001668:	4621      	mov	r1, r4
 800166a:	4d0c      	ldr	r5, [pc, #48]	; (800169c <Hw_7Seg_Init+0x3c>)
 800166c:	200a      	movs	r0, #10
	
	//-- 7Seg 값 초기화
	//
	for( i=0; i<HW_7SEG_MAX; i++ )
	{
		Hw_7Seg_Data[i] = 0x00;
 800166e:	701c      	strb	r4, [r3, #0]
 8001670:	705c      	strb	r4, [r3, #1]
 8001672:	709c      	strb	r4, [r3, #2]
 8001674:	70dc      	strb	r4, [r3, #3]
	}
	
	
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, 0x00 );
 8001676:	47a8      	blx	r5
	Hw_VBus_WriteData( HW_VBUS_CS_FND_2, 0x0F );
 8001678:	200c      	movs	r0, #12
 800167a:	210f      	movs	r1, #15
 800167c:	47a8      	blx	r5
			
	
	//-- 7Seg 처리용 타이머 시작(50Hz x 4 = 200Hz)
	//
	Hw_Timer_Set  ( HW_TIMER_CH_7SEG, 1000/200, LOOP_TIME, Hw_7Seg_Tick, NULL );
 800167e:	2005      	movs	r0, #5
 8001680:	4601      	mov	r1, r0
 8001682:	9400      	str	r4, [sp, #0]
 8001684:	2202      	movs	r2, #2
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <Hw_7Seg_Init+0x40>)
 8001688:	4c06      	ldr	r4, [pc, #24]	; (80016a4 <Hw_7Seg_Init+0x44>)
 800168a:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_7SEG );
 800168c:	2005      	movs	r0, #5
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <Hw_7Seg_Init+0x48>)
 8001690:	4798      	blx	r3
}
 8001692:	b003      	add	sp, #12
 8001694:	bd30      	pop	{r4, r5, pc}
 8001696:	bf00      	nop
 8001698:	20000a70 	.word	0x20000a70
 800169c:	0800123d 	.word	0x0800123d
 80016a0:	08001625 	.word	0x08001625
 80016a4:	08000ea5 	.word	0x08000ea5
 80016a8:	08000ec1 	.word	0x08000ec1

080016ac <Hw_7Seg_SetNumber>:
---------------------------------------------------------------------------*/
void Hw_7Seg_SetNumber( u8 Index, u8 Number  )
{
	u8 SegOut;
	
	if( Index >= HW_7SEG_MAX ) return;
 80016ac:	2803      	cmp	r0, #3
 80016ae:	d830      	bhi.n	8001712 <Hw_7Seg_SetNumber+0x66>


	if( Number == ' ' )
 80016b0:	2920      	cmp	r1, #32
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_SetNumber( u8 Index, u8 Number  )
{
 80016b2:	b410      	push	{r4}
	u8 SegOut;
	
	if( Index >= HW_7SEG_MAX ) return;


	if( Number == ' ' )
 80016b4:	d02e      	beq.n	8001714 <Hw_7Seg_SetNumber+0x68>
				
		Hw_7Seg_Data[ Index ] = SegOut;
	}


	if( Number == '-' )
 80016b6:	292d      	cmp	r1, #45	; 0x2d
 80016b8:	d032      	beq.n	8001720 <Hw_7Seg_SetNumber+0x74>
				
		Hw_7Seg_Data[ Index ] = SegOut;
	}

	
	if( Number >= '0' && Number <= '9' )
 80016ba:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80016be:	2b09      	cmp	r3, #9
 80016c0:	d809      	bhi.n	80016d6 <Hw_7Seg_SetNumber+0x2a>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80016c2:	4c1b      	ldr	r4, [pc, #108]	; (8001730 <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <Hw_7Seg_SetNumber+0x88>)
	}

	
	if( Number >= '0' && Number <= '9' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80016c6:	5c23      	ldrb	r3, [r4, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 80016c8:	440a      	add	r2, r1
 80016ca:	f812 2c30 	ldrb.w	r2, [r2, #-48]
	}

	
	if( Number >= '0' && Number <= '9' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80016ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 80016d2:	4313      	orrs	r3, r2
		
		Hw_7Seg_Data[ Index ] = SegOut;
 80016d4:	5423      	strb	r3, [r4, r0]
	}	

	
	if( Number >= 'A' && Number <= 'F' )
 80016d6:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d809      	bhi.n	80016f2 <Hw_7Seg_SetNumber+0x46>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80016de:	4c14      	ldr	r4, [pc, #80]	; (8001730 <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <Hw_7Seg_SetNumber+0x88>)
	}	

	
	if( Number >= 'A' && Number <= 'F' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80016e2:	5c23      	ldrb	r3, [r4, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 80016e4:	440a      	add	r2, r1
 80016e6:	f812 2c37 	ldrb.w	r2, [r2, #-55]
	}	

	
	if( Number >= 'A' && Number <= 'F' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80016ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 80016ee:	4313      	orrs	r3, r2
		
		Hw_7Seg_Data[ Index ] = SegOut;
 80016f0:	5423      	strb	r3, [r4, r0]
	}	


	if( Number >= 'a' && Number <= 'f' )
 80016f2:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d809      	bhi.n	800170e <Hw_7Seg_SetNumber+0x62>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80016fa:	4c0d      	ldr	r4, [pc, #52]	; (8001730 <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <Hw_7Seg_SetNumber+0x88>)
	}	


	if( Number >= 'a' && Number <= 'f' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80016fe:	5c23      	ldrb	r3, [r4, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 8001700:	4411      	add	r1, r2
 8001702:	f811 2c57 	ldrb.w	r2, [r1, #-87]
	}	


	if( Number >= 'a' && Number <= 'f' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 8001706:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 800170a:	4313      	orrs	r3, r2
		
		Hw_7Seg_Data[ Index ] = SegOut;
 800170c:	5423      	strb	r3, [r4, r0]
	}	
	
}
 800170e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001712:	4770      	bx	lr
	if( Number == ' ' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
		SegOut |= 0x00;
				
		Hw_7Seg_Data[ Index ] = SegOut;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <Hw_7Seg_SetNumber+0x84>)
	if( Index >= HW_7SEG_MAX ) return;


	if( Number == ' ' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 8001716:	5c13      	ldrb	r3, [r2, r0]
 8001718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		SegOut |= 0x00;
				
		Hw_7Seg_Data[ Index ] = SegOut;
 800171c:	5413      	strb	r3, [r2, r0]
 800171e:	e7da      	b.n	80016d6 <Hw_7Seg_SetNumber+0x2a>
	}


	if( Number == '-' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 8001720:	4a03      	ldr	r2, [pc, #12]	; (8001730 <Hw_7Seg_SetNumber+0x84>)
 8001722:	5c13      	ldrb	r3, [r2, r0]
 8001724:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		SegOut |= (1<<6);
 8001728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				
		Hw_7Seg_Data[ Index ] = SegOut;
 800172c:	5413      	strb	r3, [r2, r0]
 800172e:	e7d2      	b.n	80016d6 <Hw_7Seg_SetNumber+0x2a>
 8001730:	20000a70 	.word	0x20000a70
 8001734:	20000000 	.word	0x20000000

08001738 <Hw_7Seg_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Print( u8 Index, char *format, ... )
{
 8001738:	b40e      	push	{r1, r2, r3}
 800173a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173c:	b0b2      	sub	sp, #200	; 0xc8
		
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800173e:	aa37      	add	r2, sp, #220	; 0xdc
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <Hw_7Seg_Print+0x64>)
 8001742:	f852 1b04 	ldr.w	r1, [r2], #4
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Print( u8 Index, char *format, ... )
{
 8001746:	4605      	mov	r5, r0
		
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8001748:	4668      	mov	r0, sp
 800174a:	4798      	blx	r3
	
	StrSize = 0;
	
	for( i=0; i<100; i++ )
 800174c:	2400      	movs	r4, #0
 800174e:	f10d 33ff 	add.w	r3, sp, #4294967295
 8001752:	e002      	b.n	800175a <Hw_7Seg_Print+0x22>
 8001754:	3401      	adds	r4, #1
 8001756:	2c64      	cmp	r4, #100	; 0x64
 8001758:	d01a      	beq.n	8001790 <Hw_7Seg_Print+0x58>
	{
		if( Str[i] == 0 ) break;
 800175a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800175e:	2a00      	cmp	r2, #0
 8001760:	d1f8      	bne.n	8001754 <Hw_7Seg_Print+0x1c>
	}
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
 8001762:	1e63      	subs	r3, r4, #1
 8001764:	2b62      	cmp	r3, #98	; 0x62
 8001766:	d813      	bhi.n	8001790 <Hw_7Seg_Print+0x58>
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 8001768:	2d03      	cmp	r5, #3
 800176a:	d811      	bhi.n	8001790 <Hw_7Seg_Print+0x58>
 800176c:	ea6f 0645 	mvn.w	r6, r5, lsl #1
 8001770:	4f0b      	ldr	r7, [pc, #44]	; (80017a0 <Hw_7Seg_Print+0x68>)
 8001772:	4426      	add	r6, r4
 8001774:	446e      	add	r6, sp
		{
			if( i < StrSize ) 
 8001776:	42ac      	cmp	r4, r5
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
 8001778:	b2e8      	uxtb	r0, r5
			else
				Hw_7Seg_SetNumber( i, ' ' ); 
 800177a:	f04f 0120 	mov.w	r1, #32
 800177e:	bf94      	ite	ls
 8001780:	b2e8      	uxtbls	r0, r5
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
		{
			if( i < StrSize ) 
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
 8001782:	7831      	ldrbhi	r1, [r6, #0]
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 8001784:	3501      	adds	r5, #1
		{
			if( i < StrSize ) 
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
			else
				Hw_7Seg_SetNumber( i, ' ' ); 
 8001786:	47b8      	blx	r7
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 8001788:	2d04      	cmp	r5, #4
 800178a:	f106 36ff 	add.w	r6, r6, #4294967295
 800178e:	d1f2      	bne.n	8001776 <Hw_7Seg_Print+0x3e>
		}
	} 
	
	Lb_va_end(ap);		
	
 8001790:	b032      	add	sp, #200	; 0xc8
 8001792:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001796:	b003      	add	sp, #12
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	08000795 	.word	0x08000795
 80017a0:	080016ad 	.word	0x080016ad

080017a4 <Hw_CLcd_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteCmd( u8 CmdData )
{
 80017a4:	b538      	push	{r3, r4, r5, lr}
 80017a6:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	HW_CLCD_RS_CLR();
 80017a8:	4c09      	ldr	r4, [pc, #36]	; (80017d0 <Hw_CLcd_WriteCmd+0x2c>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	2014      	movs	r0, #20
 80017ae:	47a0      	blx	r4
	HW_CLCD_EN_SET();
 80017b0:	2014      	movs	r0, #20
 80017b2:	2100      	movs	r1, #0
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <Hw_CLcd_WriteCmd+0x30>)
 80017b6:	4798      	blx	r3
	
	HW_CLCD_BUS_WRITE( CmdData );
 80017b8:	4629      	mov	r1, r5
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <Hw_CLcd_WriteCmd+0x34>)
 80017bc:	2010      	movs	r0, #16
 80017be:	4798      	blx	r3
	
	HW_CLCD_EN_CLR();
 80017c0:	2100      	movs	r1, #0
 80017c2:	2014      	movs	r0, #20
 80017c4:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 80017c6:	2032      	movs	r0, #50	; 0x32
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <Hw_CLcd_WriteCmd+0x38>)
 80017ca:	4798      	blx	r3
	HW_CLCD_EN_CLR();
	
	Hw_CLcd_Delay(50);
	
	return Ret;
}
 80017cc:	2000      	movs	r0, #0
 80017ce:	bd38      	pop	{r3, r4, r5, pc}
 80017d0:	080012f1 	.word	0x080012f1
 80017d4:	080012b5 	.word	0x080012b5
 80017d8:	0800123d 	.word	0x0800123d
 80017dc:	080009b9 	.word	0x080009b9

080017e0 <Hw_CLcd_WriteByte>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteByte( u8 ByteData )
{
 80017e0:	b538      	push	{r3, r4, r5, lr}
 80017e2:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;

	HW_CLCD_RS_SET();
 80017e4:	4c09      	ldr	r4, [pc, #36]	; (800180c <Hw_CLcd_WriteByte+0x2c>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2014      	movs	r0, #20
 80017ea:	47a0      	blx	r4
	HW_CLCD_EN_SET();
 80017ec:	2014      	movs	r0, #20
 80017ee:	2100      	movs	r1, #0
 80017f0:	47a0      	blx	r4
	
	HW_CLCD_BUS_WRITE( ByteData );
 80017f2:	4629      	mov	r1, r5
 80017f4:	2010      	movs	r0, #16
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <Hw_CLcd_WriteByte+0x30>)
 80017f8:	4798      	blx	r3
	
	HW_CLCD_EN_CLR();
 80017fa:	2100      	movs	r1, #0
 80017fc:	2014      	movs	r0, #20
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <Hw_CLcd_WriteByte+0x34>)
 8001800:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 8001802:	2032      	movs	r0, #50	; 0x32
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <Hw_CLcd_WriteByte+0x38>)
 8001806:	4798      	blx	r3
	HW_CLCD_EN_CLR();
	
	Hw_CLcd_Delay(50);
			
	return Ret;
}
 8001808:	2000      	movs	r0, #0
 800180a:	bd38      	pop	{r3, r4, r5, pc}
 800180c:	080012b5 	.word	0x080012b5
 8001810:	0800123d 	.word	0x0800123d
 8001814:	080012f1 	.word	0x080012f1
 8001818:	080009b9 	.word	0x080009b9

0800181c <Hw_CLcd_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
 800181c:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800181e:	7803      	ldrb	r3, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
 8001820:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001822:	b15b      	cbz	r3, 800183c <Hw_CLcd_WriteStr+0x20>
 8001824:	4e06      	ldr	r6, [pc, #24]	; (8001840 <Hw_CLcd_WriteStr+0x24>)
 8001826:	2400      	movs	r4, #0
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteChar( u8 CharData )
{
	u16 Ret = ERR_NONE;
	
	Ret = Hw_CLcd_WriteByte(CharData);
 8001828:	4618      	mov	r0, r3
 800182a:	47b0      	blx	r6
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800182c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
	{
		Ret |= Hw_CLcd_WriteChar( *pStr );
 8001830:	4320      	orrs	r0, r4
 8001832:	b284      	uxth	r4, r0
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f7      	bne.n	8001828 <Hw_CLcd_WriteStr+0xc>
		Ret |= Hw_CLcd_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 8001838:	4620      	mov	r0, r4
 800183a:	bd70      	pop	{r4, r5, r6, pc}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 800183c:	461c      	mov	r4, r3
 800183e:	e7fb      	b.n	8001838 <Hw_CLcd_WriteStr+0x1c>
 8001840:	080017e1 	.word	0x080017e1

08001844 <Hw_CLcd_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8001844:	b40c      	push	{r2, r3}
 8001846:	b530      	push	{r4, r5, lr}
 8001848:	460d      	mov	r5, r1
 800184a:	4604      	mov	r4, r0
 800184c:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800184e:	aa36      	add	r2, sp, #216	; 0xd8
 8001850:	f852 1b04 	ldr.w	r1, [r2], #4
 8001854:	4668      	mov	r0, sp
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <Hw_CLcd_Print+0x38>)
 8001858:	4798      	blx	r3
u16 Hw_CLcd_Goto( u8 x, u8 y )
{
	u16 Ret = ERR_NONE;
	u8  Cmd;
	
	Cmd = 0x80 | 0x40*y | x;
 800185a:	ea44 1085 	orr.w	r0, r4, r5, lsl #6
 800185e:	f060 007f 	orn	r0, r0, #127	; 0x7f
	
	Hw_CLcd_WriteCmd( Cmd );
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <Hw_CLcd_Print+0x3c>)
 8001864:	b2c0      	uxtb	r0, r0
 8001866:	4798      	blx	r3
	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_CLcd_Goto( x_str, y_str );
	Hw_CLcd_WriteStr( Str );		
 8001868:	4668      	mov	r0, sp
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <Hw_CLcd_Print+0x40>)
 800186c:	4798      	blx	r3
		
	Lb_va_end(ap);		
	
	return Ret;
}
 800186e:	2000      	movs	r0, #0
 8001870:	b033      	add	sp, #204	; 0xcc
 8001872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001876:	b002      	add	sp, #8
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	08000795 	.word	0x08000795
 8001880:	080017a5 	.word	0x080017a5
 8001884:	0800181d 	.word	0x0800181d

08001888 <Hw_CLcd_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Init(void)
{	
 8001888:	b538      	push	{r3, r4, r5, lr}
	HW_CLCD_EN_CLR();
 800188a:	2014      	movs	r0, #20
 800188c:	4c13      	ldr	r4, [pc, #76]	; (80018dc <Hw_CLcd_Init+0x54>)
 800188e:	2100      	movs	r1, #0
 8001890:	47a0      	blx	r4
	HW_CLCD_RS_CLR();
 8001892:	2101      	movs	r1, #1
 8001894:	2014      	movs	r0, #20
 8001896:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 8001898:	4d11      	ldr	r5, [pc, #68]	; (80018e0 <Hw_CLcd_Init+0x58>)
 800189a:	f242 7010 	movw	r0, #10000	; 0x2710
	HW_CLCD_EN_CLR();
	HW_CLCD_RS_CLR();
	
	Hw_CLcd_Delay(10000);	// delay 10ms
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
 800189e:	4c11      	ldr	r4, [pc, #68]	; (80018e4 <Hw_CLcd_Init+0x5c>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 80018a0:	47a8      	blx	r5
	HW_CLCD_EN_CLR();
	HW_CLCD_RS_CLR();
	
	Hw_CLcd_Delay(10000);	// delay 10ms
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
 80018a2:	203c      	movs	r0, #60	; 0x3c
 80018a4:	47a0      	blx	r4
	Hw_CLcd_WriteCmd(0x0C);	// display on, cursor off, blink off
 80018a6:	200c      	movs	r0, #12
 80018a8:	47a0      	blx	r4
	Hw_CLcd_WriteCmd(0x01);	// Display Clear
 80018aa:	2001      	movs	r0, #1
 80018ac:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 80018ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b2:	47a8      	blx	r5
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
	Hw_CLcd_WriteCmd(0x0C);	// display on, cursor off, blink off
	Hw_CLcd_WriteCmd(0x01);	// Display Clear
	Hw_CLcd_Delay(2000);	// delay 2ms
	Hw_CLcd_WriteCmd(0x06);	// increment mode, entire shift off
 80018b4:	2006      	movs	r0, #6
 80018b6:	47a0      	blx	r4
	u16 Ret = ERR_NONE;
	u8  Cmd;
	
	Cmd = 0x80 | 0x40*y | x;
	
	Hw_CLcd_WriteCmd( Cmd );
 80018b8:	2080      	movs	r0, #128	; 0x80
 80018ba:	47a0      	blx	r4
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Clear( void )
{
	u16 Ret = ERR_NONE;
	
	Hw_CLcd_WriteCmd(0x01);
 80018bc:	2001      	movs	r0, #1
 80018be:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 80018c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018c4:	47a8      	blx	r5
	Hw_CLcd_WriteCmd(0x06);	// increment mode, entire shift off

	Hw_CLcd_Goto(0,0);		
	Hw_CLcd_Clear();	
	
	Hw_CLcd_Print( 0, 0, "SmartRobot BD");
 80018c6:	2000      	movs	r0, #0
 80018c8:	4601      	mov	r1, r0
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <Hw_CLcd_Init+0x60>)
 80018cc:	4c07      	ldr	r4, [pc, #28]	; (80018ec <Hw_CLcd_Init+0x64>)
 80018ce:	47a0      	blx	r4
	Hw_CLcd_Print( 0, 1, "Baram");
 80018d0:	2101      	movs	r1, #1
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <Hw_CLcd_Init+0x68>)
 80018d4:	2000      	movs	r0, #0
 80018d6:	47a0      	blx	r4
 80018d8:	bd38      	pop	{r3, r4, r5, pc}
 80018da:	bf00      	nop
 80018dc:	080012f1 	.word	0x080012f1
 80018e0:	080009b9 	.word	0x080009b9
 80018e4:	080017a5 	.word	0x080017a5
 80018e8:	080033a0 	.word	0x080033a0
 80018ec:	08001845 	.word	0x08001845
 80018f0:	080033b0 	.word	0x080033b0

080018f4 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 80018f4:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <EP1_IN_Callback+0x58>)
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	d000      	beq.n	8001900 <EP1_IN_Callback+0xc>
 80018fe:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8001900:	4913      	ldr	r1, [pc, #76]	; (8001950 <EP1_IN_Callback+0x5c>)
 8001902:	680a      	ldr	r2, [r1, #0]
 8001904:	b302      	cbz	r2, 8001948 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001906:	2a40      	cmp	r2, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001908:	4812      	ldr	r0, [pc, #72]	; (8001954 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800190a:	d814      	bhi.n	8001936 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800190c:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 800190e:	2500      	movs	r5, #0
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = USART_Rx_length;
 8001910:	b294      	uxth	r4, r2
        
        USART_Rx_ptr_out += USART_Rx_length;
 8001912:	441a      	add	r2, r3
 8001914:	6002      	str	r2, [r0, #0]
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001916:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8001918:	600d      	str	r5, [r1, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800191a:	480f      	ldr	r0, [pc, #60]	; (8001958 <EP1_IN_Callback+0x64>)
 800191c:	4622      	mov	r2, r4
 800191e:	4418      	add	r0, r3
 8001920:	21c0      	movs	r1, #192	; 0xc0
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <EP1_IN_Callback+0x68>)
 8001924:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8001926:	4621      	mov	r1, r4
 8001928:	2001      	movs	r0, #1
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <EP1_IN_Callback+0x6c>)
 800192c:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 800192e:	2001      	movs	r0, #1
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <EP1_IN_Callback+0x70>)
 8001932:	4798      	blx	r3
 8001934:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001936:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001938:	3a40      	subs	r2, #64	; 0x40
 800193a:	600a      	str	r2, [r1, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800193c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001940:	6002      	str	r2, [r0, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001942:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001944:	2440      	movs	r4, #64	; 0x40
 8001946:	e7e8      	b.n	800191a <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	bd38      	pop	{r3, r4, r5, pc}
 800194c:	200002e4 	.word	0x200002e4
 8001950:	200002f0 	.word	0x200002f0
 8001954:	200002ec 	.word	0x200002ec
 8001958:	20000adc 	.word	0x20000adc
 800195c:	08002bd5 	.word	0x08002bd5
 8001960:	08002df5 	.word	0x08002df5
 8001964:	08002cbd 	.word	0x08002cbd

08001968 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8001968:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800196a:	4c06      	ldr	r4, [pc, #24]	; (8001984 <EP3_OUT_Callback+0x1c>)
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <EP3_OUT_Callback+0x20>)
 800196e:	4621      	mov	r1, r4
 8001970:	2003      	movs	r0, #3
 8001972:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <EP3_OUT_Callback+0x24>)
 8001976:	b2c1      	uxtb	r1, r0
 8001978:	4620      	mov	r0, r4
 800197a:	4798      	blx	r3
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 800197c:	2003      	movs	r0, #3
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <EP3_OUT_Callback+0x28>)
 8001980:	4798      	blx	r3
 8001982:	bd10      	pop	{r4, pc}
 8001984:	20000a74 	.word	0x20000a74
 8001988:	08002ea9 	.word	0x08002ea9
 800198c:	08002139 	.word	0x08002139
 8001990:	08002ce5 	.word	0x08002ce5

08001994 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8001994:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <SOF_Callback+0x28>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b05      	cmp	r3, #5
 800199c:	d000      	beq.n	80019a0 <SOF_Callback+0xc>
 800199e:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <SOF_Callback+0x2c>)
 80019a2:	6813      	ldr	r3, [r2, #0]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	f103 0101 	add.w	r1, r3, #1
 80019aa:	d001      	beq.n	80019b0 <SOF_Callback+0x1c>
 80019ac:	6011      	str	r1, [r2, #0]
 80019ae:	bd08      	pop	{r3, pc}
    {
      /* Reset the frame counter */
      FrameCount = 0;
 80019b0:	2100      	movs	r1, #0
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SOF_Callback+0x30>)
  if(bDeviceState == CONFIGURED)
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
    {
      /* Reset the frame counter */
      FrameCount = 0;
 80019b4:	6011      	str	r1, [r2, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 80019b6:	4798      	blx	r3
 80019b8:	e7f1      	b.n	800199e <SOF_Callback+0xa>
 80019ba:	bf00      	nop
 80019bc:	200002d8 	.word	0x200002d8
 80019c0:	200002c4 	.word	0x200002c4
 80019c4:	08002165 	.word	0x08002165

080019c8 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80019c8:	4959      	ldr	r1, [pc, #356]	; (8001b30 <USB_Istr+0x168>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80019ca:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80019cc:	680b      	ldr	r3, [r1, #0]
 80019ce:	4c59      	ldr	r4, [pc, #356]	; (8001b34 <USB_Istr+0x16c>)
 80019d0:	b29b      	uxth	r3, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80019d2:	4d59      	ldr	r5, [pc, #356]	; (8001b38 <USB_Istr+0x170>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 80019d4:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80019d6:	8822      	ldrh	r2, [r4, #0]
 80019d8:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	401a      	ands	r2, r3
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80019de:	0590      	lsls	r0, r2, #22
 80019e0:	d455      	bmi.n	8001a8e <USB_Istr+0xc6>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80019e2:	8822      	ldrh	r2, [r4, #0]
 80019e4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80019e8:	4213      	tst	r3, r2
 80019ea:	d14c      	bne.n	8001a86 <USB_Istr+0xbe>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80019ec:	8822      	ldrh	r2, [r4, #0]
 80019ee:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80019f2:	4213      	tst	r3, r2
 80019f4:	d13e      	bne.n	8001a74 <USB_Istr+0xac>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 80019f6:	8822      	ldrh	r2, [r4, #0]
 80019f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019fc:	4213      	tst	r3, r2
 80019fe:	d003      	beq.n	8001a08 <USB_Istr+0x40>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8001a00:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8001a04:	4a4a      	ldr	r2, [pc, #296]	; (8001b30 <USB_Istr+0x168>)
 8001a06:	6011      	str	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8001a08:	8822      	ldrh	r2, [r4, #0]
 8001a0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a0e:	4213      	tst	r3, r2
 8001a10:	d127      	bne.n	8001a62 <USB_Istr+0x9a>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8001a12:	8822      	ldrh	r2, [r4, #0]
 8001a14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a18:	4213      	tst	r3, r2
 8001a1a:	d00a      	beq.n	8001a32 <USB_Istr+0x6a>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8001a1c:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <USB_Istr+0x174>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b9e3      	cbnz	r3, 8001a5c <USB_Istr+0x94>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8001a22:	2002      	movs	r0, #2
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <USB_Istr+0x178>)
 8001a26:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8001a28:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <USB_Istr+0x168>)
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	882b      	ldrh	r3, [r5, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8001a32:	8822      	ldrh	r2, [r4, #0]
 8001a34:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001a38:	4213      	tst	r3, r2
 8001a3a:	d00d      	beq.n	8001a58 <USB_Istr+0x90>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8001a3c:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8001a40:	4a3b      	ldr	r2, [pc, #236]	; (8001b30 <USB_Istr+0x168>)
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001a42:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <USB_Istr+0x17c>)

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8001a44:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0419      	lsls	r1, r3, #16
 8001a4a:	d42c      	bmi.n	8001aa6 <USB_Istr+0xde>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8001a4c:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <USB_Istr+0x180>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8001a52:	2007      	movs	r0, #7
 8001a54:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <USB_Istr+0x178>)
 8001a56:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8001a58:	b009      	add	sp, #36	; 0x24
 8001a5a:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <USB_Istr+0x184>)
 8001a5e:	4798      	blx	r3
 8001a60:	e7e2      	b.n	8001a28 <USB_Istr+0x60>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8001a62:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <USB_Istr+0x168>)
    Resume(RESUME_EXTERNAL);
 8001a68:	2000      	movs	r0, #0
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8001a6a:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <USB_Istr+0x178>)
 8001a6e:	4798      	blx	r3
 8001a70:	882b      	ldrh	r3, [r5, #0]
 8001a72:	e7ce      	b.n	8001a12 <USB_Istr+0x4a>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8001a74:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8001a78:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <USB_Istr+0x168>)
    Device_Property.Reset();
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <USB_Istr+0x188>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8001a7c:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4798      	blx	r3
 8001a82:	882b      	ldrh	r3, [r5, #0]
 8001a84:	e7b7      	b.n	80019f6 <USB_Istr+0x2e>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <USB_Istr+0x18c>)
 8001a88:	4798      	blx	r3
 8001a8a:	882b      	ldrh	r3, [r5, #0]
 8001a8c:	e7ae      	b.n	80019ec <USB_Istr+0x24>
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8001a8e:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 8001a92:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <USB_Istr+0x190>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8001a94:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 8001a96:	7813      	ldrb	r3, [r2, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8001a98:	4930      	ldr	r1, [pc, #192]	; (8001b5c <USB_Istr+0x194>)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	7013      	strb	r3, [r2, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8001aa0:	4788      	blx	r1
 8001aa2:	882b      	ldrh	r3, [r5, #0]
 8001aa4:	e79d      	b.n	80019e2 <USB_Istr+0x1a>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8001aa6:	4828      	ldr	r0, [pc, #160]	; (8001b48 <USB_Istr+0x180>)
 8001aa8:	6803      	ldr	r3, [r0, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	6003      	str	r3, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8001aae:	6803      	ldr	r3, [r0, #0]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d9ce      	bls.n	8001a52 <USB_Istr+0x8a>
 8001ab4:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8001ab8:	3a04      	subs	r2, #4
 8001aba:	f013 0308 	ands.w	r3, r3, #8
 8001abe:	d1c8      	bne.n	8001a52 <USB_Istr+0x8a>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	4d27      	ldr	r5, [pc, #156]	; (8001b60 <USB_Istr+0x198>)
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	4927      	ldr	r1, [pc, #156]	; (8001b64 <USB_Istr+0x19c>)
 8001ac8:	602a      	str	r2, [r5, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001aca:	f851 2b04 	ldr.w	r2, [r1], #4
 8001ace:	ac08      	add	r4, sp, #32
 8001ad0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b292      	uxth	r2, r2
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	f844 2c20 	str.w	r2, [r4, #-32]
 8001ade:	d1f4      	bne.n	8001aca <USB_Istr+0x102>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001ae0:	682b      	ldr	r3, [r5, #0]
        _SetCNTR(wCNTR);
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <USB_Istr+0x1a0>)
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	602b      	str	r3, [r5, #0]
        _SetCNTR(wCNTR);
 8001aea:	682b      	ldr	r3, [r5, #0]
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001aec:	4910      	ldr	r1, [pc, #64]	; (8001b30 <USB_Istr+0x168>)
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	6013      	str	r3, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8001af2:	682b      	ldr	r3, [r5, #0]
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	602b      	str	r3, [r5, #0]
        _SetCNTR(wCNTR);
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	6013      	str	r3, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001b00:	680b      	ldr	r3, [r1, #0]
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <USB_Istr+0x168>)
 8001b04:	055b      	lsls	r3, r3, #21
 8001b06:	d5fb      	bpl.n	8001b00 <USB_Istr+0x138>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8001b08:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8001b0c:	4915      	ldr	r1, [pc, #84]	; (8001b64 <USB_Istr+0x19c>)
 8001b0e:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001b10:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 8001b12:	aa08      	add	r2, sp, #32
 8001b14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001b18:	f852 2c20 	ldr.w	r2, [r2, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001b1c:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 8001b1e:	b292      	uxth	r2, r2
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001b20:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 8001b22:	f841 2b04 	str.w	r2, [r1], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001b26:	d1f4      	bne.n	8001b12 <USB_Istr+0x14a>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6003      	str	r3, [r0, #0]
 8001b2c:	e791      	b.n	8001a52 <USB_Istr+0x8a>
 8001b2e:	bf00      	nop
 8001b30:	40005c44 	.word	0x40005c44
 8001b34:	20000ab4 	.word	0x20000ab4
 8001b38:	20001310 	.word	0x20001310
 8001b3c:	200002dc 	.word	0x200002dc
 8001b40:	08001f01 	.word	0x08001f01
 8001b44:	40005c48 	.word	0x40005c48
 8001b48:	200002d0 	.word	0x200002d0
 8001b4c:	08001e19 	.word	0x08001e19
 8001b50:	2000006c 	.word	0x2000006c
 8001b54:	08002ed9 	.word	0x08002ed9
 8001b58:	200002cc 	.word	0x200002cc
 8001b5c:	08001995 	.word	0x08001995
 8001b60:	200002c8 	.word	0x200002c8
 8001b64:	40005c00 	.word	0x40005c00
 8001b68:	40005c40 	.word	0x40005c40

08001b6c <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <Virtual_Com_Port_SetConfiguration+0x10>)
 8001b6e:	7a9b      	ldrb	r3, [r3, #10]
 8001b70:	b113      	cbz	r3, 8001b78 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8001b72:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <Virtual_Com_Port_SetConfiguration+0x14>)
 8001b74:	2205      	movs	r2, #5
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	200012ec 	.word	0x200012ec
 8001b80:	200002d8 	.word	0x200002d8

08001b84 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8001b84:	4b01      	ldr	r3, [pc, #4]	; (8001b8c <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8001b86:	2204      	movs	r2, #4
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	4770      	bx	lr
 8001b8c:	200002d8 	.word	0x200002d8

08001b90 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <Virtual_Com_Port_Status_In+0x10>)
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	2a20      	cmp	r2, #32
  {
    //USART_Config();
    Request = 0;
 8001b96:	bf04      	itt	eq
 8001b98:	2200      	moveq	r2, #0
 8001b9a:	701a      	strbeq	r2, [r3, #0]
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200002d4 	.word	0x200002d4

08001ba4 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop

08001ba8 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001ba8:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8001baa:	b510      	push	{r4, lr}
 8001bac:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001bae:	d003      	beq.n	8001bb8 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8001bb0:	2820      	cmp	r0, #32
 8001bb2:	d010      	beq.n	8001bd6 <Virtual_Com_Port_Data_Setup+0x2e>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <Virtual_Com_Port_Data_Setup+0x4c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	7813      	ldrb	r3, [r2, #0]
 8001bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bc2:	2b21      	cmp	r3, #33	; 0x21
 8001bc4:	d1f6      	bne.n	8001bb4 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <Virtual_Com_Port_Data_Setup+0x50>)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001bc8:	2400      	movs	r4, #0
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001bca:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001bcc:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4788      	blx	r1
  return USB_SUCCESS;
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001bd6:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <Virtual_Com_Port_Data_Setup+0x4c>)
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	7811      	ldrb	r1, [r2, #0]
 8001bdc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001be0:	2921      	cmp	r1, #33	; 0x21
 8001be2:	d003      	beq.n	8001bec <Virtual_Com_Port_Data_Setup+0x44>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <Virtual_Com_Port_Data_Setup+0x54>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001be6:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001be8:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8001bea:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <Virtual_Com_Port_Data_Setup+0x54>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8001bee:	4904      	ldr	r1, [pc, #16]	; (8001c00 <Virtual_Com_Port_Data_Setup+0x58>)
    }
    Request = SET_LINE_CODING;
 8001bf0:	7003      	strb	r3, [r0, #0]
 8001bf2:	e7e9      	b.n	8001bc8 <Virtual_Com_Port_Data_Setup+0x20>
 8001bf4:	2000130c 	.word	0x2000130c
 8001bf8:	08001c39 	.word	0x08001c39
 8001bfc:	200002d4 	.word	0x200002d4
 8001c00:	08001c51 	.word	0x08001c51

08001c04 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <Virtual_Com_Port_NoData_Setup+0x20>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c0e:	2b21      	cmp	r3, #33	; 0x21
 8001c10:	d001      	beq.n	8001c16 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8001c12:	2002      	movs	r0, #2
}
 8001c14:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8001c16:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001c1a:	2802      	cmp	r0, #2
    {
      return USB_SUCCESS;
 8001c1c:	bf14      	ite	ne
 8001c1e:	2002      	movne	r0, #2
 8001c20:	2000      	moveq	r0, #0
 8001c22:	4770      	bx	lr
 8001c24:	2000130c 	.word	0x2000130c

08001c28 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8001c28:	b109      	cbz	r1, 8001c2e <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8001c2a:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 8001c2c:	4770      	bx	lr
{
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
 8001c2e:	2801      	cmp	r0, #1
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8001c30:	bf8c      	ite	hi
 8001c32:	2002      	movhi	r0, #2
 8001c34:	2000      	movls	r0, #0
 8001c36:	4770      	bx	lr

08001c38 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8001c38:	b108      	cbz	r0, 8001c3e <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8001c3c:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <Virtual_Com_Port_GetLineCoding+0x14>)
 8001c40:	2208      	movs	r2, #8
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	821a      	strh	r2, [r3, #16]
    return NULL;
 8001c46:	4770      	bx	lr
 8001c48:	200000e8 	.word	0x200000e8
 8001c4c:	2000130c 	.word	0x2000130c

08001c50 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8001c50:	b108      	cbz	r0, 8001c56 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8001c54:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8001c56:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <Virtual_Com_Port_SetLineCoding+0x14>)
 8001c58:	2208      	movs	r2, #8
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	821a      	strh	r2, [r3, #16]
    return NULL;
 8001c5e:	4770      	bx	lr
 8001c60:	200000e8 	.word	0x200000e8
 8001c64:	2000130c 	.word	0x2000130c

08001c68 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8001c68:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <Virtual_Com_Port_init+0x1c>)
 8001c6c:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <Virtual_Com_Port_init+0x20>)
 8001c70:	2400      	movs	r4, #0
 8001c72:	681a      	ldr	r2, [r3, #0]

  /* Connect the device */
  PowerOn();
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <Virtual_Com_Port_init+0x24>)

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8001c76:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8001c78:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <Virtual_Com_Port_init+0x28>)
 8001c7c:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <Virtual_Com_Port_init+0x2c>)
 8001c80:	601c      	str	r4, [r3, #0]
 8001c82:	bd10      	pop	{r4, pc}
 8001c84:	08002209 	.word	0x08002209
 8001c88:	2000130c 	.word	0x2000130c
 8001c8c:	08001de5 	.word	0x08001de5
 8001c90:	08002e81 	.word	0x08002e81
 8001c94:	200002d8 	.word	0x200002d8

08001c98 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001c98:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <Virtual_Com_Port_Reset+0xc4>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <Virtual_Com_Port_Reset+0xc8>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001c9c:	681b      	ldr	r3, [r3, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001c9e:	79d2      	ldrb	r2, [r2, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8001ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001ca4:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001ca6:	725a      	strb	r2, [r3, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001ca8:	729c      	strb	r4, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8001caa:	72dc      	strb	r4, [r3, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8001cac:	4620      	mov	r0, r4
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <Virtual_Com_Port_Reset+0xcc>)
 8001cb0:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001cb2:	4e2d      	ldr	r6, [pc, #180]	; (8001d68 <Virtual_Com_Port_Reset+0xd0>)
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cba:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001cbc:	4d2b      	ldr	r5, [pc, #172]	; (8001d6c <Virtual_Com_Port_Reset+0xd4>)
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001cc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8001d88 <Virtual_Com_Port_Reset+0xf0>
 8001cc8:	4620      	mov	r0, r4
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8001cce:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001d8c <Virtual_Com_Port_Reset+0xf4>
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <Virtual_Com_Port_Reset+0xd8>)
 8001cdc:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001cde:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <Virtual_Com_Port_Reset+0xdc>)
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001ce6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001d90 <Virtual_Com_Port_Reset+0xf8>
 8001cea:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <Virtual_Com_Port_Reset+0xe0>)
 8001cee:	4620      	mov	r0, r4
 8001cf0:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	21c0      	movs	r1, #192	; 0xc0
 8001cfc:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	2120      	movs	r1, #32
 8001d02:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8001d04:	4f1d      	ldr	r7, [pc, #116]	; (8001d7c <Virtual_Com_Port_Reset+0xe4>)
 8001d06:	4621      	mov	r1, r4
 8001d08:	2001      	movs	r0, #1
 8001d0a:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001d12:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8001d14:	2002      	movs	r0, #2
 8001d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d1a:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	2002      	movs	r0, #2
 8001d20:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8001d22:	2002      	movs	r0, #2
 8001d24:	2120      	movs	r1, #32
 8001d26:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8001d28:	4621      	mov	r1, r4
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8001d2e:	2003      	movs	r0, #3
 8001d30:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001d34:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8001d36:	2003      	movs	r0, #3
 8001d38:	2140      	movs	r1, #64	; 0x40
 8001d3a:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001d42:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8001d44:	4621      	mov	r1, r4
 8001d46:	2003      	movs	r0, #3
 8001d48:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <Virtual_Com_Port_Reset+0xe8>)
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <Virtual_Com_Port_Reset+0xec>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000130c 	.word	0x2000130c
 8001d60:	0800342c 	.word	0x0800342c
 8001d64:	08002c29 	.word	0x08002c29
 8001d68:	08002c39 	.word	0x08002c39
 8001d6c:	08002c55 	.word	0x08002c55
 8001d70:	08002d0d 	.word	0x08002d0d
 8001d74:	2000006c 	.word	0x2000006c
 8001d78:	08002ce5 	.word	0x08002ce5
 8001d7c:	08002c89 	.word	0x08002c89
 8001d80:	08002ae1 	.word	0x08002ae1
 8001d84:	200002d8 	.word	0x200002d8
 8001d88:	08002d95 	.word	0x08002d95
 8001d8c:	08002d75 	.word	0x08002d75
 8001d90:	08002e11 	.word	0x08002e11

08001d94 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8001d94:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8001d96:	4902      	ldr	r1, [pc, #8]	; (8001da0 <Virtual_Com_Port_GetDeviceDescriptor+0xc>)
 8001d98:	4b02      	ldr	r3, [pc, #8]	; (8001da4 <Virtual_Com_Port_GetDeviceDescriptor+0x10>)
 8001d9a:	4798      	blx	r3
}
 8001d9c:	bd08      	pop	{r3, pc}
 8001d9e:	bf00      	nop
 8001da0:	200000c0 	.word	0x200000c0
 8001da4:	080025e9 	.word	0x080025e9

08001da8 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8001da8:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8001daa:	4902      	ldr	r1, [pc, #8]	; (8001db4 <Virtual_Com_Port_GetConfigDescriptor+0xc>)
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <Virtual_Com_Port_GetConfigDescriptor+0x10>)
 8001dae:	4798      	blx	r3
}
 8001db0:	bd08      	pop	{r3, pc}
 8001db2:	bf00      	nop
 8001db4:	20000064 	.word	0x20000064
 8001db8:	080025e9 	.word	0x080025e9

08001dbc <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8001dbc:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d805      	bhi.n	8001dd4 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8001dc8:	4904      	ldr	r1, [pc, #16]	; (8001ddc <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8001dcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001dd0:	4790      	blx	r2
 8001dd2:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8001dd4:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8001dd6:	bd08      	pop	{r3, pc}
 8001dd8:	2000130c 	.word	0x2000130c
 8001ddc:	200000c8 	.word	0x200000c8
 8001de0:	080025e9 	.word	0x080025e9

08001de4 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8001de4:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8001de6:	2001      	movs	r0, #1
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <PowerOn+0x24>)
 8001dea:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001dec:	4d07      	ldr	r5, [pc, #28]	; (8001e0c <PowerOn+0x28>)
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <PowerOn+0x2c>)
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001df0:	4c08      	ldr	r4, [pc, #32]	; (8001e14 <PowerOn+0x30>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001df2:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001df4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001df8:	2001      	movs	r0, #1
 8001dfa:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001dfc:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8001dfe:	4610      	mov	r0, r2

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001e00:	602a      	str	r2, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001e02:	8021      	strh	r1, [r4, #0]
  _SetCNTR(wInterrupt_Mask);
 8001e04:	6019      	str	r1, [r3, #0]
  
  return USB_SUCCESS;
}
 8001e06:	bd38      	pop	{r3, r4, r5, pc}
 8001e08:	0800211d 	.word	0x0800211d
 8001e0c:	40005c44 	.word	0x40005c44
 8001e10:	40005c40 	.word	0x40005c40
 8001e14:	20001310 	.word	0x20001310

08001e18 <Suspend>:
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8001e18:	2200      	movs	r2, #0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001e1a:	4613      	mov	r3, r2
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8001e1e:	4931      	ldr	r1, [pc, #196]	; (8001ee4 <Suspend+0xcc>)
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8001e20:	b082      	sub	sp, #8
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8001e22:	9201      	str	r2, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8001e24:	680c      	ldr	r4, [r1, #0]
 8001e26:	4830      	ldr	r0, [pc, #192]	; (8001ee8 <Suspend+0xd0>)
 8001e28:	3940      	subs	r1, #64	; 0x40
 8001e2a:	b2a4      	uxth	r4, r4

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001e2c:	f851 2b04 	ldr.w	r2, [r1], #4
 8001e30:	b292      	uxth	r2, r2
 8001e32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001e36:	3301      	adds	r3, #1
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d1f7      	bne.n	8001e2c <Suspend+0x14>
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001e3c:	f444 6280 	orr.w	r2, r4, #1024	; 0x400
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001e40:	f024 0501 	bic.w	r5, r4, #1
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001e44:	4614      	mov	r4, r2
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <Suspend+0xcc>)
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001e48:	b2ad      	uxth	r5, r5
	_SetCNTR(wCNTR);
 8001e4a:	f445 6680 	orr.w	r6, r5, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001e52:	4926      	ldr	r1, [pc, #152]	; (8001eec <Suspend+0xd4>)
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001e54:	601c      	str	r4, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001e56:	601a      	str	r2, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8001e58:	601e      	str	r6, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001e5a:	680b      	ldr	r3, [r1, #0]
 8001e5c:	4a23      	ldr	r2, [pc, #140]	; (8001eec <Suspend+0xd4>)
 8001e5e:	055c      	lsls	r4, r3, #21
 8001e60:	d5fb      	bpl.n	8001e5a <Suspend+0x42>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8001e62:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8001e66:	4922      	ldr	r1, [pc, #136]	; (8001ef0 <Suspend+0xd8>)
 8001e68:	6013      	str	r3, [r2, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001e6a:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 8001e6c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001e70:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 8001e72:	b292      	uxth	r2, r2
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001e74:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 8001e76:	f841 2b04 	str.w	r2, [r1], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001e7a:	d1f7      	bne.n	8001e6c <Suspend+0x54>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <Suspend+0xcc>)
 8001e7e:	f445 6581 	orr.w	r5, r5, #1032	; 0x408
 8001e82:	6015      	str	r5, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8001e84:	6813      	ldr	r3, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001e86:	491b      	ldr	r1, [pc, #108]	; (8001ef4 <Suspend+0xdc>)
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8001e88:	b29b      	uxth	r3, r3
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6013      	str	r3, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001e90:	680b      	ldr	r3, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001e92:	4c19      	ldr	r4, [pc, #100]	; (8001ef8 <Suspend+0xe0>)
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001e94:	9301      	str	r3, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8001e96:	680b      	ldr	r3, [r1, #0]
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8001e98:	4814      	ldr	r0, [pc, #80]	; (8001eec <Suspend+0xd4>)
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8001ea2:	600b      	str	r3, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6023      	str	r3, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8001eac:	6803      	ldr	r3, [r0, #0]
 8001eae:	04db      	lsls	r3, r3, #19
 8001eb0:	d50f      	bpl.n	8001ed2 <Suspend+0xba>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8001eb2:	f64e 75ff 	movw	r5, #61439	; 0xefff
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 8001eb6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8001eba:	6005      	str	r5, [r0, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8001ebc:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 8001ebe:	4003      	ands	r3, r0
 8001ec0:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8001ec2:	9b01      	ldr	r3, [sp, #4]
 8001ec4:	600b      	str	r3, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6023      	str	r3, [r4, #0]
#endif
    }
}
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <Suspend+0xe4>)
 8001ed4:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6023      	str	r3, [r4, #0]
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
#endif
    }
}
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd70      	pop	{r4, r5, r6, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40005c40 	.word	0x40005c40
 8001ee8:	20000abc 	.word	0x20000abc
 8001eec:	40005c44 	.word	0x40005c44
 8001ef0:	40005c00 	.word	0x40005c00
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	e000ed10 	.word	0xe000ed10
 8001efc:	08002241 	.word	0x08002241

08001f00 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8001f00:	b570      	push	{r4, r5, r6, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8001f02:	4c32      	ldr	r4, [pc, #200]	; (8001fcc <Resume+0xcc>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8001f04:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8001f06:	bf18      	it	ne
 8001f08:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8001f0a:	7823      	ldrb	r3, [r4, #0]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d84b      	bhi.n	8001fa8 <Resume+0xa8>
 8001f10:	e8df f003 	tbb	[pc, r3]
 8001f14:	35301f18 	.word	0x35301f18
 8001f18:	033f      	.short	0x033f
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8001f1a:	7863      	ldrb	r3, [r4, #1]
 8001f1c:	492b      	ldr	r1, [pc, #172]	; (8001fcc <Resume+0xcc>)
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001f24:	7863      	ldrb	r3, [r4, #1]
 8001f26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d13e      	bne.n	8001fac <Resume+0xac>
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8001f2e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 8001f32:	4827      	ldr	r0, [pc, #156]	; (8001fd0 <Resume+0xd0>)
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
        remotewakeupon = 0;
 8001f34:	4c27      	ldr	r4, [pc, #156]	; (8001fd4 <Resume+0xd4>)
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 8001f36:	6806      	ldr	r6, [r0, #0]
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8001f38:	2506      	movs	r5, #6
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8001f3a:	4033      	ands	r3, r6
 8001f3c:	6003      	str	r3, [r0, #0]
        ResumeS.eState = RESUME_OFF;
 8001f3e:	700d      	strb	r5, [r1, #0]
        remotewakeupon = 0;
 8001f40:	6022      	str	r2, [r4, #0]
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <Resume+0xd4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d030      	beq.n	8001fae <Resume+0xae>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	7023      	strb	r3, [r4, #0]
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8001f52:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8001f56:	4d1e      	ldr	r5, [pc, #120]	; (8001fd0 <Resume+0xd0>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8001f58:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <Resume+0xd8>)
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8001f5a:	6829      	ldr	r1, [r5, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	602b      	str	r3, [r5, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8001f60:	4790      	blx	r2
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <Resume+0xd4>)
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001f64:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8001f68:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8001f6a:	2201      	movs	r2, #1
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001f6c:	6028      	str	r0, [r5, #0]
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8001f6e:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8001f70:	601a      	str	r2, [r3, #0]
      break;
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8001f74:	2202      	movs	r2, #2
      ResumeS.eState = RESUME_WAIT;
 8001f76:	2303      	movs	r3, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8001f78:	7062      	strb	r2, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8001f7a:	7023      	strb	r3, [r4, #0]
      break;
 8001f7c:	bd70      	pop	{r4, r5, r6, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8001f7e:	7863      	ldrb	r3, [r4, #1]
 8001f80:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <Resume+0xcc>)
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001f88:	7863      	ldrb	r3, [r4, #1]
 8001f8a:	b97b      	cbnz	r3, 8001fac <Resume+0xac>
        ResumeS.eState = RESUME_START;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	7013      	strb	r3, [r2, #0]
 8001f90:	bd70      	pop	{r4, r5, r6, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8001f92:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <Resume+0xd0>)
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 8001f94:	2005      	movs	r0, #5
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8001f96:	6813      	ldr	r3, [r2, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 8001f98:	210a      	movs	r1, #10
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8001f9a:	b29b      	uxth	r3, r3
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	6013      	str	r3, [r2, #0]
      ResumeS.eState = RESUME_ON;
 8001fa2:	7020      	strb	r0, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8001fa4:	7061      	strb	r1, [r4, #1]
      break;
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8001fa8:	2306      	movs	r3, #6
 8001faa:	7023      	strb	r3, [r4, #0]
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8001fae:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8001fb2:	4d07      	ldr	r5, [pc, #28]	; (8001fd0 <Resume+0xd0>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <Resume+0xd8>)
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8001fb6:	6829      	ldr	r1, [r5, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8001fb8:	400b      	ands	r3, r1
 8001fba:	602b      	str	r3, [r5, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8001fbc:	4790      	blx	r2

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001fbe:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
 8001fc2:	2306      	movs	r3, #6
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001fc4:	602a      	str	r2, [r5, #0]
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
 8001fc6:	7023      	strb	r3, [r4, #0]
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000ab8 	.word	0x20000ab8
 8001fd0:	40005c40 	.word	0x40005c40
 8001fd4:	200002e0 	.word	0x200002e0
 8001fd8:	08002069 	.word	0x08002069

08001fdc <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8001fdc:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <USBWakeUp_IRQHandler+0xc>)
 8001fde:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40010414 	.word	0x40010414

08001fec <IntToUnicode>:
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001fec:	b1b2      	cbz	r2, 800201c <IntToUnicode+0x30>
 8001fee:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8001ff0:	b470      	push	{r4, r5, r6}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001ff2:	461e      	mov	r6, r3
 8001ff4:	1e54      	subs	r4, r2, #1
 8001ff6:	b2e4      	uxtb	r4, r4
 8001ff8:	3401      	adds	r4, #1
 8001ffa:	0064      	lsls	r4, r4, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8001ffc:	0f02      	lsrs	r2, r0, #28
 8001ffe:	2a09      	cmp	r2, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002000:	f102 0530 	add.w	r5, r2, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8002004:	bf86      	itte	hi
 8002006:	3237      	addhi	r2, #55	; 0x37
 8002008:	54ca      	strbhi	r2, [r1, r3]
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800200a:	54cd      	strbls	r5, [r1, r3]
 800200c:	18ca      	adds	r2, r1, r3
 800200e:	3302      	adds	r3, #2
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002010:	42a3      	cmp	r3, r4
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8002012:	ea4f 1000 	mov.w	r0, r0, lsl #4
    
    pbuf[ 2* idx + 1] = 0;
 8002016:	7056      	strb	r6, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002018:	d1f0      	bne.n	8001ffc <IntToUnicode+0x10>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 800201a:	bc70      	pop	{r4, r5, r6}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8002020:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 8002022:	4b01      	ldr	r3, [pc, #4]	; (8002028 <USB_LP_IRQHandler+0x8>)
 8002024:	4798      	blx	r3
 8002026:	bd08      	pop	{r3, pc}
 8002028:	080019c9 	.word	0x080019c9

0800202c <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <Set_System+0x18>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002034:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800203c:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	4770      	bx	lr
 8002044:	40011004 	.word	0x40011004

08002048 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8002048:	4905      	ldr	r1, [pc, #20]	; (8002060 <Set_USBClock+0x18>)
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800204a:	4a06      	ldr	r2, [pc, #24]	; (8002064 <Set_USBClock+0x1c>)
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800204c:	680b      	ldr	r3, [r1, #0]
 800204e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002052:	600b      	str	r3, [r1, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8002054:	6813      	ldr	r3, [r2, #0]
 8002056:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021004 	.word	0x40021004
 8002064:	4002101c 	.word	0x4002101c

08002068 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <Leave_LowPowerMode+0x18>)
 800206a:	7a9b      	ldrb	r3, [r3, #10]
 800206c:	b91b      	cbnz	r3, 8002076 <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <Leave_LowPowerMode+0x1c>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002076:	4b03      	ldr	r3, [pc, #12]	; (8002084 <Leave_LowPowerMode+0x1c>)
 8002078:	2205      	movs	r2, #5
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200012ec 	.word	0x200012ec
 8002084:	200002d8 	.word	0x200002d8

08002088 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002088:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <USB_Interrupts_Config+0x6c>)
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <USB_Interrupts_Config+0x70>)
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800208c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8002090:	b510      	push	{r4, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002092:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002094:	681a      	ldr	r2, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002096:	4919      	ldr	r1, [pc, #100]	; (80020fc <USB_Interrupts_Config+0x74>)

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800209c:	601a      	str	r2, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800209e:	680a      	ldr	r2, [r1, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80020a0:	4817      	ldr	r0, [pc, #92]	; (8002100 <USB_Interrupts_Config+0x78>)
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 80020a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020a6:	600a      	str	r2, [r1, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80020a8:	6802      	ldr	r2, [r0, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80020aa:	4c16      	ldr	r4, [pc, #88]	; (8002104 <USB_Interrupts_Config+0x7c>)
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80020ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020b0:	6002      	str	r2, [r0, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80020b2:	688a      	ldr	r2, [r1, #8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80020b4:	2090      	movs	r0, #144	; 0x90
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80020b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ba:	608a      	str	r2, [r1, #8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80020bc:	681a      	ldr	r2, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80020be:	4912      	ldr	r1, [pc, #72]	; (8002108 <USB_Interrupts_Config+0x80>)
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80020c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020c4:	601a      	str	r2, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80020c6:	2200      	movs	r2, #0
 80020c8:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <USB_Interrupts_Config+0x84>)
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80020cc:	4910      	ldr	r1, [pc, #64]	; (8002110 <USB_Interrupts_Config+0x88>)
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80020ce:	6813      	ldr	r3, [r2, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80020d0:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80020d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d6:	6013      	str	r3, [r2, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80020d8:	2200      	movs	r2, #0
 80020da:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80020dc:	490d      	ldr	r1, [pc, #52]	; (8002114 <USB_Interrupts_Config+0x8c>)

	SET_BIT( REG_EXTI_SWIER, 18 );
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <USB_Interrupts_Config+0x90>)
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80020e0:	680b      	ldr	r3, [r1, #0]
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e6:	600b      	str	r3, [r1, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	bd10      	pop	{r4, pc}
 80020f2:	bf00      	nop
 80020f4:	40010414 	.word	0x40010414
 80020f8:	40010400 	.word	0x40010400
 80020fc:	40010404 	.word	0x40010404
 8002100:	40010408 	.word	0x40010408
 8002104:	08000da1 	.word	0x08000da1
 8002108:	08002021 	.word	0x08002021
 800210c:	e000e100 	.word	0xe000e100
 8002110:	08001fdd 	.word	0x08001fdd
 8002114:	e000e104 	.word	0xe000e104
 8002118:	40010410 	.word	0x40010410

0800211c <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <USB_Cable_Config+0x18>)
 800211e:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8002120:	b918      	cbnz	r0, 800212a <USB_Cable_Config+0xe>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8002122:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800212a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	4001100c 	.word	0x4001100c

08002138 <USB_To_USART_Send_Data>:
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8002138:	b181      	cbz	r1, 800215c <USB_To_USART_Send_Data+0x24>
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800213a:	b570      	push	{r4, r5, r6, lr}
 800213c:	4604      	mov	r4, r0
 800213e:	4e08      	ldr	r6, [pc, #32]	; (8002160 <USB_To_USART_Send_Data+0x28>)
 8002140:	b082      	sub	sp, #8
 8002142:	1845      	adds	r5, r0, r1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8002144:	f814 3b01 	ldrb.w	r3, [r4], #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 8002148:	2005      	movs	r0, #5
 800214a:	f10d 0107 	add.w	r1, sp, #7
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800214e:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8002152:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8002154:	42ac      	cmp	r4, r5
 8002156:	d1f5      	bne.n	8002144 <USB_To_USART_Send_Data+0xc>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8002158:	b002      	add	sp, #8
 800215a:	bd70      	pop	{r4, r5, r6, pc}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	08000c95 	.word	0x08000c95

08002164 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8002166:	4d20      	ldr	r5, [pc, #128]	; (80021e8 <Handle_USBAsynchXfer+0x84>)
 8002168:	782b      	ldrb	r3, [r5, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d023      	beq.n	80021b6 <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 800216e:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <Handle_USBAsynchXfer+0x88>)
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002176:	d02c      	beq.n	80021d2 <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8002178:	491d      	ldr	r1, [pc, #116]	; (80021f0 <Handle_USBAsynchXfer+0x8c>)
 800217a:	6809      	ldr	r1, [r1, #0]
 800217c:	428b      	cmp	r3, r1
 800217e:	d02f      	beq.n	80021e0 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8002180:	d81a      	bhi.n	80021b8 <Handle_USBAsynchXfer+0x54>
 8002182:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8002184:	1ac9      	subs	r1, r1, r3
 8002186:	4e1b      	ldr	r6, [pc, #108]	; (80021f4 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8002188:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800218a:	6031      	str	r1, [r6, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800218c:	d91b      	bls.n	80021c6 <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 800218e:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8002190:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8002192:	6013      	str	r3, [r2, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8002194:	6031      	str	r1, [r6, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8002196:	2440      	movs	r4, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800219a:	2601      	movs	r6, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800219c:	4418      	add	r0, r3
 800219e:	21c0      	movs	r1, #192	; 0xc0
 80021a0:	4622      	mov	r2, r4
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80021a4:	702e      	strb	r6, [r5, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80021a6:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 80021a8:	4630      	mov	r0, r6
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <Handle_USBAsynchXfer+0x9c>)
 80021ac:	4621      	mov	r1, r4
 80021ae:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 80021b0:	4630      	mov	r0, r6
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <Handle_USBAsynchXfer+0xa0>)
 80021b4:	4798      	blx	r3
 80021b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80021b8:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 80021bc:	4e0d      	ldr	r6, [pc, #52]	; (80021f4 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80021be:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80021c0:	6031      	str	r1, [r6, #0]
 80021c2:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80021c4:	d8e3      	bhi.n	800218e <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80021c6:	440b      	add	r3, r1
      USART_Rx_length = 0;
 80021c8:	2700      	movs	r7, #0
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80021ca:	6013      	str	r3, [r2, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 80021cc:	b28c      	uxth	r4, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 80021ce:	6037      	str	r7, [r6, #0]
 80021d0:	e7e2      	b.n	8002198 <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80021d4:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80021d6:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80021d8:	6010      	str	r0, [r2, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80021da:	b109      	cbz	r1, 80021e0 <Handle_USBAsynchXfer+0x7c>
 80021dc:	4603      	mov	r3, r0
 80021de:	e7d1      	b.n	8002184 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 80021e0:	2300      	movs	r3, #0
 80021e2:	702b      	strb	r3, [r5, #0]
      return;
 80021e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200002e4 	.word	0x200002e4
 80021ec:	200002ec 	.word	0x200002ec
 80021f0:	200002e8 	.word	0x200002e8
 80021f4:	200002f0 	.word	0x200002f0
 80021f8:	20000adc 	.word	0x20000adc
 80021fc:	08002bd5 	.word	0x08002bd5
 8002200:	08002df5 	.word	0x08002df5
 8002204:	08002cbd 	.word	0x08002cbd

08002208 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8002208:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <Get_SerialNum+0x24>)
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <Get_SerialNum+0x28>)
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 800220e:	6810      	ldr	r0, [r2, #0]
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8002210:	681b      	ldr	r3, [r3, #0]
  Device_Serial1 = *(uint32_t*)ID2;
 8002212:	f852 4c04 	ldr.w	r4, [r2, #-4]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8002216:	1818      	adds	r0, r3, r0
 8002218:	d007      	beq.n	800222a <Get_SerialNum+0x22>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 800221a:	4906      	ldr	r1, [pc, #24]	; (8002234 <Get_SerialNum+0x2c>)
 800221c:	2208      	movs	r2, #8
 800221e:	4d06      	ldr	r5, [pc, #24]	; (8002238 <Get_SerialNum+0x30>)
 8002220:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8002222:	4620      	mov	r0, r4
 8002224:	4905      	ldr	r1, [pc, #20]	; (800223c <Get_SerialNum+0x34>)
 8002226:	2204      	movs	r2, #4
 8002228:	47a8      	blx	r5
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	1ffff7f0 	.word	0x1ffff7f0
 8002230:	1ffff7e8 	.word	0x1ffff7e8
 8002234:	20000012 	.word	0x20000012
 8002238:	08001fed 	.word	0x08001fed
 800223c:	20000022 	.word	0x20000022

08002240 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8002240:	bf30      	wfi
 8002242:	4770      	bx	lr

08002244 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8002244:	b508      	push	{r3, lr}
  if (Length == 0)
 8002246:	b138      	cbz	r0, 8002258 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <Standard_GetConfiguration+0x20>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <Standard_GetConfiguration+0x24>)
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	300a      	adds	r0, #10
}
 8002256:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <Standard_GetConfiguration+0x24>)
 800225a:	2201      	movs	r2, #1
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8002260:	bd08      	pop	{r3, pc}
 8002262:	bf00      	nop
 8002264:	20001308 	.word	0x20001308
 8002268:	2000130c 	.word	0x2000130c

0800226c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800226c:	b508      	push	{r3, lr}
  if (Length == 0)
 800226e:	b138      	cbz	r0, 8002280 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <Standard_GetInterface+0x20>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <Standard_GetInterface+0x24>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	300c      	adds	r0, #12
}
 800227e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <Standard_GetInterface+0x24>)
 8002282:	2201      	movs	r2, #1
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8002288:	bd08      	pop	{r3, pc}
 800228a:	bf00      	nop
 800228c:	20001308 	.word	0x20001308
 8002290:	2000130c 	.word	0x2000130c

08002294 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8002294:	b508      	push	{r3, lr}
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <Standard_GetStatus+0x80>)
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
 8002298:	2800      	cmp	r0, #0
 800229a:	d032      	beq.n	8002302 <Standard_GetStatus+0x6e>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800229c:	481e      	ldr	r0, [pc, #120]	; (8002318 <Standard_GetStatus+0x84>)

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800229e:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80022a0:	2100      	movs	r1, #0
 80022a2:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80022a4:	7813      	ldrb	r3, [r2, #0]
 80022a6:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 80022aa:	d016      	beq.n	80022da <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d027      	beq.n	8002300 <Standard_GetStatus+0x6c>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d124      	bne.n	80022fe <Standard_GetStatus+0x6a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80022b4:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 80022b6:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022c0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80022c4:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80022c6:	681b      	ldr	r3, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80022c8:	d41f      	bmi.n	800230a <Standard_GetStatus+0x76>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80022ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80022ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d2:	d10e      	bne.n	80022f2 <Standard_GetStatus+0x5e>
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 80022d4:	2301      	movs	r3, #1
 80022d6:	7003      	strb	r3, [r0, #0]
 80022d8:	e00b      	b.n	80022f2 <Standard_GetStatus+0x5e>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 80022da:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80022dc:	0693      	lsls	r3, r2, #26
 80022de:	bf54      	ite	pl
 80022e0:	7803      	ldrbpl	r3, [r0, #0]
 80022e2:	2302      	movmi	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80022e4:	0651      	lsls	r1, r2, #25
    {
      SetBit(StatusInfo0, 0);
 80022e6:	bf4c      	ite	mi
 80022e8:	f043 0301 	orrmi.w	r3, r3, #1
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80022ec:	f023 0301 	bicpl.w	r3, r3, #1
 80022f0:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <Standard_GetStatus+0x88>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 80022fa:	4807      	ldr	r0, [pc, #28]	; (8002318 <Standard_GetStatus+0x84>)
 80022fc:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 80022fe:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8002300:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2202      	movs	r2, #2
 8002306:	821a      	strh	r2, [r3, #16]
    return 0;
 8002308:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800230a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800230e:	2b10      	cmp	r3, #16
 8002310:	d1ef      	bne.n	80022f2 <Standard_GetStatus+0x5e>
 8002312:	e7df      	b.n	80022d4 <Standard_GetStatus+0x40>
 8002314:	2000130c 	.word	0x2000130c
 8002318:	200012dc 	.word	0x200012dc
 800231c:	20001308 	.word	0x20001308

08002320 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8002320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8002324:	4f24      	ldr	r7, [pc, #144]	; (80023b8 <DataStageIn+0x98>)
 8002326:	683c      	ldr	r4, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8002328:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 800232a:	7a26      	ldrb	r6, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800232c:	b923      	cbnz	r3, 8002338 <DataStageIn+0x18>
 800232e:	2e04      	cmp	r6, #4
 8002330:	d02a      	beq.n	8002388 <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8002332:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8002334:	2604      	movs	r6, #4
 8002336:	e003      	b.n	8002340 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8002338:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800233a:	42ab      	cmp	r3, r5
 800233c:	d9fa      	bls.n	8002334 <DataStageIn+0x14>
 800233e:	2602      	movs	r6, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8002340:	429d      	cmp	r5, r3
 8002342:	bf28      	it	cs
 8002344:	461d      	movcs	r5, r3
 8002346:	69a3      	ldr	r3, [r4, #24]
 8002348:	4628      	mov	r0, r5
 800234a:	4798      	blx	r3
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <DataStageIn+0x9c>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800234e:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8002350:	2000      	movs	r0, #0
 8002352:	4798      	blx	r3
 8002354:	462a      	mov	r2, r5
 8002356:	4601      	mov	r1, r0
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <DataStageIn+0xa0>)
 800235a:	4640      	mov	r0, r8
 800235c:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 800235e:	4629      	mov	r1, r5
 8002360:	2000      	movs	r0, #0
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <DataStageIn+0xa4>)
 8002364:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8002366:	8a63      	ldrh	r3, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8002368:	8a22      	ldrh	r2, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800236a:	4917      	ldr	r1, [pc, #92]	; (80023c8 <DataStageIn+0xa8>)
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800236c:	1b52      	subs	r2, r2, r5
  pEPinfo->Usb_wOffset += Length;
 800236e:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <DataStageIn+0xac>)
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8002372:	8222      	strh	r2, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8002374:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8002376:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8002378:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800237c:	683c      	ldr	r4, [r7, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800237e:	8008      	strh	r0, [r1, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8002380:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8002382:	7226      	strb	r6, [r4, #8]
 8002384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8002388:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <DataStageIn+0xb0>)
 800238a:	7811      	ldrb	r1, [r2, #0]
 800238c:	2901      	cmp	r1, #1
 800238e:	d006      	beq.n	800239e <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <DataStageIn+0xa8>)
 8002392:	2607      	movs	r6, #7
 8002394:	2210      	movs	r2, #16
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8002396:	7226      	strb	r6, [r4, #8]
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8002398:	801a      	strh	r2, [r3, #0]
 800239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800239e:	480d      	ldr	r0, [pc, #52]	; (80023d4 <DataStageIn+0xb4>)
 80023a0:	490d      	ldr	r1, [pc, #52]	; (80023d8 <DataStageIn+0xb8>)
 80023a2:	6800      	ldr	r0, [r0, #0]
 80023a4:	4d08      	ldr	r5, [pc, #32]	; (80023c8 <DataStageIn+0xa8>)
 80023a6:	b280      	uxth	r0, r0
 80023a8:	4401      	add	r1, r0
 80023aa:	0049      	lsls	r1, r1, #1
 80023ac:	2030      	movs	r0, #48	; 0x30
 80023ae:	800b      	strh	r3, [r1, #0]
 80023b0:	804b      	strh	r3, [r1, #2]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80023b2:	7013      	strb	r3, [r2, #0]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80023b4:	8028      	strh	r0, [r5, #0]
 80023b6:	e7e4      	b.n	8002382 <DataStageIn+0x62>
 80023b8:	2000130c 	.word	0x2000130c
 80023bc:	08002db5 	.word	0x08002db5
 80023c0:	08002bd5 	.word	0x08002bd5
 80023c4:	08002df5 	.word	0x08002df5
 80023c8:	20001314 	.word	0x20001314
 80023cc:	20001312 	.word	0x20001312
 80023d0:	200002f4 	.word	0x200002f4
 80023d4:	40005c50 	.word	0x40005c50
 80023d8:	20003002 	.word	0x20003002

080023dc <Standard_SetConfiguration>:
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <Standard_SetConfiguration+0x30>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <Standard_SetConfiguration+0x34>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	7851      	ldrb	r1, [r2, #1]
 80023e4:	78da      	ldrb	r2, [r3, #3]
 80023e6:	4291      	cmp	r1, r2
 80023e8:	d201      	bcs.n	80023ee <Standard_SetConfiguration+0x12>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80023ea:	2002      	movs	r0, #2
 80023ec:	4770      	bx	lr
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80023ee:	7899      	ldrb	r1, [r3, #2]
 80023f0:	2900      	cmp	r1, #0
 80023f2:	d1fa      	bne.n	80023ea <Standard_SetConfiguration+0xe>
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80023f4:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80023f6:	889c      	ldrh	r4, [r3, #4]
 80023f8:	b10c      	cbz	r4, 80023fe <Standard_SetConfiguration+0x22>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80023fa:	2002      	movs	r0, #2
  }
}
 80023fc:	bd10      	pop	{r4, pc}
  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
    pUser_Standard_Requests->User_SetConfiguration();
 80023fe:	4905      	ldr	r1, [pc, #20]	; (8002414 <Standard_SetConfiguration+0x38>)

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8002400:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8002402:	680b      	ldr	r3, [r1, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4798      	blx	r3
    return USB_SUCCESS;
 8002408:	4620      	mov	r0, r4
 800240a:	bd10      	pop	{r4, pc}
 800240c:	2000130c 	.word	0x2000130c
 8002410:	200000f0 	.word	0x200000f0
 8002414:	20001308 	.word	0x20001308

08002418 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8002418:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <Standard_SetInterface+0x44>)
 800241c:	4c10      	ldr	r4, [pc, #64]	; (8002460 <Standard_SetInterface+0x48>)
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	7958      	ldrb	r0, [r3, #5]
 8002424:	78d9      	ldrb	r1, [r3, #3]
 8002426:	6993      	ldr	r3, [r2, #24]
 8002428:	4798      	blx	r3

  if (pInformation->Current_Configuration != 0)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	7a9a      	ldrb	r2, [r3, #10]
 800242e:	b90a      	cbnz	r2, 8002434 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8002430:	2002      	movs	r0, #2
}
 8002432:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8002434:	2800      	cmp	r0, #0
 8002436:	d1fb      	bne.n	8002430 <Standard_SetInterface+0x18>
 8002438:	791a      	ldrb	r2, [r3, #4]
 800243a:	2a00      	cmp	r2, #0
 800243c:	d1f8      	bne.n	8002430 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 800243e:	789d      	ldrb	r5, [r3, #2]
 8002440:	2d00      	cmp	r5, #0
 8002442:	d1f5      	bne.n	8002430 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <Standard_SetInterface+0x4c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800244c:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800244e:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002450:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8002452:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002454:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8002456:	731a      	strb	r2, [r3, #12]
 8002458:	bd38      	pop	{r3, r4, r5, pc}
 800245a:	bf00      	nop
 800245c:	200012e4 	.word	0x200012e4
 8002460:	2000130c 	.word	0x2000130c
 8002464:	20001308 	.word	0x20001308

08002468 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8002468:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <Standard_ClearFeature+0xc8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002470:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8002474:	d003      	beq.n	800247e <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002476:	2802      	cmp	r0, #2
 8002478:	d006      	beq.n	8002488 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 800247a:	2002      	movs	r0, #2
}
 800247c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800247e:	7a5a      	ldrb	r2, [r3, #9]
 8002480:	f022 0220 	bic.w	r2, r2, #32
 8002484:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8002486:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8002488:	885a      	ldrh	r2, [r3, #2]
 800248a:	2a00      	cmp	r2, #0
 800248c:	d1f6      	bne.n	800247c <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 800248e:	791a      	ldrb	r2, [r3, #4]
 8002490:	2a00      	cmp	r2, #0
 8002492:	d1f3      	bne.n	800247c <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8002494:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8002496:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800249a:	0084      	lsls	r4, r0, #2
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800249c:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800249e:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80024a2:	4d24      	ldr	r5, [pc, #144]	; (8002534 <Standard_ClearFeature+0xcc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80024a4:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80024a8:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80024aa:	782d      	ldrb	r5, [r5, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80024ac:	bf4c      	ite	mi
 80024ae:	f001 0130 	andmi.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80024b2:	f401 5140 	andpl.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80024b6:	42a8      	cmp	r0, r5
 80024b8:	d2df      	bcs.n	800247a <Standard_ClearFeature+0x12>
 80024ba:	2900      	cmp	r1, #0
 80024bc:	d0dd      	beq.n	800247a <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 80024be:	7a9b      	ldrb	r3, [r3, #10]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0da      	beq.n	800247a <Standard_ClearFeature+0x12>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80024c4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80024c8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80024cc:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80024ce:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80024d0:	d509      	bpl.n	80024e6 <Standard_ClearFeature+0x7e>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80024d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d01e      	beq.n	8002518 <Standard_ClearFeature+0xb0>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <Standard_ClearFeature+0xd0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	4798      	blx	r3
    return USB_SUCCESS;
 80024e2:	2000      	movs	r0, #0
 80024e4:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80024e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	d1f4      	bne.n	80024da <Standard_ClearFeature+0x72>
      {
        if (Related_Endpoint == ENDP0)
 80024f0:	b9d8      	cbnz	r0, 800252a <Standard_ClearFeature+0xc2>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <Standard_ClearFeature+0xd4>)
 80024f4:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <Standard_ClearFeature+0xd8>)
 80024fa:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	b29b      	uxth	r3, r3
 8002508:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800250c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	6023      	str	r3, [r4, #0]
 8002516:	e7e0      	b.n	80024da <Standard_ClearFeature+0x72>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8002518:	b2c4      	uxtb	r4, r0
 800251a:	4620      	mov	r0, r4
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <Standard_ClearFeature+0xdc>)
 800251e:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8002520:	4620      	mov	r0, r4
 8002522:	2130      	movs	r1, #48	; 0x30
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <Standard_ClearFeature+0xe0>)
 8002526:	4798      	blx	r3
 8002528:	e7d7      	b.n	80024da <Standard_ClearFeature+0x72>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <Standard_ClearFeature+0xe4>)
 800252c:	4798      	blx	r3
 800252e:	e7e5      	b.n	80024fc <Standard_ClearFeature+0x94>
 8002530:	2000130c 	.word	0x2000130c
 8002534:	200000f0 	.word	0x200000f0
 8002538:	20001308 	.word	0x20001308
 800253c:	2000006c 	.word	0x2000006c
 8002540:	08002e11 	.word	0x08002e11
 8002544:	08002d51 	.word	0x08002d51
 8002548:	08002c55 	.word	0x08002c55
 800254c:	08002d2d 	.word	0x08002d2d

08002550 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8002550:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <Standard_SetEndPointFeature+0x8c>)
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	7942      	ldrb	r2, [r0, #5]
  rEP = wIndex0 & ~0x80;
 8002558:	f022 0180 	bic.w	r1, r2, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800255c:	008c      	lsls	r4, r1, #2

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800255e:	0615      	lsls	r5, r2, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002560:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8002564:	4d1e      	ldr	r5, [pc, #120]	; (80025e0 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002566:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800256a:	681b      	ldr	r3, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800256c:	782d      	ldrb	r5, [r5, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800256e:	bf4c      	ite	mi
 8002570:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8002574:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8002578:	42a9      	cmp	r1, r5
 800257a:	d301      	bcc.n	8002580 <Standard_SetEndPointFeature+0x30>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 800257c:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800257e:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8002580:	8841      	ldrh	r1, [r0, #2]
 8002582:	2900      	cmp	r1, #0
 8002584:	d1fa      	bne.n	800257c <Standard_SetEndPointFeature+0x2c>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f8      	beq.n	800257c <Standard_SetEndPointFeature+0x2c>
      || pInformation->Current_Configuration == 0)
 800258a:	7a83      	ldrb	r3, [r0, #10]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f5      	beq.n	800257c <Standard_SetEndPointFeature+0x2c>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8002590:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002594:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002598:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800259a:	6823      	ldr	r3, [r4, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800259c:	d511      	bpl.n	80025c2 <Standard_SetEndPointFeature+0x72>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800259e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f083 0310 	eor.w	r3, r3, #16
 80025ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b4:	6023      	str	r3, [r4, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <Standard_SetEndPointFeature+0x94>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4798      	blx	r3
  return USB_SUCCESS;
 80025be:	2000      	movs	r0, #0
 80025c0:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80025c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d8:	6023      	str	r3, [r4, #0]
 80025da:	e7ec      	b.n	80025b6 <Standard_SetEndPointFeature+0x66>
 80025dc:	2000130c 	.word	0x2000130c
 80025e0:	200000f0 	.word	0x200000f0
 80025e4:	20001308 	.word	0x20001308

080025e8 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <Standard_GetDescriptorData+0x18>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 80025ee:	b110      	cbz	r0, 80025f6 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 80025f0:	6808      	ldr	r0, [r1, #0]
 80025f2:	4410      	add	r0, r2
}
 80025f4:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80025f6:	8889      	ldrh	r1, [r1, #4]
 80025f8:	1a8a      	subs	r2, r1, r2
 80025fa:	821a      	strh	r2, [r3, #16]
    return 0;
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	2000130c 	.word	0x2000130c

08002604 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8002604:	b510      	push	{r4, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <Post0_Process+0x34>)
 8002608:	2000      	movs	r0, #0
 800260a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <Post0_Process+0x38>)
 8002610:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <Post0_Process+0x3c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	7a18      	ldrb	r0, [r3, #8]
 8002618:	2808      	cmp	r0, #8
 800261a:	d106      	bne.n	800262a <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <Post0_Process+0x40>)
    vSetEPTxStatus(EP_TX_STALL);
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <Post0_Process+0x44>)
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 8002620:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8002624:	2210      	movs	r2, #16
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 8002626:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8002628:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800262a:	f1a0 0009 	sub.w	r0, r0, #9
 800262e:	fab0 f080 	clz	r0, r0
 8002632:	0940      	lsrs	r0, r0, #5
 8002634:	bd10      	pop	{r4, pc}
 8002636:	bf00      	nop
 8002638:	2000006c 	.word	0x2000006c
 800263c:	08002e11 	.word	0x08002e11
 8002640:	2000130c 	.word	0x2000130c
 8002644:	20001312 	.word	0x20001312
 8002648:	20001314 	.word	0x20001314

0800264c <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800264c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800264e:	4ba1      	ldr	r3, [pc, #644]	; (80028d4 <Setup0_Process+0x288>)

  if (pInformation->ControlState != PAUSE)
 8002650:	4ea1      	ldr	r6, [pc, #644]	; (80028d8 <Setup0_Process+0x28c>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002652:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8002654:	6834      	ldr	r4, [r6, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002656:	4ba1      	ldr	r3, [pc, #644]	; (80028dc <Setup0_Process+0x290>)
 8002658:	b292      	uxth	r2, r2
 800265a:	4413      	add	r3, r2

  if (pInformation->ControlState != PAUSE)
 800265c:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800265e:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 8002660:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8002662:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002664:	681d      	ldr	r5, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8002666:	d047      	beq.n	80026f8 <Setup0_Process+0xac>
 8002668:	b2ad      	uxth	r5, r5
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800266a:	006d      	lsls	r5, r5, #1
 800266c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002670:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8002674:	782b      	ldrb	r3, [r5, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8002676:	4f9a      	ldr	r7, [pc, #616]	; (80028e0 <Setup0_Process+0x294>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8002678:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800267a:	786b      	ldrb	r3, [r5, #1]
 800267c:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800267e:	88a8      	ldrh	r0, [r5, #4]
 8002680:	47b8      	blx	r7
 8002682:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8002684:	8928      	ldrh	r0, [r5, #8]
 8002686:	6834      	ldr	r4, [r6, #0]
 8002688:	47b8      	blx	r7
 800268a:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800268c:	89ab      	ldrh	r3, [r5, #12]
 800268e:	6834      	ldr	r4, [r6, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8002690:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8002692:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8002694:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002696:	2b00      	cmp	r3, #0
 8002698:	d033      	beq.n	8002702 <Setup0_Process+0xb6>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800269a:	7860      	ldrb	r0, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800269c:	2806      	cmp	r0, #6
 800269e:	f000 808a 	beq.w	80027b6 <Setup0_Process+0x16a>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d149      	bne.n	800273a <Setup0_Process+0xee>
 80026a6:	8861      	ldrh	r1, [r4, #2]
 80026a8:	2900      	cmp	r1, #0
 80026aa:	f000 8098 	beq.w	80027de <Setup0_Process+0x192>
 80026ae:	4d8d      	ldr	r5, [pc, #564]	; (80028e4 <Setup0_Process+0x298>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80026b6:	2803      	cmp	r0, #3
 80026b8:	f000 80ea 	beq.w	8002890 <Setup0_Process+0x244>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80026bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026c0:	6833      	ldr	r3, [r6, #0]
 80026c2:	8a1a      	ldrh	r2, [r3, #16]
 80026c4:	428a      	cmp	r2, r1
 80026c6:	d048      	beq.n	800275a <Setup0_Process+0x10e>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80026c8:	2802      	cmp	r0, #2
 80026ca:	d00f      	beq.n	80026ec <Setup0_Process+0xa0>
 80026cc:	b172      	cbz	r2, 80026ec <Setup0_Process+0xa0>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80026ce:	f993 1000 	ldrsb.w	r1, [r3]
 80026d2:	2900      	cmp	r1, #0
 80026d4:	f2c0 80b8 	blt.w	8002848 <Setup0_Process+0x1fc>
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80026d8:	4983      	ldr	r1, [pc, #524]	; (80028e8 <Setup0_Process+0x29c>)
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80026da:	2203      	movs	r2, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80026dc:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80026e0:	8008      	strh	r0, [r1, #0]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80026e2:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80026e4:	4b81      	ldr	r3, [pc, #516]	; (80028ec <Setup0_Process+0x2a0>)
 80026e6:	4798      	blx	r3
}
 80026e8:	b003      	add	sp, #12
 80026ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80026ec:	2208      	movs	r2, #8
 80026ee:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80026f0:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <Setup0_Process+0x2a0>)
 80026f2:	4798      	blx	r3
}
 80026f4:	b003      	add	sp, #12
 80026f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f8:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 80026fa:	2201      	movs	r2, #1
 80026fc:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1cb      	bne.n	800269a <Setup0_Process+0x4e>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002702:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8002704:	7865      	ldrb	r5, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002706:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800270a:	d02c      	beq.n	8002766 <Setup0_Process+0x11a>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800270c:	2b01      	cmp	r3, #1
 800270e:	f000 80b2 	beq.w	8002876 <Setup0_Process+0x22a>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002712:	2b02      	cmp	r3, #2
 8002714:	f000 80d5 	beq.w	80028c2 <Setup0_Process+0x276>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8002718:	4b72      	ldr	r3, [pc, #456]	; (80028e4 <Setup0_Process+0x298>)
 800271a:	4628      	mov	r0, r5
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8002722:	2803      	cmp	r0, #3
 8002724:	f000 8110 	beq.w	8002948 <Setup0_Process+0x2fc>
 8002728:	6834      	ldr	r4, [r6, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800272a:	2800      	cmp	r0, #0
 800272c:	d034      	beq.n	8002798 <Setup0_Process+0x14c>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 800272e:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002730:	7223      	strb	r3, [r4, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8002732:	4b6e      	ldr	r3, [pc, #440]	; (80028ec <Setup0_Process+0x2a0>)
 8002734:	4798      	blx	r3
}
 8002736:	b003      	add	sp, #12
 8002738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800273a:	2808      	cmp	r0, #8
 800273c:	d161      	bne.n	8002802 <Setup0_Process+0x1b6>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800273e:	7823      	ldrb	r3, [r4, #0]
 8002740:	065b      	lsls	r3, r3, #25
 8002742:	d1b4      	bne.n	80026ae <Setup0_Process+0x62>
    {
      CopyRoutine = Standard_GetConfiguration;
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <Setup0_Process+0x2a4>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8002746:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002748:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800274a:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800274c:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800274e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002752:	6833      	ldr	r3, [r6, #0]
 8002754:	8a1a      	ldrh	r2, [r3, #16]
 8002756:	428a      	cmp	r2, r1
 8002758:	d1b8      	bne.n	80026cc <Setup0_Process+0x80>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800275a:	2209      	movs	r2, #9
 800275c:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <Setup0_Process+0x2a0>)
 8002760:	4798      	blx	r3
}
 8002762:	b003      	add	sp, #12
 8002764:	bdf0      	pop	{r4, r5, r6, r7, pc}

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8002766:	2d09      	cmp	r5, #9
 8002768:	f000 80e8 	beq.w	800293c <Setup0_Process+0x2f0>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800276c:	2d05      	cmp	r5, #5
 800276e:	f000 8096 	beq.w	800289e <Setup0_Process+0x252>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8002772:	2d03      	cmp	r5, #3
 8002774:	f000 80d0 	beq.w	8002918 <Setup0_Process+0x2cc>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8002778:	2d01      	cmp	r5, #1
 800277a:	d1cd      	bne.n	8002718 <Setup0_Process+0xcc>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800277c:	78e3      	ldrb	r3, [r4, #3]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d1ca      	bne.n	8002718 <Setup0_Process+0xcc>
          && pInformation->USBwIndex == 0
 8002782:	88a3      	ldrh	r3, [r4, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1c7      	bne.n	8002718 <Setup0_Process+0xcc>
          && ValBit(pInformation->Current_Feature, 5))
 8002788:	7a63      	ldrb	r3, [r4, #9]
 800278a:	069f      	lsls	r7, r3, #26
 800278c:	d5c4      	bpl.n	8002718 <Setup0_Process+0xcc>
      {
        Result = Standard_ClearFeature();
 800278e:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <Setup0_Process+0x2a8>)
 8002790:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8002792:	2800      	cmp	r0, #0
 8002794:	d1c0      	bne.n	8002718 <Setup0_Process+0xcc>
 8002796:	6834      	ldr	r4, [r6, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002798:	4a4e      	ldr	r2, [pc, #312]	; (80028d4 <Setup0_Process+0x288>)
 800279a:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <Setup0_Process+0x2ac>)
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	4957      	ldr	r1, [pc, #348]	; (80028fc <Setup0_Process+0x2b0>)
 80027a0:	b292      	uxth	r2, r2
 80027a2:	4413      	add	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2200      	movs	r2, #0
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	805a      	strh	r2, [r3, #2]
 80027ac:	2030      	movs	r0, #48	; 0x30
 80027ae:	2306      	movs	r3, #6
 80027b0:	8008      	strh	r0, [r1, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80027b2:	7223      	strb	r3, [r4, #8]
 80027b4:	e7bd      	b.n	8002732 <Setup0_Process+0xe6>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80027b6:	7823      	ldrb	r3, [r4, #0]
 80027b8:	065d      	lsls	r5, r3, #25
 80027ba:	f47f af78 	bne.w	80026ae <Setup0_Process+0x62>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 80027be:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80027c0:	4d48      	ldr	r5, [pc, #288]	; (80028e4 <Setup0_Process+0x298>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f000 80bd 	beq.w	8002942 <Setup0_Process+0x2f6>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d065      	beq.n	8002898 <Setup0_Process+0x24c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	f47f af6f 	bne.w	80026b0 <Setup0_Process+0x64>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1b5      	bne.n	8002746 <Setup0_Process+0xfa>
 80027da:	2006      	movs	r0, #6
 80027dc:	e768      	b.n	80026b0 <Setup0_Process+0x64>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80027de:	6863      	ldr	r3, [r4, #4]
 80027e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e8:	f47f af61 	bne.w	80026ae <Setup0_Process+0x62>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80027ec:	7820      	ldrb	r0, [r4, #0]
 80027ee:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80027f2:	f040 80ad 	bne.w	8002950 <Setup0_Process+0x304>
        && (pInformation->USBwIndex == 0))
 80027f6:	88a3      	ldrh	r3, [r4, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f47f af58 	bne.w	80026ae <Setup0_Process+0x62>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 80027fe:	4b40      	ldr	r3, [pc, #256]	; (8002900 <Setup0_Process+0x2b4>)
 8002800:	e7a1      	b.n	8002746 <Setup0_Process+0xfa>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8002802:	280a      	cmp	r0, #10
 8002804:	f47f af53 	bne.w	80026ae <Setup0_Process+0x62>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002808:	7823      	ldrb	r3, [r4, #0]
 800280a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800280e:	2b01      	cmp	r3, #1
 8002810:	f47f af4d 	bne.w	80026ae <Setup0_Process+0x62>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8002814:	7aa3      	ldrb	r3, [r4, #10]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f43f af49 	beq.w	80026ae <Setup0_Process+0x62>
 800281c:	8861      	ldrh	r1, [r4, #2]
 800281e:	2900      	cmp	r1, #0
 8002820:	f47f af45 	bne.w	80026ae <Setup0_Process+0x62>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002824:	6863      	ldr	r3, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002826:	4d2f      	ldr	r5, [pc, #188]	; (80028e4 <Setup0_Process+0x298>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	f47f af3e 	bne.w	80026b0 <Setup0_Process+0x64>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002834:	682b      	ldr	r3, [r5, #0]
 8002836:	7960      	ldrb	r0, [r4, #5]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	4798      	blx	r3
 800283c:	2800      	cmp	r0, #0
 800283e:	f040 80c7 	bne.w	80029d0 <Setup0_Process+0x384>
 8002842:	6834      	ldr	r4, [r6, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8002844:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <Setup0_Process+0x2b8>)
 8002846:	e77e      	b.n	8002746 <Setup0_Process+0xfa>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8002848:	88d9      	ldrh	r1, [r3, #6]
 800284a:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800284c:	9801      	ldr	r0, [sp, #4]
 800284e:	4282      	cmp	r2, r0
 8002850:	d817      	bhi.n	8002882 <Setup0_Process+0x236>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8002852:	428a      	cmp	r2, r1
 8002854:	f080 8083 	bcs.w	800295e <Setup0_Process+0x312>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8002858:	4922      	ldr	r1, [pc, #136]	; (80028e4 <Setup0_Process+0x298>)
 800285a:	6809      	ldr	r1, [r1, #0]
 800285c:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8002860:	b281      	uxth	r1, r0
 8002862:	428a      	cmp	r2, r1
 8002864:	f080 8080 	bcs.w	8002968 <Setup0_Process+0x31c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8002868:	4a27      	ldr	r2, [pc, #156]	; (8002908 <Setup0_Process+0x2bc>)
 800286a:	2000      	movs	r0, #0
 800286c:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800286e:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8002870:	4b26      	ldr	r3, [pc, #152]	; (800290c <Setup0_Process+0x2c0>)
 8002872:	4798      	blx	r3
 8002874:	e73c      	b.n	80026f0 <Setup0_Process+0xa4>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8002876:	2d0b      	cmp	r5, #11
 8002878:	f47f af4e 	bne.w	8002718 <Setup0_Process+0xcc>
    {
      Result = Standard_SetInterface();
 800287c:	4b24      	ldr	r3, [pc, #144]	; (8002910 <Setup0_Process+0x2c4>)
 800287e:	4798      	blx	r3
 8002880:	e787      	b.n	8002792 <Setup0_Process+0x146>
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <Setup0_Process+0x298>)
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8002884:	9901      	ldr	r1, [sp, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	8219      	strh	r1, [r3, #16]
 800288a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800288e:	e7ee      	b.n	800286e <Setup0_Process+0x222>
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
    {
      pInformation->ControlState = PAUSE;
 8002890:	6833      	ldr	r3, [r6, #0]
 8002892:	2209      	movs	r2, #9
 8002894:	721a      	strb	r2, [r3, #8]
 8002896:	e72b      	b.n	80026f0 <Setup0_Process+0xa4>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	e79b      	b.n	80027d6 <Setup0_Process+0x18a>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800289e:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f6ff af43 	blt.w	800272e <Setup0_Process+0xe2>
 80028a8:	78a3      	ldrb	r3, [r4, #2]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f47f af3f 	bne.w	800272e <Setup0_Process+0xe2>
          || (pInformation->USBwIndex != 0)
 80028b0:	88a3      	ldrh	r3, [r4, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f47f af3b 	bne.w	800272e <Setup0_Process+0xe2>
          || (pInformation->Current_Configuration != 0))
 80028b8:	7aa3      	ldrb	r3, [r4, #10]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f43f af6c 	beq.w	8002798 <Setup0_Process+0x14c>
 80028c0:	e735      	b.n	800272e <Setup0_Process+0xe2>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80028c2:	2d01      	cmp	r5, #1
 80028c4:	f43f af63 	beq.w	800278e <Setup0_Process+0x142>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80028c8:	2d03      	cmp	r5, #3
 80028ca:	f47f af25 	bne.w	8002718 <Setup0_Process+0xcc>
    {
      Result = Standard_SetEndPointFeature();
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <Setup0_Process+0x2c8>)
 80028d0:	4798      	blx	r3
 80028d2:	e75e      	b.n	8002792 <Setup0_Process+0x146>
 80028d4:	40005c50 	.word	0x40005c50
 80028d8:	2000130c 	.word	0x2000130c
 80028dc:	20003004 	.word	0x20003004
 80028e0:	08002e75 	.word	0x08002e75
 80028e4:	200012e4 	.word	0x200012e4
 80028e8:	20001312 	.word	0x20001312
 80028ec:	08002605 	.word	0x08002605
 80028f0:	08002245 	.word	0x08002245
 80028f4:	08002469 	.word	0x08002469
 80028f8:	20003002 	.word	0x20003002
 80028fc:	20001314 	.word	0x20001314
 8002900:	08002295 	.word	0x08002295
 8002904:	0800226d 	.word	0x0800226d
 8002908:	200002f4 	.word	0x200002f4
 800290c:	08002321 	.word	0x08002321
 8002910:	08002419 	.word	0x08002419
 8002914:	08002551 	.word	0x08002551
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8002918:	78e3      	ldrb	r3, [r4, #3]
 800291a:	2b01      	cmp	r3, #1
 800291c:	f47f aefc 	bne.w	8002718 <Setup0_Process+0xcc>
          && (pInformation->USBwIndex == 0))
 8002920:	88a3      	ldrh	r3, [r4, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f47f aef8 	bne.w	8002718 <Setup0_Process+0xcc>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002928:	7a63      	ldrb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800292a:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <Setup0_Process+0x38c>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800292c:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002930:	6812      	ldr	r2, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002932:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002934:	69d3      	ldr	r3, [r2, #28]
 8002936:	4798      	blx	r3
 8002938:	6834      	ldr	r4, [r6, #0]
 800293a:	e72d      	b.n	8002798 <Setup0_Process+0x14c>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <Setup0_Process+0x390>)
 800293e:	4798      	blx	r3
 8002940:	e727      	b.n	8002792 <Setup0_Process+0x146>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8002942:	682b      	ldr	r3, [r5, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	e746      	b.n	80027d6 <Setup0_Process+0x18a>
 8002948:	6834      	ldr	r4, [r6, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 800294a:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800294c:	7223      	strb	r3, [r4, #8]
 800294e:	e6f0      	b.n	8002732 <Setup0_Process+0xe6>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002950:	2801      	cmp	r0, #1
 8002952:	d030      	beq.n	80029b6 <Setup0_Process+0x36a>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002954:	2802      	cmp	r0, #2
 8002956:	d012      	beq.n	800297e <Setup0_Process+0x332>
 8002958:	4608      	mov	r0, r1
 800295a:	4d21      	ldr	r5, [pc, #132]	; (80029e0 <Setup0_Process+0x394>)
 800295c:	e6a8      	b.n	80026b0 <Setup0_Process+0x64>
 800295e:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <Setup0_Process+0x394>)
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8002966:	e782      	b.n	800286e <Setup0_Process+0x222>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8002968:	fb92 f4f0 	sdiv	r4, r2, r0
 800296c:	fb00 2214 	mls	r2, r0, r4, r2
 8002970:	2a00      	cmp	r2, #0
 8002972:	f47f af7c 	bne.w	800286e <Setup0_Process+0x222>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <Setup0_Process+0x398>)
 8002978:	2001      	movs	r0, #1
 800297a:	7010      	strb	r0, [r2, #0]
 800297c:	e777      	b.n	800286e <Setup0_Process+0x222>
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800297e:	7960      	ldrb	r0, [r4, #5]
 8002980:	f000 020f 	and.w	r2, r0, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002984:	0093      	lsls	r3, r2, #2
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8002986:	0601      	lsls	r1, r0, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800298c:	4916      	ldr	r1, [pc, #88]	; (80029e8 <Setup0_Process+0x39c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800298e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002992:	681b      	ldr	r3, [r3, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002994:	7809      	ldrb	r1, [r1, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002996:	bf4c      	ite	mi
 8002998:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800299c:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80029a0:	428a      	cmp	r2, r1
 80029a2:	d206      	bcs.n	80029b2 <Setup0_Process+0x366>
 80029a4:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 80029a8:	d103      	bne.n	80029b2 <Setup0_Process+0x366>
          && (Status != 0))
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f af27 	bne.w	80027fe <Setup0_Process+0x1b2>
 80029b0:	e67d      	b.n	80026ae <Setup0_Process+0x62>
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80029b2:	2000      	movs	r0, #0
 80029b4:	e67b      	b.n	80026ae <Setup0_Process+0x62>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80029b6:	4d0a      	ldr	r5, [pc, #40]	; (80029e0 <Setup0_Process+0x394>)
 80029b8:	7960      	ldrb	r0, [r4, #5]
 80029ba:	682b      	ldr	r3, [r5, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4798      	blx	r3
 80029c0:	b930      	cbnz	r0, 80029d0 <Setup0_Process+0x384>
          && (pInformation->Current_Configuration != 0))
 80029c2:	6834      	ldr	r4, [r6, #0]
 80029c4:	7aa3      	ldrb	r3, [r4, #10]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f47f af19 	bne.w	80027fe <Setup0_Process+0x1b2>
 80029cc:	7860      	ldrb	r0, [r4, #1]
 80029ce:	e66f      	b.n	80026b0 <Setup0_Process+0x64>
 80029d0:	6833      	ldr	r3, [r6, #0]
 80029d2:	7858      	ldrb	r0, [r3, #1]
 80029d4:	e66c      	b.n	80026b0 <Setup0_Process+0x64>
 80029d6:	bf00      	nop
 80029d8:	20001308 	.word	0x20001308
 80029dc:	080023dd 	.word	0x080023dd
 80029e0:	200012e4 	.word	0x200012e4
 80029e4:	200002f4 	.word	0x200002f4
 80029e8:	200000f0 	.word	0x200000f0

080029ec <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 80029ee:	4d32      	ldr	r5, [pc, #200]	; (8002ab8 <Out0_Process+0xcc>)
 80029f0:	682c      	ldr	r4, [r5, #0]
 80029f2:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d007      	beq.n	8002a08 <Out0_Process+0x1c>
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d005      	beq.n	8002a08 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d008      	beq.n	8002a12 <Out0_Process+0x26>
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d006      	beq.n	8002a12 <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8002a04:	2b07      	cmp	r3, #7
 8002a06:	d036      	beq.n	8002a76 <Out0_Process+0x8a>
 8002a08:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002a0a:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <Out0_Process+0xd0>)
 8002a0e:	4798      	blx	r3
 8002a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8002a12:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8002a14:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8002a16:	b1b3      	cbz	r3, 8002a46 <Out0_Process+0x5a>
 8002a18:	b1b2      	cbz	r2, 8002a48 <Out0_Process+0x5c>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8002a1a:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002a1c:	4296      	cmp	r6, r2
 8002a1e:	bf28      	it	cs
 8002a20:	4616      	movcs	r6, r2
 8002a22:	4630      	mov	r0, r6
 8002a24:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8002a26:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8002a28:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8002a2a:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 8002a2c:	4433      	add	r3, r6
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002a2e:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8002a30:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8002a32:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8002a34:	2000      	movs	r0, #0
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <Out0_Process+0xd4>)
 8002a38:	4798      	blx	r3
 8002a3a:	4632      	mov	r2, r6
 8002a3c:	4601      	mov	r1, r0
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <Out0_Process+0xd8>)
 8002a40:	4638      	mov	r0, r7
 8002a42:	4798      	blx	r3
 8002a44:	8a22      	ldrh	r2, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8002a46:	b9ea      	cbnz	r2, 8002a84 <Out0_Process+0x98>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002a48:	8aa3      	ldrh	r3, [r4, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d029      	beq.n	8002aa2 <Out0_Process+0xb6>
 8002a4e:	491e      	ldr	r1, [pc, #120]	; (8002ac8 <Out0_Process+0xdc>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002a50:	682c      	ldr	r4, [r5, #0]
 8002a52:	2206      	movs	r2, #6
      USB_StatusIn();
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <Out0_Process+0xe0>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002a56:	7222      	strb	r2, [r4, #8]
      USB_StatusIn();
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <Out0_Process+0xe4>)
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	4413      	add	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	805a      	strh	r2, [r3, #2]
 8002a68:	7a23      	ldrb	r3, [r4, #8]
 8002a6a:	2230      	movs	r2, #48	; 0x30
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002a6c:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <Out0_Process+0xd0>)
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8002a70:	800a      	strh	r2, [r1, #0]
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8002a72:	4798      	blx	r3
 8002a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8002a76:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <Out0_Process+0xe8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4798      	blx	r3
 8002a7e:	682c      	ldr	r4, [r5, #0]
 8002a80:	2308      	movs	r3, #8
 8002a82:	e7c2      	b.n	8002a0a <Out0_Process+0x1e>

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <Out0_Process+0xec>)
    SetEPTxCount(ENDP0, 0);
 8002a86:	2000      	movs	r0, #0
 8002a88:	4601      	mov	r1, r0
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <Out0_Process+0xf0>)

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002a8c:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8002a90:	8016      	strh	r6, [r2, #0]
    SetEPTxCount(ENDP0, 0);
 8002a92:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002a94:	8a23      	ldrh	r3, [r4, #16]
 8002a96:	8aa2      	ldrh	r2, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002a98:	490b      	ldr	r1, [pc, #44]	; (8002ac8 <Out0_Process+0xdc>)
 8002a9a:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002a9c:	429a      	cmp	r2, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002a9e:	8008      	strh	r0, [r1, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002aa0:	d803      	bhi.n	8002aaa <Out0_Process+0xbe>
  {
    pInformation->ControlState = OUT_DATA;
 8002aa2:	682c      	ldr	r4, [r5, #0]
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	7223      	strb	r3, [r4, #8]
 8002aa8:	e7af      	b.n	8002a0a <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0d0      	beq.n	8002a50 <Out0_Process+0x64>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8002aae:	682c      	ldr	r4, [r5, #0]
 8002ab0:	2305      	movs	r3, #5
 8002ab2:	7223      	strb	r3, [r4, #8]
 8002ab4:	e7a9      	b.n	8002a0a <Out0_Process+0x1e>
 8002ab6:	bf00      	nop
 8002ab8:	2000130c 	.word	0x2000130c
 8002abc:	08002605 	.word	0x08002605
 8002ac0:	08002dd5 	.word	0x08002dd5
 8002ac4:	08002c09 	.word	0x08002c09
 8002ac8:	20001314 	.word	0x20001314
 8002acc:	40005c50 	.word	0x40005c50
 8002ad0:	20003002 	.word	0x20003002
 8002ad4:	200012e4 	.word	0x200012e4
 8002ad8:	20001312 	.word	0x20001312
 8002adc:	08002df5 	.word	0x08002df5

08002ae0 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8002ae0:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <SetDeviceAddress+0x34>)
 8002ae4:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002ae6:	b17e      	cbz	r6, 8002b08 <SetDeviceAddress+0x28>
 8002ae8:	4c0b      	ldr	r4, [pc, #44]	; (8002b18 <SetDeviceAddress+0x38>)
 8002aea:	2200      	movs	r2, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002aec:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002af0:	6825      	ldr	r5, [r4, #0]
 8002af2:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8002af6:	402b      	ands	r3, r5
 8002af8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002afc:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002afe:	430b      	orrs	r3, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002b00:	4296      	cmp	r6, r2
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002b02:	f844 3b04 	str.w	r3, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002b06:	d1f1      	bne.n	8002aec <SetDeviceAddress+0xc>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SetDeviceAddress+0x3c>)
 8002b0a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002b0e:	6018      	str	r0, [r3, #0]
}
 8002b10:	bc70      	pop	{r4, r5, r6}
 8002b12:	4770      	bx	lr
 8002b14:	200000f0 	.word	0x200000f0
 8002b18:	40005c00 	.word	0x40005c00
 8002b1c:	40005c4c 	.word	0x40005c4c

08002b20 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8002b20:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8002b22:	4c17      	ldr	r4, [pc, #92]	; (8002b80 <In0_Process+0x60>)
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8002b28:	2a02      	cmp	r2, #2
 8002b2a:	d015      	beq.n	8002b58 <In0_Process+0x38>
 8002b2c:	2a04      	cmp	r2, #4
 8002b2e:	d013      	beq.n	8002b58 <In0_Process+0x38>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8002b30:	2a06      	cmp	r2, #6
 8002b32:	d004      	beq.n	8002b3e <In0_Process+0x1e>
 8002b34:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002b36:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <In0_Process+0x64>)
 8002b3a:	4798      	blx	r3
}
 8002b3c:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8002b3e:	785a      	ldrb	r2, [r3, #1]
 8002b40:	2a05      	cmp	r2, #5
 8002b42:	d011      	beq.n	8002b68 <In0_Process+0x48>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <In0_Process+0x68>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4798      	blx	r3
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002b50:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <In0_Process+0x64>)
 8002b54:	4798      	blx	r3
}
 8002b56:	bd10      	pop	{r4, pc}
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <In0_Process+0x6c>)
 8002b5a:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	7a1a      	ldrb	r2, [r3, #8]
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002b60:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <In0_Process+0x64>)
 8002b64:	4798      	blx	r3
}
 8002b66:	bd10      	pop	{r4, pc}
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8002b68:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8002b6a:	0652      	lsls	r2, r2, #25
 8002b6c:	d1ea      	bne.n	8002b44 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8002b6e:	78d8      	ldrb	r0, [r3, #3]
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <In0_Process+0x70>)
 8002b72:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <In0_Process+0x74>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4798      	blx	r3
 8002b7c:	e7e2      	b.n	8002b44 <In0_Process+0x24>
 8002b7e:	bf00      	nop
 8002b80:	2000130c 	.word	0x2000130c
 8002b84:	08002605 	.word	0x08002605
 8002b88:	200012e4 	.word	0x200012e4
 8002b8c:	08002321 	.word	0x08002321
 8002b90:	08002ae1 	.word	0x08002ae1
 8002b94:	20001308 	.word	0x20001308

08002b98 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8002b9c:	b470      	push	{r4, r5, r6}
  pInformation = &Device_Info;
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <USB_Init+0x20>)
 8002ba0:	4e07      	ldr	r6, [pc, #28]	; (8002bc0 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002ba2:	4c08      	ldr	r4, [pc, #32]	; (8002bc4 <USB_Init+0x28>)
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <USB_Init+0x2c>)
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 8002ba6:	2502      	movs	r5, #2
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8002ba8:	4908      	ldr	r1, [pc, #32]	; (8002bcc <USB_Init+0x30>)
 8002baa:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <USB_Init+0x34>)
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 8002bac:	7215      	strb	r5, [r2, #8]
  pProperty = &Device_Property;
 8002bae:	6023      	str	r3, [r4, #0]
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8002bb0:	6032      	str	r2, [r6, #0]
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
  /* Initialize devices one by one */
  pProperty->Init();
 8002bb2:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8002bb4:	6008      	str	r0, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
}
 8002bb6:	bc70      	pop	{r4, r5, r6}
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
  /* Initialize devices one by one */
  pProperty->Init();
 8002bb8:	4718      	bx	r3
 8002bba:	bf00      	nop
 8002bbc:	200012ec 	.word	0x200012ec
 8002bc0:	2000130c 	.word	0x2000130c
 8002bc4:	200012e4 	.word	0x200012e4
 8002bc8:	2000006c 	.word	0x2000006c
 8002bcc:	20001308 	.word	0x20001308
 8002bd0:	2000009c 	.word	0x2000009c

08002bd4 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002bd4:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002bd8:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002bda:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 8002bde:	1052      	asrs	r2, r2, #1
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002be0:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 8002be4:	d00f      	beq.n	8002c06 <UserToPMABufferCopy+0x32>
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002be6:	b430      	push	{r4, r5}
 8002be8:	3002      	adds	r0, #2
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002bea:	2300      	movs	r3, #0
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002bec:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002bf0:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8002bf4:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002bf6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8002bfa:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8002bfe:	3301      	adds	r3, #1
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1f3      	bne.n	8002bec <UserToPMABufferCopy+0x18>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002c04:	bc30      	pop	{r4, r5}
 8002c06:	4770      	bx	lr

08002c08 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002c08:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002c0c:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002c0e:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 8002c12:	1052      	asrs	r2, r2, #1
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002c14:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 8002c18:	d005      	beq.n	8002c26 <PMAToUserBufferCopy+0x1e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002c1a:	f851 3b04 	ldr.w	r3, [r1], #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002c1e:	3a01      	subs	r2, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002c20:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002c24:	d1f9      	bne.n	8002c1a <PMAToUserBufferCopy+0x12>
 8002c26:	4770      	bx	lr

08002c28 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8002c28:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002c2c:	4a01      	ldr	r2, [pc, #4]	; (8002c34 <SetBTABLE+0xc>)
 8002c2e:	4003      	ands	r3, r0
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4770      	bx	lr
 8002c34:	40005c50 	.word	0x40005c50

08002c38 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8002c38:	0080      	lsls	r0, r0, #2
 8002c3a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002c3e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002c42:	6803      	ldr	r3, [r0, #0]
 8002c44:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4c:	4319      	orrs	r1, r3
 8002c4e:	b289      	uxth	r1, r1
 8002c50:	6001      	str	r1, [r0, #0]
 8002c52:	4770      	bx	lr

08002c54 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8002c54:	0080      	lsls	r0, r0, #2
 8002c56:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002c5a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002c5e:	6803      	ldr	r3, [r0, #0]
 8002c60:	06ca      	lsls	r2, r1, #27
 8002c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	bf48      	it	mi
 8002c6e:	f083 0310 	eormi.w	r3, r3, #16
 8002c72:	068a      	lsls	r2, r1, #26
 8002c74:	bf48      	it	mi
 8002c76:	f083 0320 	eormi.w	r3, r3, #32
 8002c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c82:	6003      	str	r3, [r0, #0]
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8002c88:	0080      	lsls	r0, r0, #2
 8002c8a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002c8e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	04ca      	lsls	r2, r1, #19
 8002c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	bf48      	it	mi
 8002ca2:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8002ca6:	048a      	lsls	r2, r1, #18
 8002ca8:	bf48      	it	mi
 8002caa:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8002cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb6:	6003      	str	r3, [r0, #0]
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop

08002cbc <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8002cbc:	0080      	lsls	r0, r0, #2
 8002cbe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002cc2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002cc6:	6803      	ldr	r3, [r0, #0]
 8002cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cde:	6003      	str	r3, [r0, #0]
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8002ce4:	0080      	lsls	r0, r0, #2
 8002ce6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002cea:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002cee:	6803      	ldr	r3, [r0, #0]
 8002cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d06:	6003      	str	r3, [r0, #0]
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop

08002d0c <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8002d0c:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002d10:	0080      	lsls	r0, r0, #2
 8002d12:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002d16:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002d1a:	6803      	ldr	r3, [r0, #0]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d26:	6003      	str	r3, [r0, #0]
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8002d2c:	0080      	lsls	r0, r0, #2
 8002d2e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002d32:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002d36:	6803      	ldr	r3, [r0, #0]
 8002d38:	045b      	lsls	r3, r3, #17
 8002d3a:	d508      	bpl.n	8002d4e <ClearDTOG_RX+0x22>
 8002d3c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002d40:	6802      	ldr	r2, [r0, #0]
 8002d42:	4013      	ands	r3, r2
 8002d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d4c:	6003      	str	r3, [r0, #0]
 8002d4e:	4770      	bx	lr

08002d50 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8002d50:	0080      	lsls	r0, r0, #2
 8002d52:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002d56:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	065b      	lsls	r3, r3, #25
 8002d5e:	d508      	bpl.n	8002d72 <ClearDTOG_TX+0x22>
 8002d60:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002d64:	6802      	ldr	r2, [r0, #0]
 8002d66:	4013      	ands	r3, r2
 8002d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d70:	6003      	str	r3, [r0, #0]
 8002d72:	4770      	bx	lr

08002d74 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <SetEPTxAddr+0x1c>)
 8002d76:	0849      	lsrs	r1, r1, #1
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0049      	lsls	r1, r1, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002d82:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8002d86:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8002d8a:	0040      	lsls	r0, r0, #1
 8002d8c:	6001      	str	r1, [r0, #0]
 8002d8e:	4770      	bx	lr
 8002d90:	40005c50 	.word	0x40005c50

08002d94 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8002d94:	4a05      	ldr	r2, [pc, #20]	; (8002dac <SetEPRxAddr+0x18>)
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <SetEPRxAddr+0x1c>)
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	0849      	lsrs	r1, r1, #1
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002da2:	4403      	add	r3, r0
 8002da4:	0049      	lsls	r1, r1, #1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	6019      	str	r1, [r3, #0]
 8002daa:	4770      	bx	lr
 8002dac:	40005c50 	.word	0x40005c50
 8002db0:	20003004 	.word	0x20003004

08002db4 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <GetEPTxAddr+0x1c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002dbe:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8002dc2:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8002dc6:	0040      	lsls	r0, r0, #1
 8002dc8:	6800      	ldr	r0, [r0, #0]
}
 8002dca:	b280      	uxth	r0, r0
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40005c50 	.word	0x40005c50

08002dd4 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002dd4:	4a05      	ldr	r2, [pc, #20]	; (8002dec <GetEPRxAddr+0x18>)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <GetEPRxAddr+0x1c>)
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	b292      	uxth	r2, r2
 8002ddc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002de0:	4403      	add	r3, r0
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	6818      	ldr	r0, [r3, #0]
}
 8002de6:	b280      	uxth	r0, r0
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40005c50 	.word	0x40005c50
 8002df0:	20003004 	.word	0x20003004

08002df4 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <SetEPTxCount+0x14>)
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <SetEPTxCount+0x18>)
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002e00:	4403      	add	r3, r0
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	6019      	str	r1, [r3, #0]
 8002e06:	4770      	bx	lr
 8002e08:	40005c50 	.word	0x40005c50
 8002e0c:	20003002 	.word	0x20003002

08002e10 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8002e10:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <SetEPRxCount+0x3c>)
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <SetEPRxCount+0x40>)
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	293e      	cmp	r1, #62	; 0x3e
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002e1e:	4403      	add	r3, r0
 8002e20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e24:	d90a      	bls.n	8002e3c <SetEPRxCount+0x2c>
 8002e26:	094a      	lsrs	r2, r1, #5
 8002e28:	06c8      	lsls	r0, r1, #27
 8002e2a:	bf04      	itt	eq
 8002e2c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002e30:	b292      	uxtheq	r2, r2
 8002e32:	0292      	lsls	r2, r2, #10
 8002e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	4770      	bx	lr
 8002e3c:	084a      	lsrs	r2, r1, #1
 8002e3e:	07c9      	lsls	r1, r1, #31
 8002e40:	bf48      	it	mi
 8002e42:	3201      	addmi	r2, #1
 8002e44:	0292      	lsls	r2, r2, #10
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40005c50 	.word	0x40005c50
 8002e50:	20003006 	.word	0x20003006

08002e54 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8002e54:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <GetEPRxCount+0x18>)
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <GetEPRxCount+0x1c>)
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002e60:	4403      	add	r3, r0
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	6818      	ldr	r0, [r3, #0]
}
 8002e66:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002e6a:	4770      	bx	lr
 8002e6c:	40005c50 	.word	0x40005c50
 8002e70:	20003006 	.word	0x20003006

08002e74 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8002e74:	b2c3      	uxtb	r3, r0
 8002e76:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8002e78:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop

08002e80 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8002e80:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8002e82:	4906      	ldr	r1, [pc, #24]	; (8002e9c <USB_SIL_Init+0x1c>)
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002e84:	4c06      	ldr	r4, [pc, #24]	; (8002ea0 <USB_SIL_Init+0x20>)
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <USB_SIL_Init+0x24>)
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002e88:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 8002e8a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002e8e:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8002e90:	800b      	strh	r3, [r1, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
  return 0;
}
 8002e92:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002e96:	6013      	str	r3, [r2, #0]
  return 0;
}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20001310 	.word	0x20001310
 8002ea0:	40005c44 	.word	0x40005c44
 8002ea4:	40005c40 	.word	0x40005c40

08002ea8 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002ea8:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002eaa:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8002eae:	4628      	mov	r0, r5
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <USB_SIL_Read+0x24>)
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002eb2:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002eb4:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <USB_SIL_Read+0x28>)
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002eb8:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002eba:	4628      	mov	r0, r5
 8002ebc:	4798      	blx	r3
 8002ebe:	4622      	mov	r2, r4
 8002ec0:	4601      	mov	r1, r0
 8002ec2:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <USB_SIL_Read+0x2c>)
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8002ec8:	4620      	mov	r0, r4
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	08002e55 	.word	0x08002e55
 8002ed0:	08002dd5 	.word	0x08002dd5
 8002ed4:	08002c09 	.word	0x08002c09

08002ed8 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8002ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint16_t wEPVal = 0;
 8002edc:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8002ede:	b085      	sub	sp, #20
 8002ee0:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003040 <CTR_LP+0x168>
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002ee4:	4f51      	ldr	r7, [pc, #324]	; (800302c <CTR_LP+0x154>)
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002ee6:	4d52      	ldr	r5, [pc, #328]	; (8003030 <CTR_LP+0x158>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8002ee8:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002eec:	683b      	ldr	r3, [r7, #0]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002eee:	4c51      	ldr	r4, [pc, #324]	; (8003034 <CTR_LP+0x15c>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	f413 4f00 	tst.w	r3, #32768	; 0x8000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8002ef6:	4e50      	ldr	r6, [pc, #320]	; (8003038 <CTR_LP+0x160>)
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002ef8:	4850      	ldr	r0, [pc, #320]	; (800303c <CTR_LP+0x164>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002efa:	f8a8 2000 	strh.w	r2, [r8]
 8002efe:	4950      	ldr	r1, [pc, #320]	; (8003040 <CTR_LP+0x168>)
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002f00:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003030 <CTR_LP+0x158>
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002f04:	f000 808a 	beq.w	800301c <CTR_LP+0x144>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002f08:	880b      	ldrh	r3, [r1, #0]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002f0e:	009a      	lsls	r2, r3, #2
 8002f10:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002f14:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002f18:	7003      	strb	r3, [r0, #0]
    if (EPindex == 0)
 8002f1a:	bb63      	cbnz	r3, 8002f76 <CTR_LP+0x9e>
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8002f1c:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002f20:	6822      	ldr	r2, [r4, #0]
 8002f22:	b292      	uxth	r2, r2
 8002f24:	802a      	strh	r2, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8002f26:	882a      	ldrh	r2, [r5, #0]
 8002f28:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002f2c:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8002f2e:	882a      	ldrh	r2, [r5, #0]
 8002f30:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002f34:	802a      	strh	r2, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f3e:	f083 0320 	eor.w	r3, r3, #32
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4a:	6023      	str	r3, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8002f4c:	880b      	ldrh	r3, [r1, #0]
 8002f4e:	06da      	lsls	r2, r3, #27
 8002f50:	d53c      	bpl.n	8002fcc <CTR_LP+0xf4>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f8ad 300e 	strh.w	r3, [sp, #14]
        
        if ((wEPVal &EP_SETUP) != 0)
 8002f5a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002f5e:	051b      	lsls	r3, r3, #20
 8002f60:	d45f      	bmi.n	8003022 <CTR_LP+0x14a>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8002f62:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002f66:	b21b      	sxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	dabf      	bge.n	8002eec <CTR_LP+0x14>
        {
          _ClearEP_CTR_RX(ENDP0);
 8002f6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f70:	6821      	ldr	r1, [r4, #0]
          Out0_Process();
 8002f72:	4a34      	ldr	r2, [pc, #208]	; (8003044 <CTR_LP+0x16c>)
 8002f74:	e02e      	b.n	8002fd4 <CTR_LP+0xfc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002f76:	6811      	ldr	r1, [r2, #0]
 8002f78:	b289      	uxth	r1, r1
 8002f7a:	f8ad 100e 	strh.w	r1, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 8002f7e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002f82:	b209      	sxth	r1, r1
 8002f84:	2900      	cmp	r1, #0
 8002f86:	db14      	blt.n	8002fb2 <CTR_LP+0xda>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8002f88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	d5ad      	bpl.n	8002eec <CTR_LP+0x14>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002f90:	f648 710f 	movw	r1, #36623	; 0x8f0f
 8002f94:	7802      	ldrb	r2, [r0, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002f96:	482c      	ldr	r0, [pc, #176]	; (8003048 <CTR_LP+0x170>)
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002f98:	0093      	lsls	r3, r2, #2
 8002f9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f9e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002fa2:	681c      	ldr	r4, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002fa4:	3a01      	subs	r2, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002fa6:	4021      	ands	r1, r4
 8002fa8:	6019      	str	r1, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002faa:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8002fae:	4798      	blx	r3
 8002fb0:	e79c      	b.n	8002eec <CTR_LP+0x14>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002fb2:	f640 718f 	movw	r1, #3983	; 0xf8f
 8002fb6:	6816      	ldr	r6, [r2, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8002fb8:	4c24      	ldr	r4, [pc, #144]	; (800304c <CTR_LP+0x174>)
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002fba:	4031      	ands	r1, r6

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002fc2:	6011      	str	r1, [r2, #0]
 8002fc4:	9001      	str	r0, [sp, #4]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8002fc6:	4798      	blx	r3
 8002fc8:	9801      	ldr	r0, [sp, #4]
 8002fca:	e7dd      	b.n	8002f88 <CTR_LP+0xb0>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8002fcc:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002fd0:	6821      	ldr	r1, [r4, #0]
        In0_Process();
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <CTR_LP+0x178>)
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8002fd8:	4790      	blx	r2
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8002fda:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	f8b9 2000 	ldrh.w	r2, [r9]
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	04d4      	lsls	r4, r2, #19
 8002fe8:	f8b9 2000 	ldrh.w	r2, [r9]
 8002fec:	bf48      	it	mi
 8002fee:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8002ff2:	0490      	lsls	r0, r2, #18
 8002ff4:	8832      	ldrh	r2, [r6, #0]
 8002ff6:	bf48      	it	mi
 8002ff8:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8002ffc:	06d1      	lsls	r1, r2, #27
 8002ffe:	8832      	ldrh	r2, [r6, #0]
 8003000:	bf48      	it	mi
 8003002:	f083 0310 	eormi.w	r3, r3, #16
 8003006:	0692      	lsls	r2, r2, #26
 8003008:	bf48      	it	mi
 800300a:	f083 0320 	eormi.w	r3, r3, #32
 800300e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003016:	4a07      	ldr	r2, [pc, #28]	; (8003034 <CTR_LP+0x15c>)
 8003018:	b29b      	uxth	r3, r3
 800301a:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800301c:	b005      	add	sp, #20
 800301e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8003022:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003026:	6821      	ldr	r1, [r4, #0]
          Setup0_Process();
 8003028:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <CTR_LP+0x17c>)
 800302a:	e7d3      	b.n	8002fd4 <CTR_LP+0xfc>
 800302c:	40005c44 	.word	0x40005c44
 8003030:	20001312 	.word	0x20001312
 8003034:	40005c00 	.word	0x40005c00
 8003038:	20001314 	.word	0x20001314
 800303c:	200012e8 	.word	0x200012e8
 8003040:	20000ab4 	.word	0x20000ab4
 8003044:	080029ed 	.word	0x080029ed
 8003048:	2000002c 	.word	0x2000002c
 800304c:	20000048 	.word	0x20000048
 8003050:	08002b21 	.word	0x08002b21
 8003054:	0800264d 	.word	0x0800264d
 8003058:	00006425 	.word	0x00006425
 800305c:	00000a0a 	.word	0x00000a0a
 8003060:	2a2a2a2a 	.word	0x2a2a2a2a
 8003064:	2a2a2a2a 	.word	0x2a2a2a2a
 8003068:	2a2a2a2a 	.word	0x2a2a2a2a
 800306c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003070:	2a2a2a2a 	.word	0x2a2a2a2a
 8003074:	2a2a2a2a 	.word	0x2a2a2a2a
 8003078:	2a2a2a2a 	.word	0x2a2a2a2a
 800307c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003080:	2a2a2a2a 	.word	0x2a2a2a2a
 8003084:	2a2a2a2a 	.word	0x2a2a2a2a
 8003088:	2a2a2a2a 	.word	0x2a2a2a2a
 800308c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003090:	2a2a2a2a 	.word	0x2a2a2a2a
 8003094:	0a2a2a2a 	.word	0x0a2a2a2a
 8003098:	00000000 	.word	0x00000000
 800309c:	20202020 	.word	0x20202020
 80030a0:	20202020 	.word	0x20202020
 80030a4:	20202020 	.word	0x20202020
 80030a8:	20202020 	.word	0x20202020
 80030ac:	20202020 	.word	0x20202020
 80030b0:	64452020 	.word	0x64452020
 80030b4:	30562075 	.word	0x30562075
 80030b8:	2020332e 	.word	0x2020332e
 80030bc:	20202020 	.word	0x20202020
 80030c0:	20202020 	.word	0x20202020
 80030c4:	20202020 	.word	0x20202020
 80030c8:	20202020 	.word	0x20202020
 80030cc:	20202020 	.word	0x20202020
 80030d0:	0a202020 	.word	0x0a202020
 80030d4:	00000000 	.word	0x00000000
 80030d8:	2e31202a 	.word	0x2e31202a
 80030dc:	44454c20 	.word	0x44454c20
 80030e0:	73655420 	.word	0x73655420
 80030e4:	20202074 	.word	0x20202074
 80030e8:	20202020 	.word	0x20202020
 80030ec:	20202020 	.word	0x20202020
 80030f0:	20202020 	.word	0x20202020
 80030f4:	20202020 	.word	0x20202020
 80030f8:	20202020 	.word	0x20202020
 80030fc:	20202020 	.word	0x20202020
 8003100:	20202020 	.word	0x20202020
 8003104:	20202020 	.word	0x20202020
 8003108:	20202020 	.word	0x20202020
 800310c:	0a2a2020 	.word	0x0a2a2020
 8003110:	00000000 	.word	0x00000000
 8003114:	2e32202a 	.word	0x2e32202a
 8003118:	79654b20 	.word	0x79654b20
 800311c:	20646150 	.word	0x20646150
 8003120:	74736554 	.word	0x74736554
 8003124:	20202020 	.word	0x20202020
 8003128:	20202020 	.word	0x20202020
 800312c:	20202020 	.word	0x20202020
 8003130:	20202020 	.word	0x20202020
 8003134:	20202020 	.word	0x20202020
 8003138:	20202020 	.word	0x20202020
 800313c:	20202020 	.word	0x20202020
 8003140:	20202020 	.word	0x20202020
 8003144:	20202020 	.word	0x20202020
 8003148:	0a2a2020 	.word	0x0a2a2020
 800314c:	00000000 	.word	0x00000000
 8003150:	2e33202a 	.word	0x2e33202a
 8003154:	65533720 	.word	0x65533720
 8003158:	65542067 	.word	0x65542067
 800315c:	20207473 	.word	0x20207473
 8003160:	20202020 	.word	0x20202020
 8003164:	20202020 	.word	0x20202020
 8003168:	20202020 	.word	0x20202020
 800316c:	20202020 	.word	0x20202020
 8003170:	20202020 	.word	0x20202020
 8003174:	20202020 	.word	0x20202020
 8003178:	20202020 	.word	0x20202020
 800317c:	20202020 	.word	0x20202020
 8003180:	20202020 	.word	0x20202020
 8003184:	0a2a2020 	.word	0x0a2a2020
 8003188:	00000000 	.word	0x00000000
 800318c:	2e34202a 	.word	0x2e34202a
 8003190:	20202020 	.word	0x20202020
 8003194:	20202020 	.word	0x20202020
 8003198:	20202020 	.word	0x20202020
 800319c:	20202020 	.word	0x20202020
 80031a0:	20202020 	.word	0x20202020
 80031a4:	20202020 	.word	0x20202020
 80031a8:	20202020 	.word	0x20202020
 80031ac:	20202020 	.word	0x20202020
 80031b0:	20202020 	.word	0x20202020
 80031b4:	20202020 	.word	0x20202020
 80031b8:	20202020 	.word	0x20202020
 80031bc:	20202020 	.word	0x20202020
 80031c0:	0a2a2020 	.word	0x0a2a2020
 80031c4:	00000000 	.word	0x00000000
 80031c8:	2e35202a 	.word	0x2e35202a
 80031cc:	20202020 	.word	0x20202020
 80031d0:	20202020 	.word	0x20202020
 80031d4:	20202020 	.word	0x20202020
 80031d8:	20202020 	.word	0x20202020
 80031dc:	20202020 	.word	0x20202020
 80031e0:	20202020 	.word	0x20202020
 80031e4:	20202020 	.word	0x20202020
 80031e8:	20202020 	.word	0x20202020
 80031ec:	20202020 	.word	0x20202020
 80031f0:	20202020 	.word	0x20202020
 80031f4:	20202020 	.word	0x20202020
 80031f8:	20202020 	.word	0x20202020
 80031fc:	0a2a2020 	.word	0x0a2a2020
 8003200:	00000000 	.word	0x00000000
 8003204:	2e36202a 	.word	0x2e36202a
 8003208:	20202020 	.word	0x20202020
 800320c:	20202020 	.word	0x20202020
 8003210:	20202020 	.word	0x20202020
 8003214:	20202020 	.word	0x20202020
 8003218:	20202020 	.word	0x20202020
 800321c:	20202020 	.word	0x20202020
 8003220:	20202020 	.word	0x20202020
 8003224:	20202020 	.word	0x20202020
 8003228:	20202020 	.word	0x20202020
 800322c:	20202020 	.word	0x20202020
 8003230:	20202020 	.word	0x20202020
 8003234:	20202020 	.word	0x20202020
 8003238:	0a2a2020 	.word	0x0a2a2020
 800323c:	00000000 	.word	0x00000000
 8003240:	2e37202a 	.word	0x2e37202a
 8003244:	20202020 	.word	0x20202020
 8003248:	20202020 	.word	0x20202020
 800324c:	20202020 	.word	0x20202020
 8003250:	20202020 	.word	0x20202020
 8003254:	20202020 	.word	0x20202020
 8003258:	20202020 	.word	0x20202020
 800325c:	20202020 	.word	0x20202020
 8003260:	20202020 	.word	0x20202020
 8003264:	20202020 	.word	0x20202020
 8003268:	20202020 	.word	0x20202020
 800326c:	20202020 	.word	0x20202020
 8003270:	20202020 	.word	0x20202020
 8003274:	0a2a2020 	.word	0x0a2a2020
 8003278:	00000000 	.word	0x00000000
 800327c:	2e38202a 	.word	0x2e38202a
 8003280:	20202020 	.word	0x20202020
 8003284:	20202020 	.word	0x20202020
 8003288:	20202020 	.word	0x20202020
 800328c:	20202020 	.word	0x20202020
 8003290:	20202020 	.word	0x20202020
 8003294:	20202020 	.word	0x20202020
 8003298:	20202020 	.word	0x20202020
 800329c:	20202020 	.word	0x20202020
 80032a0:	20202020 	.word	0x20202020
 80032a4:	20202020 	.word	0x20202020
 80032a8:	20202020 	.word	0x20202020
 80032ac:	20202020 	.word	0x20202020
 80032b0:	0a2a2020 	.word	0x0a2a2020
 80032b4:	00000000 	.word	0x00000000
 80032b8:	2e39202a 	.word	0x2e39202a
 80032bc:	20202020 	.word	0x20202020
 80032c0:	20202020 	.word	0x20202020
 80032c4:	20202020 	.word	0x20202020
 80032c8:	20202020 	.word	0x20202020
 80032cc:	20202020 	.word	0x20202020
 80032d0:	20202020 	.word	0x20202020
 80032d4:	20202020 	.word	0x20202020
 80032d8:	20202020 	.word	0x20202020
 80032dc:	20202020 	.word	0x20202020
 80032e0:	20202020 	.word	0x20202020
 80032e4:	20202020 	.word	0x20202020
 80032e8:	20202020 	.word	0x20202020
 80032ec:	0a2a2020 	.word	0x0a2a2020
 80032f0:	00000000 	.word	0x00000000
 80032f4:	2e6d202a 	.word	0x2e6d202a
 80032f8:	654d2020 	.word	0x654d2020
 80032fc:	2020756e 	.word	0x2020756e
 8003300:	20202020 	.word	0x20202020
 8003304:	20202020 	.word	0x20202020
 8003308:	20202020 	.word	0x20202020
 800330c:	20202020 	.word	0x20202020
 8003310:	20202020 	.word	0x20202020
 8003314:	20202020 	.word	0x20202020
 8003318:	20202020 	.word	0x20202020
 800331c:	20202020 	.word	0x20202020
 8003320:	20202020 	.word	0x20202020
 8003324:	20202020 	.word	0x20202020
 8003328:	0a2a2020 	.word	0x0a2a2020
 800332c:	00000000 	.word	0x00000000
 8003330:	00203e3e 	.word	0x00203e3e
 8003334:	5079654b 	.word	0x5079654b
 8003338:	53206461 	.word	0x53206461
 800333c:	74726174 	.word	0x74726174
 8003340:	70203a20 	.word	0x70203a20
 8003344:	73736572 	.word	0x73736572
 8003348:	6f777420 	.word	0x6f777420
 800334c:	79656b20 	.word	0x79656b20
 8003350:	6f742073 	.word	0x6f742073
 8003354:	69786520 	.word	0x69786520
 8003358:	00000a74 	.word	0x00000a74
 800335c:	4b207825 	.word	0x4b207825
 8003360:	72507965 	.word	0x72507965
 8003364:	65737365 	.word	0x65737365
 8003368:	00000a64 	.word	0x00000a64
 800336c:	4b207825 	.word	0x4b207825
 8003370:	65527965 	.word	0x65527965
 8003374:	7361656c 	.word	0x7361656c
 8003378:	000a6465 	.word	0x000a6465
 800337c:	4b207825 	.word	0x4b207825
 8003380:	65527965 	.word	0x65527965
 8003384:	74616570 	.word	0x74616570
 8003388:	746e4320 	.word	0x746e4320
 800338c:	25203a20 	.word	0x25203a20
 8003390:	00000a64 	.word	0x00000a64
 8003394:	2079654b 	.word	0x2079654b
 8003398:	74697845 	.word	0x74697845
 800339c:	0000000a 	.word	0x0000000a
 80033a0:	72616d53 	.word	0x72616d53
 80033a4:	626f5274 	.word	0x626f5274
 80033a8:	4220746f 	.word	0x4220746f
 80033ac:	00000044 	.word	0x00000044
 80033b0:	61726142 	.word	0x61726142
 80033b4:	0000006d 	.word	0x0000006d

080033b8 <Virtual_Com_Port_StringVendor>:
 80033b8:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 80033c8:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 80033d8:	00630069 00000073                       i.c.s...

080033e0 <Virtual_Com_Port_DeviceDescriptor>:
 80033e0:	02000112 40000002 57400483 02010200     .......@..@W....
 80033f0:	00000103                                ....

080033f4 <Virtual_Com_Port_StringLangID>:
 80033f4:	04090304                                ....

080033f8 <Virtual_Com_Port_StringProduct>:
 80033f8:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8003408:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8003418:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8003428:	00000020                                 ...

0800342c <Virtual_Com_Port_ConfigDescriptor>:
 800342c:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800343c:	24050001 05011000 01000124 02022404     ...$....$....$..
 800344c:	00062405 82050701 ff000803 00010409     .$..............
 800345c:	00000a02 03050700 00004002 02810507     .........@......
 800346c:	00000040                                @...


main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003860  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030c  20000000  08003860  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000122c  20000400  08003e00  00010400  2**9
                  ALLOC
  3 ._usrstack    00000100  2000162c  0800502c  00010400  2**0
                  ALLOC
  4 .ARM.attributes 00000033  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000a125  00000000  00000000  0001033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000032fd  00000000  00000000  0001a464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00009917  00000000  00000000  0001d761  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000b28  00000000  00000000  00027078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001390  00000000  00000000  00027ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000031f4  00000000  00000000  00028f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000257c  00000000  00000000  0002c124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  0002e6a0  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001e00  00000000  00000000  0002e710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 a5 08 00 08                             .P. ....

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	2000      	movs	r0, #0
 800000c:	4b01      	ldr	r3, [pc, #4]	; (8000014 <LED_Tick+0xc>)
 800000e:	4798      	blx	r3
 8000010:	bd08      	pop	{r3, pc}
 8000012:	bf00      	nop
 8000014:	08000c3d 	.word	0x08000c3d

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0a      	ldr	r3, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4b09      	ldr	r3, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4798      	blx	r3
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	4620      	mov	r0, r4
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	2202      	movs	r2, #2
 8000030:	4b07      	ldr	r3, [pc, #28]	; (8000050 <main+0x38>)
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000036:	4b07      	ldr	r3, [pc, #28]	; (8000054 <main+0x3c>)
 8000038:	4620      	mov	r0, r4
 800003a:	4798      	blx	r3
	
	Main_Init();

	//-- 명령어 처리
	//  
	Ap_GLcdMenu_ExeCmd();    
 800003c:	4b06      	ldr	r3, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4798      	blx	r3


    while(1);
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	08000949 	.word	0x08000949
 8000048:	0800005d 	.word	0x0800005d
 800004c:	08000eb1 	.word	0x08000eb1
 8000050:	08000009 	.word	0x08000009
 8000054:	08000ecd 	.word	0x08000ecd
 8000058:	0800010d 	.word	0x0800010d

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	4770      	bx	lr
 800005e:	bf00      	nop

08000060 <Ap_GLcdMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
 8000060:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
	Lb_printf("*******************************************************\n");
 8000062:	4d11      	ldr	r5, [pc, #68]	; (80000a8 <Ap_GLcdMenu_ShowMenu+0x48>)
---------------------------------------------------------------------------*/
void Ap_GLcdMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 8000064:	4c11      	ldr	r4, [pc, #68]	; (80000ac <Ap_GLcdMenu_ShowMenu+0x4c>)
 8000066:	4812      	ldr	r0, [pc, #72]	; (80000b0 <Ap_GLcdMenu_ShowMenu+0x50>)
 8000068:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800006a:	4628      	mov	r0, r5
 800006c:	47a0      	blx	r4
	Lb_printf("                      MPU6050                          \n");
 800006e:	4811      	ldr	r0, [pc, #68]	; (80000b4 <Ap_GLcdMenu_ShowMenu+0x54>)
 8000070:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000072:	4628      	mov	r0, r5
 8000074:	47a0      	blx	r4
	Lb_printf("* 1. LCD Clear                                        *\n");
 8000076:	4810      	ldr	r0, [pc, #64]	; (80000b8 <Ap_GLcdMenu_ShowMenu+0x58>)
 8000078:	47a0      	blx	r4
	Lb_printf("* 2. Show Acc                                         *\n");
 800007a:	4810      	ldr	r0, [pc, #64]	; (80000bc <Ap_GLcdMenu_ShowMenu+0x5c>)
 800007c:	47a0      	blx	r4
	Lb_printf("* 3. Show MPU6050 Regs                                *\n");
 800007e:	4810      	ldr	r0, [pc, #64]	; (80000c0 <Ap_GLcdMenu_ShowMenu+0x60>)
 8000080:	47a0      	blx	r4
	Lb_printf("* 4.                                                  *\n");
 8000082:	4810      	ldr	r0, [pc, #64]	; (80000c4 <Ap_GLcdMenu_ShowMenu+0x64>)
 8000084:	47a0      	blx	r4
	Lb_printf("* 5.                                                  *\n");
 8000086:	4810      	ldr	r0, [pc, #64]	; (80000c8 <Ap_GLcdMenu_ShowMenu+0x68>)
 8000088:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 800008a:	4810      	ldr	r0, [pc, #64]	; (80000cc <Ap_GLcdMenu_ShowMenu+0x6c>)
 800008c:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 800008e:	4810      	ldr	r0, [pc, #64]	; (80000d0 <Ap_GLcdMenu_ShowMenu+0x70>)
 8000090:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 8000092:	4810      	ldr	r0, [pc, #64]	; (80000d4 <Ap_GLcdMenu_ShowMenu+0x74>)
 8000094:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 8000096:	4810      	ldr	r0, [pc, #64]	; (80000d8 <Ap_GLcdMenu_ShowMenu+0x78>)
 8000098:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 800009a:	4810      	ldr	r0, [pc, #64]	; (80000dc <Ap_GLcdMenu_ShowMenu+0x7c>)
 800009c:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800009e:	4628      	mov	r0, r5
 80000a0:	47a0      	blx	r4
	Lb_printf("\n");
 80000a2:	480f      	ldr	r0, [pc, #60]	; (80000e0 <Ap_GLcdMenu_ShowMenu+0x80>)
 80000a4:	47a0      	blx	r4
 80000a6:	bd38      	pop	{r3, r4, r5, pc}
 80000a8:	08003444 	.word	0x08003444
 80000ac:	080006cd 	.word	0x080006cd
 80000b0:	08003440 	.word	0x08003440
 80000b4:	08003480 	.word	0x08003480
 80000b8:	080034bc 	.word	0x080034bc
 80000bc:	080034f8 	.word	0x080034f8
 80000c0:	08003534 	.word	0x08003534
 80000c4:	08003570 	.word	0x08003570
 80000c8:	080035ac 	.word	0x080035ac
 80000cc:	080035e8 	.word	0x080035e8
 80000d0:	08003624 	.word	0x08003624
 80000d4:	08003660 	.word	0x08003660
 80000d8:	0800369c 	.word	0x0800369c
 80000dc:	080036d8 	.word	0x080036d8
 80000e0:	080037a4 	.word	0x080037a4

080000e4 <Ap_GLcdMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_GetCmd(void)
{
 80000e4:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 80000e6:	4805      	ldr	r0, [pc, #20]	; (80000fc <Ap_GLcdMenu_GetCmd+0x18>)
 80000e8:	4c05      	ldr	r4, [pc, #20]	; (8000100 <Ap_GLcdMenu_GetCmd+0x1c>)
 80000ea:	47a0      	blx	r4

    key=get_byte();
 80000ec:	4b05      	ldr	r3, [pc, #20]	; (8000104 <Ap_GLcdMenu_GetCmd+0x20>)
 80000ee:	4798      	blx	r3
 80000f0:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 80000f2:	4805      	ldr	r0, [pc, #20]	; (8000108 <Ap_GLcdMenu_GetCmd+0x24>)
 80000f4:	47a0      	blx	r4
	
    return key;
}
 80000f6:	4628      	mov	r0, r5
 80000f8:	bd38      	pop	{r3, r4, r5, pc}
 80000fa:	bf00      	nop
 80000fc:	08003714 	.word	0x08003714
 8000100:	080006cd 	.word	0x080006cd
 8000104:	08000b51 	.word	0x08000b51
 8000108:	080037a4 	.word	0x080037a4

0800010c <Ap_GLcdMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 800010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HW_MPU6050_DATA_OBJ MPU6050_Data;


	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 8000110:	4b4d      	ldr	r3, [pc, #308]	; (8000248 <Ap_GLcdMenu_ExeCmd+0x13c>)
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_GLcdMenu_ExeCmd(void)
{
 8000112:	b08b      	sub	sp, #44	; 0x2c
    HW_MPU6050_DATA_OBJ MPU6050_Data;


	if( ExeFirst == TRUE )
	{
		Ap_GLcdMenu_ShowMenu();		
 8000114:	4798      	blx	r3

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
 8000116:	2000      	movs	r0, #0
 8000118:	4601      	mov	r1, r0
 800011a:	4a4c      	ldr	r2, [pc, #304]	; (800024c <Ap_GLcdMenu_ExeCmd+0x140>)
 800011c:	4b4c      	ldr	r3, [pc, #304]	; (8000250 <Ap_GLcdMenu_ExeCmd+0x144>)
 800011e:	4798      	blx	r3
		Hw_N5110G_DrawRequest();
 8000120:	4b4c      	ldr	r3, [pc, #304]	; (8000254 <Ap_GLcdMenu_ExeCmd+0x148>)
 8000122:	4798      	blx	r3
 8000124:	4c4c      	ldr	r4, [pc, #304]	; (8000258 <Ap_GLcdMenu_ExeCmd+0x14c>)
 8000126:	4f4d      	ldr	r7, [pc, #308]	; (800025c <Ap_GLcdMenu_ExeCmd+0x150>)
				break;

           case '3':
           		for( i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 8000128:	4e4d      	ldr	r6, [pc, #308]	; (8000260 <Ap_GLcdMenu_ExeCmd+0x154>)
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 800012a:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000290 <Ap_GLcdMenu_ExeCmd+0x184>

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
		Hw_N5110G_DrawRequest();
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 800012e:	4b4d      	ldr	r3, [pc, #308]	; (8000264 <Ap_GLcdMenu_ExeCmd+0x158>)
 8000130:	4798      	blx	r3
 8000132:	4603      	mov	r3, r0
 8000134:	2800      	cmp	r0, #0
 8000136:	d060      	beq.n	80001fa <Ap_GLcdMenu_ExeCmd+0xee>
    {
        switch(key)
 8000138:	2b33      	cmp	r3, #51	; 0x33
 800013a:	d066      	beq.n	800020a <Ap_GLcdMenu_ExeCmd+0xfe>
 800013c:	d852      	bhi.n	80001e4 <Ap_GLcdMenu_ExeCmd+0xd8>
 800013e:	2b31      	cmp	r3, #49	; 0x31
 8000140:	d05e      	beq.n	8000200 <Ap_GLcdMenu_ExeCmd+0xf4>
 8000142:	2b32      	cmp	r3, #50	; 0x32
 8000144:	d1f3      	bne.n	800012e <Ap_GLcdMenu_ExeCmd+0x22>
 8000146:	4d48      	ldr	r5, [pc, #288]	; (8000268 <Ap_GLcdMenu_ExeCmd+0x15c>)

           case '2':
                
                while( get_byte_check() == 0 )
                {
                    Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 8000148:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8000294 <Ap_GLcdMenu_ExeCmd+0x188>
 800014c:	e01c      	b.n	8000188 <Ap_GLcdMenu_ExeCmd+0x7c>
 800014e:	2903      	cmp	r1, #3
 8000150:	bfac      	ite	ge
 8000152:	4682      	movge	sl, r0
 8000154:	f04f 0a03 	movlt.w	sl, #3
 8000158:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
                    if( x < 3 )                x = 3;
                    if( y > HW_N5110G_HEIGHT-4) y = HW_N5110G_HEIGHT-4;
 800015c:	b212      	sxth	r2, r2
 800015e:	455a      	cmp	r2, fp
 8000160:	dc04      	bgt.n	800016c <Ap_GLcdMenu_ExeCmd+0x60>
 8000162:	2a03      	cmp	r2, #3
 8000164:	bfac      	ite	ge
 8000166:	469b      	movge	fp, r3
 8000168:	f04f 0b03 	movlt.w	fp, #3
                    if( y < 3 )                 y = 3;

                    Hw_N5110G_Clear();                                  
 800016c:	4b3f      	ldr	r3, [pc, #252]	; (800026c <Ap_GLcdMenu_ExeCmd+0x160>)
 800016e:	4798      	blx	r3
                    Hw_N5110G_DrawCircle(  x , y, 3, 0 );                           
 8000170:	4650      	mov	r0, sl
 8000172:	4659      	mov	r1, fp
 8000174:	2203      	movs	r2, #3
 8000176:	2300      	movs	r3, #0
 8000178:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8000298 <Ap_GLcdMenu_ExeCmd+0x18c>
 800017c:	47e0      	blx	ip
                    Hw_N5110G_DrawRequest();
 800017e:	4b35      	ldr	r3, [pc, #212]	; (8000254 <Ap_GLcdMenu_ExeCmd+0x148>)
 8000180:	4798      	blx	r3
                    Hw_Wait_ms(100);
 8000182:	2064      	movs	r0, #100	; 0x64
 8000184:	4b3a      	ldr	r3, [pc, #232]	; (8000270 <Ap_GLcdMenu_ExeCmd+0x164>)
 8000186:	4798      	blx	r3
           		Hw_N5110G_Clear();
               	break;

           case '2':
                
                while( get_byte_check() == 0 )
 8000188:	47a8      	blx	r5
 800018a:	2800      	cmp	r0, #0
 800018c:	d1cf      	bne.n	800012e <Ap_GLcdMenu_ExeCmd+0x22>
                {
                    Ret = Hw_MPU6050_GetData( &MPU6050_Data );
 800018e:	a801      	add	r0, sp, #4
 8000190:	47c8      	blx	r9

                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
 8000192:	4838      	ldr	r0, [pc, #224]	; (8000274 <Ap_GLcdMenu_ExeCmd+0x168>)
 8000194:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8000198:	47a0      	blx	r4
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
 800019a:	4837      	ldr	r0, [pc, #220]	; (8000278 <Ap_GLcdMenu_ExeCmd+0x16c>)
 800019c:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 80001a0:	47a0      	blx	r4
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
 80001a2:	4836      	ldr	r0, [pc, #216]	; (800027c <Ap_GLcdMenu_ExeCmd+0x170>)
 80001a4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80001a8:	47a0      	blx	r4
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);
 80001aa:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80001ae:	4834      	ldr	r0, [pc, #208]	; (8000280 <Ap_GLcdMenu_ExeCmd+0x174>)
 80001b0:	47a0      	blx	r4

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80001b2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001b6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80001ba:	fb88 1002 	smull	r1, r0, r8, r2
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001be:	fb88 e103 	smull	lr, r1, r8, r3
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80001c2:	17d2      	asrs	r2, r2, #31
 80001c4:	eba2 10a0 	sub.w	r0, r2, r0, asr #6
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001c8:	17db      	asrs	r3, r3, #31
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80001ca:	302a      	adds	r0, #42	; 0x2a
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001cc:	eba3 13a1 	sub.w	r3, r3, r1, asr #6
                    Lb_printf("AX %d ", MPU6050_Data.X_Acc );
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
 80001d0:	b280      	uxth	r0, r0
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001d2:	3318      	adds	r3, #24

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80001d4:	b201      	sxth	r1, r0
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001d6:	b29b      	uxth	r3, r3

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80001d8:	2950      	cmp	r1, #80	; 0x50
                    Lb_printf("AY %d ", MPU6050_Data.Y_Acc );
                    Lb_printf("AZ %d ", MPU6050_Data.Z_Acc );
                    Lb_printf("T %d \n",  MPU6050_Data.Temp);

                    x = HW_N5110G_WIDTH/2 - MPU6050_Data.Y_Acc/200;
                    y = HW_N5110G_HEIGHT/2 - MPU6050_Data.X_Acc/200;
 80001da:	b29a      	uxth	r2, r3

                    if( x > HW_N5110G_WIDTH-4) x = HW_N5110G_WIDTH-4;
 80001dc:	ddb7      	ble.n	800014e <Ap_GLcdMenu_ExeCmd+0x42>
 80001de:	f04f 0a50 	mov.w	sl, #80	; 0x50
 80001e2:	e7b9      	b.n	8000158 <Ap_GLcdMenu_ExeCmd+0x4c>
		Hw_N5110G_DrawRequest();
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
 80001e4:	2b4d      	cmp	r3, #77	; 0x4d
 80001e6:	d001      	beq.n	80001ec <Ap_GLcdMenu_ExeCmd+0xe0>
 80001e8:	2b6d      	cmp	r3, #109	; 0x6d
 80001ea:	d1a0      	bne.n	800012e <Ap_GLcdMenu_ExeCmd+0x22>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_GLcdMenu_ShowMenu();
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <Ap_GLcdMenu_ExeCmd+0x13c>)
 80001ee:	4798      	blx	r3

		Hw_N5110G_Print( 0, 0, "SmartRobot BD");
		Hw_N5110G_DrawRequest();
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
 80001f0:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <Ap_GLcdMenu_ExeCmd+0x158>)
 80001f2:	4798      	blx	r3
 80001f4:	4603      	mov	r3, r0
 80001f6:	2800      	cmp	r0, #0
 80001f8:	d19e      	bne.n	8000138 <Ap_GLcdMenu_ExeCmd+0x2c>
               break;
        }
    }
    
    return key;
}
 80001fa:	b00b      	add	sp, #44	; 0x2c
 80001fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Lb_printf("LCD Clear \n");
 8000200:	4820      	ldr	r0, [pc, #128]	; (8000284 <Ap_GLcdMenu_ExeCmd+0x178>)
 8000202:	47a0      	blx	r4
           		Hw_N5110G_Clear();
 8000204:	4b19      	ldr	r3, [pc, #100]	; (800026c <Ap_GLcdMenu_ExeCmd+0x160>)
 8000206:	4798      	blx	r3
               	break;
 8000208:	e791      	b.n	800012e <Ap_GLcdMenu_ExeCmd+0x22>
		Hw_N5110G_DrawRequest();
	}

    while( (key = Ap_GLcdMenu_GetCmd()) != 0 )
    {
        switch(key)
 800020a:	2500      	movs	r5, #0
 800020c:	e00c      	b.n	8000228 <Ap_GLcdMenu_ExeCmd+0x11c>
           case '3':
           		for( i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

           			I2C_Data[0] = 0x00;
 800020e:	2300      	movs	r3, #0
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 8000210:	b2e8      	uxtb	r0, r5
 8000212:	a905      	add	r1, sp, #20
           case '3':
           		for( i=0; i<=0x75; i++ )
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);

           			I2C_Data[0] = 0x00;
 8000214:	f88d 3014 	strb.w	r3, [sp, #20]
 8000218:	3501      	adds	r5, #1
           			Ret = Hw_I2C_IMU_MPU6050_ReadReg( i, I2C_Data );
 800021a:	47b8      	blx	r7
           			Lb_printf("%02x ", I2C_Data[0]);
 800021c:	481a      	ldr	r0, [pc, #104]	; (8000288 <Ap_GLcdMenu_ExeCmd+0x17c>)
 800021e:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8000222:	47a0      	blx	r4
                }
           		
				break;

           case '3':
           		for( i=0; i<=0x75; i++ )
 8000224:	2d76      	cmp	r5, #118	; 0x76
 8000226:	d082      	beq.n	800012e <Ap_GLcdMenu_ExeCmd+0x22>
           		{
           			if( i%10 == 0 ) Lb_printf("\n 0x%02x: ", i);
 8000228:	b2ab      	uxth	r3, r5
 800022a:	fba6 1203 	umull	r1, r2, r6, r3
 800022e:	08d2      	lsrs	r2, r2, #3
 8000230:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000234:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8000238:	b29b      	uxth	r3, r3
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1e7      	bne.n	800020e <Ap_GLcdMenu_ExeCmd+0x102>
 800023e:	4813      	ldr	r0, [pc, #76]	; (800028c <Ap_GLcdMenu_ExeCmd+0x180>)
 8000240:	4629      	mov	r1, r5
 8000242:	47a0      	blx	r4
 8000244:	e7e3      	b.n	800020e <Ap_GLcdMenu_ExeCmd+0x102>
 8000246:	bf00      	nop
 8000248:	08000061 	.word	0x08000061
 800024c:	08003718 	.word	0x08003718
 8000250:	08001379 	.word	0x08001379
 8000254:	080013d1 	.word	0x080013d1
 8000258:	080006cd 	.word	0x080006cd
 800025c:	08001ba5 	.word	0x08001ba5
 8000260:	cccccccd 	.word	0xcccccccd
 8000264:	080000e5 	.word	0x080000e5
 8000268:	08000b61 	.word	0x08000b61
 800026c:	080012e5 	.word	0x080012e5
 8000270:	080009f9 	.word	0x080009f9
 8000274:	08003734 	.word	0x08003734
 8000278:	0800373c 	.word	0x0800373c
 800027c:	08003744 	.word	0x08003744
 8000280:	0800374c 	.word	0x0800374c
 8000284:	08003728 	.word	0x08003728
 8000288:	08003760 	.word	0x08003760
 800028c:	08003754 	.word	0x08003754
 8000290:	51eb851f 	.word	0x51eb851f
 8000294:	08001c45 	.word	0x08001c45
 8000298:	080013e1 	.word	0x080013e1

0800029c <print_byte_out>:




void print_byte_out(unsigned int c)
{
 800029c:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <print_byte_out+0x28>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	b163      	cbz	r3, 80002be <print_byte_out+0x22>
 80002a4:	4604      	mov	r4, r0
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <print_byte_out+0x2c>)
 80002a8:	4a08      	ldr	r2, [pc, #32]	; (80002cc <print_byte_out+0x30>)
 80002aa:	6819      	ldr	r1, [r3, #0]
 80002ac:	6810      	ldr	r0, [r2, #0]
 80002ae:	1c4d      	adds	r5, r1, #1
 80002b0:	601d      	str	r5, [r3, #0]
 80002b2:	5444      	strb	r4, [r0, r1]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	2100      	movs	r1, #0
 80002ba:	54d1      	strb	r1, [r2, r3]
 80002bc:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 80002be:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <print_byte_out+0x34>)
 80002c0:	4798      	blx	r3
 80002c2:	bd38      	pop	{r3, r4, r5, pc}
 80002c4:	20000404 	.word	0x20000404
 80002c8:	20000400 	.word	0x20000400
 80002cc:	200004bc 	.word	0x200004bc
 80002d0:	08000b25 	.word	0x08000b25

080002d4 <PrintString>:
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 80002d4:	b158      	cbz	r0, 80002ee <PrintString+0x1a>
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 80002d6:	b538      	push	{r3, r4, r5, lr}
 80002d8:	460c      	mov	r4, r1
        if (!fmt || !s) return;
 80002da:	b139      	cbz	r1, 80002ec <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 80002dc:	7808      	ldrb	r0, [r1, #0]
 80002de:	b128      	cbz	r0, 80002ec <PrintString+0x18>
 80002e0:	4d03      	ldr	r5, [pc, #12]	; (80002f0 <PrintString+0x1c>)
 80002e2:	47a8      	blx	r5
 80002e4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80002e8:	2800      	cmp	r0, #0
 80002ea:	d1fa      	bne.n	80002e2 <PrintString+0xe>
 80002ec:	bd38      	pop	{r3, r4, r5, pc}
 80002ee:	4770      	bx	lr
 80002f0:	0800029d 	.word	0x0800029d

080002f4 <DecToLong>:
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80002f4:	b1e8      	cbz	r0, 8000332 <DecToLong+0x3e>
 80002f6:	7803      	ldrb	r3, [r0, #0]
 80002f8:	b1db      	cbz	r3, 8000332 <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 80002fa:	2300      	movs	r3, #0
 80002fc:	600b      	str	r3, [r1, #0]
 80002fe:	7802      	ldrb	r2, [r0, #0]
 8000300:	b1e2      	cbz	r2, 800033c <DecToLong+0x48>
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8000302:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8000304:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000308:	b2e2      	uxtb	r2, r4
 800030a:	2a09      	cmp	r2, #9
 800030c:	d902      	bls.n	8000314 <DecToLong+0x20>
 800030e:	e012      	b.n	8000336 <DecToLong+0x42>
 8000310:	2d09      	cmp	r5, #9
 8000312:	d810      	bhi.n	8000336 <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8000314:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000318:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800031c:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800031e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 8000322:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000326:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000328:	2a00      	cmp	r2, #0
 800032a:	d1f1      	bne.n	8000310 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 800032c:	2001      	movs	r0, #1
}        // DecToLong.
 800032e:	bc30      	pop	{r4, r5}
 8000330:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000332:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 8000334:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000336:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 8000338:	bc30      	pop	{r4, r5}
 800033a:	4770      	bx	lr
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 800033c:	2001      	movs	r0, #1
}        // DecToLong.
 800033e:	4770      	bx	lr

08000340 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8000344:	2700      	movs	r7, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 8000346:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 8000348:	f1b1 0900 	subs.w	r9, r1, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 800034c:	4680      	mov	r8, r0
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800034e:	9700      	str	r7, [sp, #0]
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000350:	7803      	ldrb	r3, [r0, #0]
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 8000352:	f2c0 80ae 	blt.w	80004b2 <PrintDec+0x172>
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000356:	b3b3      	cbz	r3, 80003c6 <PrintDec+0x86>
	{
		if (c=='d') break;
 8000358:	2b64      	cmp	r3, #100	; 0x64
 800035a:	d034      	beq.n	80003c6 <PrintDec+0x86>
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 800035c:	2400      	movs	r4, #0
 800035e:	46a2      	mov	sl, r4
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000360:	4626      	mov	r6, r4
			i--;
			DecToLong(tol, &flagcnt);
 8000362:	4d62      	ldr	r5, [pc, #392]	; (80004ec <PrintDec+0x1ac>)

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 8000364:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000368:	2a08      	cmp	r2, #8
 800036a:	d856      	bhi.n	800041a <PrintDec+0xda>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800036c:	f818 200a 	ldrb.w	r2, [r8, sl]
 8000370:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000374:	2b09      	cmp	r3, #9
 8000376:	f200 8099 	bhi.w	80004ac <PrintDec+0x16c>
 800037a:	a801      	add	r0, sp, #4
 800037c:	4686      	mov	lr, r0
 800037e:	f10a 0301 	add.w	r3, sl, #1
 8000382:	4443      	add	r3, r8
 8000384:	2100      	movs	r1, #0
			{
				tol[j] = s[i++];
 8000386:	f80e 2b01 	strb.w	r2, [lr], #1
 800038a:	ebc8 0a03 	rsb	sl, r8, r3
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800038e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000392:	3101      	adds	r1, #1
 8000394:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8000398:	f1bc 0f09 	cmp.w	ip, #9
 800039c:	d9f3      	bls.n	8000386 <PrintDec+0x46>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800039e:	ab04      	add	r3, sp, #16
 80003a0:	185a      	adds	r2, r3, r1
			i--;
			DecToLong(tol, &flagcnt);
 80003a2:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80003a4:	f802 6c0c 	strb.w	r6, [r2, #-12]
			i--;
 80003a8:	f10a 3aff 	add.w	sl, sl, #4294967295
			DecToLong(tol, &flagcnt);
 80003ac:	47a8      	blx	r5
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80003ae:	f10a 0a01 	add.w	sl, sl, #1
 80003b2:	f818 300a 	ldrb.w	r3, [r8, sl]
 80003b6:	b10b      	cbz	r3, 80003bc <PrintDec+0x7c>
	{
		if (c=='d') break;
 80003b8:	2b64      	cmp	r3, #100	; 0x64
 80003ba:	d1d3      	bne.n	8000364 <PrintDec+0x24>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 80003bc:	2f00      	cmp	r7, #0
 80003be:	f040 8081 	bne.w	80004c4 <PrintDec+0x184>


	// 위의 flag에 따라 출력.
	if (flagcnt)
 80003c2:	9800      	ldr	r0, [sp, #0]
 80003c4:	bb68      	cbnz	r0, 8000422 <PrintDec+0xe2>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80003c6:	250a      	movs	r5, #10
 80003c8:	4c49      	ldr	r4, [pc, #292]	; (80004f0 <PrintDec+0x1b0>)
 80003ca:	2201      	movs	r2, #1
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80003cc:	4e49      	ldr	r6, [pc, #292]	; (80004f4 <PrintDec+0x1b4>)
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80003ce:	4f4a      	ldr	r7, [pc, #296]	; (80004f8 <PrintDec+0x1b8>)
 80003d0:	e00a      	b.n	80003e8 <PrintDec+0xa8>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80003d2:	47b0      	blx	r6
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80003d4:	fb87 1304 	smull	r1, r3, r7, r4
 80003d8:	3d01      	subs	r5, #1
 80003da:	ea4f 74e4 	mov.w	r4, r4, asr #31
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80003de:	f04f 0200 	mov.w	r2, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80003e2:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 80003e6:	d015      	beq.n	8000414 <PrintDec+0xd4>
                        result = remainder/divisor;
 80003e8:	fb99 f3f4 	sdiv	r3, r9, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80003ec:	b2d8      	uxtb	r0, r3
 80003ee:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80003f0:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1ec      	bne.n	80003d2 <PrintDec+0x92>
 80003f8:	2c01      	cmp	r4, #1
 80003fa:	d0ea      	beq.n	80003d2 <PrintDec+0x92>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	d0e8      	beq.n	80003d2 <PrintDec+0x92>
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 8000400:	fb87 1304 	smull	r1, r3, r7, r4
 8000404:	3d01      	subs	r5, #1
 8000406:	ea4f 74e4 	mov.w	r4, r4, asr #31
 800040a:	f04f 0201 	mov.w	r2, #1
 800040e:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000412:	d1e9      	bne.n	80003e8 <PrintDec+0xa8>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8000414:	b004      	add	sp, #16
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 800041a:	2b30      	cmp	r3, #48	; 0x30
 800041c:	bf08      	it	eq
 800041e:	2401      	moveq	r4, #1
 8000420:	e7c5      	b.n	80003ae <PrintDec+0x6e>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8000422:	2809      	cmp	r0, #9
 8000424:	dc3d      	bgt.n	80004a2 <PrintDec+0x162>
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000426:	2801      	cmp	r0, #1
 8000428:	f1a0 0102 	sub.w	r1, r0, #2
 800042c:	d050      	beq.n	80004d0 <PrintDec+0x190>
 800042e:	1ec2      	subs	r2, r0, #3

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000430:	230a      	movs	r3, #10
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000432:	3901      	subs	r1, #1
                retval *= num;
 8000434:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000438:	1c4d      	adds	r5, r1, #1
                retval *= num;
 800043a:	ea4f 0343 	mov.w	r3, r3, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800043e:	d1f8      	bne.n	8000432 <PrintDec+0xf2>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000440:	fb99 f6f3 	sdiv	r6, r9, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000444:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000446:	fb03 9616 	mls	r6, r3, r6, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 800044a:	d03f      	beq.n	80004cc <PrintDec+0x18c>
 800044c:	4613      	mov	r3, r2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800044e:	250a      	movs	r5, #10
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000450:	3b01      	subs	r3, #1
                retval *= num;
 8000452:	eb05 0585 	add.w	r5, r5, r5, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000456:	1c5a      	adds	r2, r3, #1
                retval *= num;
 8000458:	ea4f 0545 	mov.w	r5, r5, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800045c:	d1f8      	bne.n	8000450 <PrintDec+0x110>
 800045e:	4f25      	ldr	r7, [pc, #148]	; (80004f4 <PrintDec+0x1b4>)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000460:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80004f8 <PrintDec+0x1b8>
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
 8000464:	f04f 0901 	mov.w	r9, #1
 8000468:	e00f      	b.n	800048a <PrintDec+0x14a>
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800046a:	2d01      	cmp	r5, #1
 800046c:	d015      	beq.n	800049a <PrintDec+0x15a>


                        if (leading_zero==true){
 800046e:	f1b9 0f00 	cmp.w	r9, #0
 8000472:	d012      	beq.n	800049a <PrintDec+0x15a>
                                if (flag0)        print_byte_out('0');
 8000474:	2030      	movs	r0, #48	; 0x30
 8000476:	b904      	cbnz	r4, 800047a <PrintDec+0x13a>
                                else                print_byte_out(' ');
 8000478:	2020      	movs	r0, #32
 800047a:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800047c:	fb88 2305 	smull	r2, r3, r8, r5
 8000480:	17ed      	asrs	r5, r5, #31
 8000482:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
 8000486:	2d00      	cmp	r5, #0
 8000488:	ddc4      	ble.n	8000414 <PrintDec+0xd4>
                        result = remainder/divisor;
 800048a:	fb96 f2f5 	sdiv	r2, r6, r5

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800048e:	b2d0      	uxtb	r0, r2
 8000490:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000492:	fb05 6612 	mls	r6, r5, r2, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000496:	2a00      	cmp	r2, #0
 8000498:	d0e7      	beq.n	800046a <PrintDec+0x12a>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800049a:	47b8      	blx	r7
 800049c:	f04f 0900 	mov.w	r9, #0
 80004a0:	e7ec      	b.n	800047c <PrintDec+0x13c>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 80004a2:	2009      	movs	r0, #9
 80004a4:	9000      	str	r0, [sp, #0]
 80004a6:	2206      	movs	r2, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004a8:	2107      	movs	r1, #7
 80004aa:	e7c1      	b.n	8000430 <PrintDec+0xf0>
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80004ac:	2100      	movs	r1, #0
 80004ae:	a801      	add	r0, sp, #4
 80004b0:	e775      	b.n	800039e <PrintDec+0x5e>
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 80004b2:	f1c9 0900 	rsb	r9, r9, #0

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 80004b6:	461c      	mov	r4, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80004b8:	b123      	cbz	r3, 80004c4 <PrintDec+0x184>
	{
		if (c=='d') break;
 80004ba:	2b64      	cmp	r3, #100	; 0x64
 80004bc:	d001      	beq.n	80004c2 <PrintDec+0x182>
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 80004be:	2701      	movs	r7, #1
 80004c0:	e74c      	b.n	800035c <PrintDec+0x1c>


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 80004c2:	463c      	mov	r4, r7
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 80004c4:	202d      	movs	r0, #45	; 0x2d
 80004c6:	4f0b      	ldr	r7, [pc, #44]	; (80004f4 <PrintDec+0x1b4>)
 80004c8:	47b8      	blx	r7
 80004ca:	e77a      	b.n	80003c2 <PrintDec+0x82>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80004cc:	250a      	movs	r5, #10
 80004ce:	e7c6      	b.n	800045e <PrintDec+0x11e>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <PrintDec+0x1b8>)
 80004d2:	ea4f 76e9 	mov.w	r6, r9, asr #31
 80004d6:	fb83 2309 	smull	r2, r3, r3, r9
 80004da:	ebc6 06a3 	rsb	r6, r6, r3, asr #2
 80004de:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80004e2:	eba9 0643 	sub.w	r6, r9, r3, lsl #1
 80004e6:	f06f 0301 	mvn.w	r3, #1
 80004ea:	e7b0      	b.n	800044e <PrintDec+0x10e>
 80004ec:	080002f5 	.word	0x080002f5
 80004f0:	3b9aca00 	.word	0x3b9aca00
 80004f4:	0800029d 	.word	0x0800029d
 80004f8:	66666667 	.word	0x66666667

080004fc <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80004fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000500:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000502:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000504:	2400      	movs	r4, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000506:	4681      	mov	r9, r0
 8000508:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800050a:	9402      	str	r4, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800050c:	2b00      	cmp	r3, #0
 800050e:	d05b      	beq.n	80005c8 <PrintHex+0xcc>
                if (c=='x') break;
 8000510:	2b78      	cmp	r3, #120	; 0x78
 8000512:	d059      	beq.n	80005c8 <PrintHex+0xcc>
 8000514:	46a0      	mov	r8, r4
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000516:	4626      	mov	r6, r4
                        i--;
                        DecToLong(tol, &flagcnt);
 8000518:	4d6a      	ldr	r5, [pc, #424]	; (80006c4 <PrintHex+0x1c8>)


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 800051a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800051e:	2a08      	cmp	r2, #8
 8000520:	d84e      	bhi.n	80005c0 <PrintHex+0xc4>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000522:	f819 2008 	ldrb.w	r2, [r9, r8]
 8000526:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800052a:	2b09      	cmp	r3, #9
 800052c:	f200 80ac 	bhi.w	8000688 <PrintHex+0x18c>
 8000530:	a803      	add	r0, sp, #12
 8000532:	4607      	mov	r7, r0
 8000534:	f108 0301 	add.w	r3, r8, #1
 8000538:	444b      	add	r3, r9
 800053a:	2100      	movs	r1, #0
                                tol[j] = s[i++];
 800053c:	f807 2b01 	strb.w	r2, [r7], #1
 8000540:	ebc9 0803 	rsb	r8, r9, r3

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000548:	3101      	adds	r1, #1
 800054a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800054e:	f1be 0f09 	cmp.w	lr, #9
 8000552:	d9f3      	bls.n	800053c <PrintHex+0x40>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000554:	ab06      	add	r3, sp, #24
 8000556:	185a      	adds	r2, r3, r1
                        i--;
                        DecToLong(tol, &flagcnt);
 8000558:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800055a:	f802 6c0c 	strb.w	r6, [r2, #-12]
                        i--;
 800055e:	f108 38ff 	add.w	r8, r8, #4294967295
                        DecToLong(tol, &flagcnt);
 8000562:	47a8      	blx	r5
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000564:	f108 0801 	add.w	r8, r8, #1
 8000568:	f819 3008 	ldrb.w	r3, [r9, r8]
 800056c:	b10b      	cbz	r3, 8000572 <PrintHex+0x76>
                if (c=='x') break;
 800056e:	2b78      	cmp	r3, #120	; 0x78
 8000570:	d1d3      	bne.n	800051a <PrintHex+0x1e>
 8000572:	9a01      	ldr	r2, [sp, #4]
 8000574:	9b02      	ldr	r3, [sp, #8]
 8000576:	ba12      	rev	r2, r2
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000578:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 800057a:	b343      	cbz	r3, 80005ce <PrintHex+0xd2>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 800057c:	07da      	lsls	r2, r3, #31
 800057e:	d44f      	bmi.n	8000620 <PrintHex+0x124>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000580:	2201      	movs	r2, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000582:	f1c3 0308 	rsb	r3, r3, #8
 8000586:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800058a:	105d      	asrs	r5, r3, #1
 800058c:	2d03      	cmp	r5, #3
 800058e:	dc38      	bgt.n	8000602 <PrintHex+0x106>
 8000590:	ab01      	add	r3, sp, #4
 8000592:	441d      	add	r5, r3
                        c = s[i];
 8000594:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000598:	4e4b      	ldr	r6, [pc, #300]	; (80006c8 <PrintHex+0x1cc>)
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800059a:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800059e:	091b      	lsrs	r3, r3, #4


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80005a0:	46b1      	mov	r9, r6
 80005a2:	f10d 0808 	add.w	r8, sp, #8
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80005a6:	d05d      	beq.n	8000664 <PrintHex+0x168>
                        if (uHex<10) uHex+='0';
 80005a8:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 80005aa:	bf88      	it	hi
 80005ac:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80005b0:	f240 8081 	bls.w	80006b6 <PrintHex+0x1ba>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 80005b4:	47b0      	blx	r6
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80005b6:	2f00      	cmp	r7, #0
 80005b8:	d146      	bne.n	8000648 <PrintHex+0x14c>
                        if (lHex<10) lHex+='0';
 80005ba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80005be:	e047      	b.n	8000650 <PrintHex+0x154>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 80005c0:	2b30      	cmp	r3, #48	; 0x30
 80005c2:	bf08      	it	eq
 80005c4:	2401      	moveq	r4, #1
 80005c6:	e7cd      	b.n	8000564 <PrintHex+0x68>
 80005c8:	9b01      	ldr	r3, [sp, #4]
 80005ca:	ba1b      	rev	r3, r3
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80005cc:	9301      	str	r3, [sp, #4]

                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80005ce:	4f3e      	ldr	r7, [pc, #248]	; (80006c8 <PrintHex+0x1cc>)
 80005d0:	ae01      	add	r6, sp, #4
 80005d2:	2201      	movs	r2, #1
 80005d4:	2500      	movs	r5, #0
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80005d6:	f816 3b01 	ldrb.w	r3, [r6], #1
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80005da:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80005de:	091b      	lsrs	r3, r3, #4
 80005e0:	d01a      	beq.n	8000618 <PrintHex+0x11c>
                        if (uHex<10) uHex+='0';
 80005e2:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 80005e4:	bf88      	it	hi
 80005e6:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80005ea:	d961      	bls.n	80006b0 <PrintHex+0x1b4>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80005ec:	47b8      	blx	r7
 80005ee:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80005f0:	b954      	cbnz	r4, 8000608 <PrintHex+0x10c>
 80005f2:	2d03      	cmp	r5, #3
 80005f4:	d062      	beq.n	80006bc <PrintHex+0x1c0>
 80005f6:	2201      	movs	r2, #1
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d05f      	beq.n	80006bc <PrintHex+0x1c0>
                        }
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 80005fc:	3501      	adds	r5, #1
 80005fe:	2d04      	cmp	r5, #4
 8000600:	d1e9      	bne.n	80005d6 <PrintHex+0xda>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 8000602:	b007      	add	sp, #28
 8000604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000608:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 800060a:	bf88      	it	hi
 800060c:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000610:	d954      	bls.n	80006bc <PrintHex+0x1c0>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000612:	47b8      	blx	r7
 8000614:	2200      	movs	r2, #0
 8000616:	e7f1      	b.n	80005fc <PrintHex+0x100>

                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000618:	2a00      	cmp	r2, #0
 800061a:	d049      	beq.n	80006b0 <PrintHex+0x1b4>
 800061c:	2301      	movs	r3, #1
 800061e:	e7e7      	b.n	80005f0 <PrintHex+0xf4>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000620:	f1c3 0307 	rsb	r3, r3, #7
 8000624:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000628:	aa06      	add	r2, sp, #24
 800062a:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 800062e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
                        if (lHex!=0) leading_zero=false;
 8000632:	f013 030f 	ands.w	r3, r3, #15
 8000636:	d02a      	beq.n	800068e <PrintHex+0x192>
                        if (lHex<10) lHex+='0';
 8000638:	2b09      	cmp	r3, #9
 800063a:	d936      	bls.n	80006aa <PrintHex+0x1ae>
                        else         lHex+='A'-10;
 800063c:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000640:	4e21      	ldr	r6, [pc, #132]	; (80006c8 <PrintHex+0x1cc>)
 8000642:	47b0      	blx	r6
 8000644:	2200      	movs	r2, #0
 8000646:	e027      	b.n	8000698 <PrintHex+0x19c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000648:	2f09      	cmp	r7, #9
 800064a:	d9b6      	bls.n	80005ba <PrintHex+0xbe>
                        else         lHex+='A'-10;
 800064c:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000650:	47b0      	blx	r6
 8000652:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000654:	4545      	cmp	r5, r8
 8000656:	d0d4      	beq.n	8000602 <PrintHex+0x106>
                        c = s[i];
 8000658:	f815 3b01 	ldrb.w	r3, [r5], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800065c:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	d1a1      	bne.n	80005a8 <PrintHex+0xac>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000664:	b33a      	cbz	r2, 80006b6 <PrintHex+0x1ba>
                                if (flag0) print_byte_out('0');
 8000666:	b13c      	cbz	r4, 8000678 <PrintHex+0x17c>
 8000668:	2030      	movs	r0, #48	; 0x30
 800066a:	47b0      	blx	r6
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800066c:	2f00      	cmp	r7, #0
 800066e:	d1eb      	bne.n	8000648 <PrintHex+0x14c>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000670:	2030      	movs	r0, #48	; 0x30
 8000672:	47c8      	blx	r9
 8000674:	2201      	movs	r2, #1
 8000676:	e7ed      	b.n	8000654 <PrintHex+0x158>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000678:	2020      	movs	r0, #32
 800067a:	47b0      	blx	r6
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800067c:	2f00      	cmp	r7, #0
 800067e:	d1e3      	bne.n	8000648 <PrintHex+0x14c>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000680:	2020      	movs	r0, #32
 8000682:	47c8      	blx	r9
 8000684:	2201      	movs	r2, #1
 8000686:	e7e5      	b.n	8000654 <PrintHex+0x158>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000688:	2100      	movs	r1, #0
 800068a:	a803      	add	r0, sp, #12
 800068c:	e762      	b.n	8000554 <PrintHex+0x58>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 800068e:	b13c      	cbz	r4, 80006a0 <PrintHex+0x1a4>
 8000690:	2030      	movs	r0, #48	; 0x30
 8000692:	4e0d      	ldr	r6, [pc, #52]	; (80006c8 <PrintHex+0x1cc>)
 8000694:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000696:	2201      	movs	r2, #1
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000698:	9b02      	ldr	r3, [sp, #8]
 800069a:	3b01      	subs	r3, #1
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	e770      	b.n	8000582 <PrintHex+0x86>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80006a0:	2020      	movs	r0, #32
 80006a2:	4e09      	ldr	r6, [pc, #36]	; (80006c8 <PrintHex+0x1cc>)
 80006a4:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 80006a6:	2201      	movs	r2, #1
 80006a8:	e7f6      	b.n	8000698 <PrintHex+0x19c>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 80006aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80006ae:	e7c7      	b.n	8000640 <PrintHex+0x144>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80006b0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80006b4:	e79a      	b.n	80005ec <PrintHex+0xf0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80006b6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80006ba:	e77b      	b.n	80005b4 <PrintHex+0xb8>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80006bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80006c0:	e7a7      	b.n	8000612 <PrintHex+0x116>
 80006c2:	bf00      	nop
 80006c4:	080002f5 	.word	0x080002f5
 80006c8:	0800029d 	.word	0x0800029d

080006cc <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 80006cc:	b40f      	push	{r0, r1, r2, r3}
 80006ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d0:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 80006d2:	ad0a      	add	r5, sp, #40	; 0x28
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 80006d4:	4b31      	ldr	r3, [pc, #196]	; (800079c <Lb_printf+0xd0>)
 80006d6:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 80006d8:	f855 4b04 	ldr.w	r4, [r5], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80006dc:	4e30      	ldr	r6, [pc, #192]	; (80007a0 <Lb_printf+0xd4>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 80006de:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 80006e0:	7820      	ldrb	r0, [r4, #0]
 80006e2:	b358      	cbz	r0, 800073c <Lb_printf+0x70>
	{
		if (*s=='%')
 80006e4:	2825      	cmp	r0, #37	; 0x25
 80006e6:	d12e      	bne.n	8000746 <Lb_printf+0x7a>
 80006e8:	a901      	add	r1, sp, #4
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 80006ea:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 80006ee:	1c63      	adds	r3, r4, #1
 80006f0:	f104 0c0a 	add.w	ip, r4, #10
 80006f4:	1b1f      	subs	r7, r3, r4
 80006f6:	469e      	mov	lr, r3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80006f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80006fc:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 8000700:	2a01      	cmp	r2, #1
 8000702:	d92e      	bls.n	8000762 <Lb_printf+0x96>
 8000704:	2878      	cmp	r0, #120	; 0x78
 8000706:	d02c      	beq.n	8000762 <Lb_printf+0x96>
 8000708:	2873      	cmp	r0, #115	; 0x73
 800070a:	d02a      	beq.n	8000762 <Lb_printf+0x96>
 800070c:	2825      	cmp	r0, #37	; 0x25
 800070e:	d028      	beq.n	8000762 <Lb_printf+0x96>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000710:	4563      	cmp	r3, ip
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000712:	461a      	mov	r2, r3
 8000714:	f801 0f01 	strb.w	r0, [r1, #1]!
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000718:	d1ec      	bne.n	80006f4 <Lb_printf+0x28>
 800071a:	f89e 0001 	ldrb.w	r0, [lr, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800071e:	1c54      	adds	r4, r2, #1
 8000720:	2864      	cmp	r0, #100	; 0x64
 8000722:	d02b      	beq.n	800077c <Lb_printf+0xb0>
 8000724:	d812      	bhi.n	800074c <Lb_printf+0x80>
 8000726:	2825      	cmp	r0, #37	; 0x25
 8000728:	d02f      	beq.n	800078a <Lb_printf+0xbe>
 800072a:	2863      	cmp	r0, #99	; 0x63
 800072c:	d1d8      	bne.n	80006e0 <Lb_printf+0x14>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800072e:	7828      	ldrb	r0, [r5, #0]
 8000730:	47b0      	blx	r6
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000732:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000734:	1d2f      	adds	r7, r5, #4
 8000736:	463d      	mov	r5, r7
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000738:	2800      	cmp	r0, #0
 800073a:	d1d3      	bne.n	80006e4 <Lb_printf+0x18>
			s++;
		}
	}
	va_end(args);
	return;
}
 800073c:	b005      	add	sp, #20
 800073e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000742:	b004      	add	sp, #16
 8000744:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000746:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000748:	3401      	adds	r4, #1
 800074a:	e7c9      	b.n	80006e0 <Lb_printf+0x14>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800074c:	2873      	cmp	r0, #115	; 0x73
 800074e:	d01e      	beq.n	800078e <Lb_printf+0xc2>
 8000750:	2878      	cmp	r0, #120	; 0x78
 8000752:	d1c5      	bne.n	80006e0 <Lb_printf+0x14>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000754:	1d2a      	adds	r2, r5, #4
 8000756:	6829      	ldr	r1, [r5, #0]
 8000758:	a801      	add	r0, sp, #4
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <Lb_printf+0xd8>)
 800075c:	4615      	mov	r5, r2
 800075e:	4798      	blx	r3
					break;
 8000760:	e7be      	b.n	80006e0 <Lb_printf+0x14>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
                	break;
 8000762:	4672      	mov	r2, lr
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000764:	ab04      	add	r3, sp, #16
 8000766:	441f      	add	r7, r3
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000768:	2864      	cmp	r0, #100	; 0x64
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 800076a:	f04f 0300 	mov.w	r3, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800076e:	f807 0c0c 	strb.w	r0, [r7, #-12]
					format[i] = '\0';
 8000772:	f807 3c0b 	strb.w	r3, [r7, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000776:	f102 0401 	add.w	r4, r2, #1
 800077a:	d1d3      	bne.n	8000724 <Lb_printf+0x58>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800077c:	1d2a      	adds	r2, r5, #4
 800077e:	6829      	ldr	r1, [r5, #0]
 8000780:	a801      	add	r0, sp, #4
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <Lb_printf+0xdc>)
 8000784:	4615      	mov	r5, r2
 8000786:	4798      	blx	r3
					break;
 8000788:	e7aa      	b.n	80006e0 <Lb_printf+0x14>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800078a:	47b0      	blx	r6
 800078c:	e7a8      	b.n	80006e0 <Lb_printf+0x14>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 800078e:	1d2a      	adds	r2, r5, #4
 8000790:	6829      	ldr	r1, [r5, #0]
 8000792:	a801      	add	r0, sp, #4
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <Lb_printf+0xe0>)
 8000796:	4615      	mov	r5, r2
 8000798:	4798      	blx	r3
 					break;
 800079a:	e7a1      	b.n	80006e0 <Lb_printf+0x14>
 800079c:	20000404 	.word	0x20000404
 80007a0:	0800029d 	.word	0x0800029d
 80007a4:	080004fd 	.word	0x080004fd
 80007a8:	08000341 	.word	0x08000341
 80007ac:	080002d5 	.word	0x080002d5

080007b0 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	460c      	mov	r4, r1
 80007b4:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 80007b6:	4b34      	ldr	r3, [pc, #208]	; (8000888 <Lb_vsprintf+0xd8>)
 80007b8:	2600      	movs	r6, #0
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80007ba:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 80008a0 <Lb_vsprintf+0xf0>
	pStrPrintBuf = pStr;
 80007be:	4f33      	ldr	r7, [pc, #204]	; (800088c <Lb_vsprintf+0xdc>)
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80007c0:	f04f 0c01 	mov.w	ip, #1
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 80007c4:	601e      	str	r6, [r3, #0]



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80007c6:	4e32      	ldr	r6, [pc, #200]	; (8000890 <Lb_vsprintf+0xe0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 80007c8:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80007ca:	f88e c000 	strb.w	ip, [lr]
	pStrPrintBuf = pStr;
 80007ce:	6038      	str	r0, [r7, #0]
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80007d0:	7820      	ldrb	r0, [r4, #0]
 80007d2:	b358      	cbz	r0, 800082c <Lb_vsprintf+0x7c>
	{
		if (*s=='%')
 80007d4:	2825      	cmp	r0, #37	; 0x25
 80007d6:	d12b      	bne.n	8000830 <Lb_vsprintf+0x80>
 80007d8:	a901      	add	r1, sp, #4
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 80007da:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 80007de:	1c63      	adds	r3, r4, #1
 80007e0:	f104 0c0a 	add.w	ip, r4, #10
 80007e4:	1b1f      	subs	r7, r3, r4
 80007e6:	469e      	mov	lr, r3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80007e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80007ec:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 80007f0:	2a01      	cmp	r2, #1
 80007f2:	d92b      	bls.n	800084c <Lb_vsprintf+0x9c>
 80007f4:	2878      	cmp	r0, #120	; 0x78
 80007f6:	d029      	beq.n	800084c <Lb_vsprintf+0x9c>
 80007f8:	2873      	cmp	r0, #115	; 0x73
 80007fa:	d027      	beq.n	800084c <Lb_vsprintf+0x9c>
 80007fc:	2825      	cmp	r0, #37	; 0x25
 80007fe:	d025      	beq.n	800084c <Lb_vsprintf+0x9c>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000800:	4563      	cmp	r3, ip
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000802:	461a      	mov	r2, r3
 8000804:	f801 0f01 	strb.w	r0, [r1, #1]!
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000808:	d1ec      	bne.n	80007e4 <Lb_vsprintf+0x34>
 800080a:	f89e 0001 	ldrb.w	r0, [lr, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800080e:	1c54      	adds	r4, r2, #1
 8000810:	2864      	cmp	r0, #100	; 0x64
 8000812:	d028      	beq.n	8000866 <Lb_vsprintf+0xb6>
 8000814:	d80f      	bhi.n	8000836 <Lb_vsprintf+0x86>
 8000816:	2825      	cmp	r0, #37	; 0x25
 8000818:	d02c      	beq.n	8000874 <Lb_vsprintf+0xc4>
 800081a:	2863      	cmp	r0, #99	; 0x63
 800081c:	d1d8      	bne.n	80007d0 <Lb_vsprintf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800081e:	7828      	ldrb	r0, [r5, #0]
 8000820:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000822:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000824:	1d2f      	adds	r7, r5, #4
 8000826:	463d      	mov	r5, r7
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000828:	2800      	cmp	r0, #0
 800082a:	d1d3      	bne.n	80007d4 <Lb_vsprintf+0x24>
			s++;
		}
	}
	
	return;
}
 800082c:	b005      	add	sp, #20
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000830:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000832:	3401      	adds	r4, #1
 8000834:	e7cc      	b.n	80007d0 <Lb_vsprintf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000836:	2873      	cmp	r0, #115	; 0x73
 8000838:	d01e      	beq.n	8000878 <Lb_vsprintf+0xc8>
 800083a:	2878      	cmp	r0, #120	; 0x78
 800083c:	d1c8      	bne.n	80007d0 <Lb_vsprintf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800083e:	1d2a      	adds	r2, r5, #4
 8000840:	6829      	ldr	r1, [r5, #0]
 8000842:	a801      	add	r0, sp, #4
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <Lb_vsprintf+0xe4>)
 8000846:	4615      	mov	r5, r2
 8000848:	4798      	blx	r3
					break;
 800084a:	e7c1      	b.n	80007d0 <Lb_vsprintf+0x20>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
                	break;
 800084c:	4672      	mov	r2, lr
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800084e:	ab04      	add	r3, sp, #16
 8000850:	441f      	add	r7, r3
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000852:	2864      	cmp	r0, #100	; 0x64
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 8000854:	f04f 0300 	mov.w	r3, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000858:	f807 0c0c 	strb.w	r0, [r7, #-12]
					format[i] = '\0';
 800085c:	f807 3c0b 	strb.w	r3, [r7, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000860:	f102 0401 	add.w	r4, r2, #1
 8000864:	d1d6      	bne.n	8000814 <Lb_vsprintf+0x64>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000866:	1d2a      	adds	r2, r5, #4
 8000868:	6829      	ldr	r1, [r5, #0]
 800086a:	a801      	add	r0, sp, #4
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <Lb_vsprintf+0xe8>)
 800086e:	4615      	mov	r5, r2
 8000870:	4798      	blx	r3
					break;
 8000872:	e7ad      	b.n	80007d0 <Lb_vsprintf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000874:	47b0      	blx	r6
 8000876:	e7ab      	b.n	80007d0 <Lb_vsprintf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000878:	1d2a      	adds	r2, r5, #4
 800087a:	6829      	ldr	r1, [r5, #0]
 800087c:	a801      	add	r0, sp, #4
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <Lb_vsprintf+0xec>)
 8000880:	4615      	mov	r5, r2
 8000882:	4798      	blx	r3
 					break;
 8000884:	e7a4      	b.n	80007d0 <Lb_vsprintf+0x20>
 8000886:	bf00      	nop
 8000888:	20000400 	.word	0x20000400
 800088c:	200004bc 	.word	0x200004bc
 8000890:	0800029d 	.word	0x0800029d
 8000894:	080004fd 	.word	0x080004fd
 8000898:	08000341 	.word	0x08000341
 800089c:	080002d5 	.word	0x080002d5
 80008a0:	20000404 	.word	0x20000404

080008a4 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 80008a4:	4668      	mov	r0, sp
 80008a6:	f020 0107 	bic.w	r1, r0, #7
 80008aa:	468d      	mov	sp, r1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80008ac:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <zero_loop+0x4e>)
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <zero_loop+0x52>)
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 80008b0:	b501      	push	{r0, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d20d      	bcs.n	80008d2 <Hw_StartUp_Init+0x2e>
 80008b6:	43d0      	mvns	r0, r2
 80008b8:	491d      	ldr	r1, [pc, #116]	; (8000930 <zero_loop+0x56>)
 80008ba:	4418      	add	r0, r3
 80008bc:	460b      	mov	r3, r1
 80008be:	f020 0003 	bic.w	r0, r0, #3
 80008c2:	3004      	adds	r0, #4
 80008c4:	4408      	add	r0, r1
	{
		*(pulDest++) = *(pulSrc++);
 80008c6:	f853 1b04 	ldr.w	r1, [r3], #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80008ca:	4283      	cmp	r3, r0
	{
		*(pulDest++) = *(pulSrc++);
 80008cc:	f842 1b04 	str.w	r1, [r2], #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80008d0:	d1f9      	bne.n	80008c6 <Hw_StartUp_Init+0x22>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 80008d2:	481b      	ldr	r0, [pc, #108]	; (8000940 <zero_loop+0x66>)
 80008d4:	491b      	ldr	r1, [pc, #108]	; (8000944 <zero_loop+0x6a>)
 80008d6:	f04f 0200 	mov.w	r2, #0

080008da <zero_loop>:
 80008da:	4288      	cmp	r0, r1
 80008dc:	bfb8      	it	lt
 80008de:	f840 2b04 	strlt.w	r2, [r0], #4
 80008e2:	dbfa      	blt.n	80008da <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <zero_loop+0x5a>)
 80008e6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80008ea:	6810      	ldr	r0, [r2, #0]
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80008ec:	4611      	mov	r1, r2
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80008ee:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80008f2:	6010      	str	r0, [r2, #0]
 80008f4:	e001      	b.n	80008fa <zero_loop+0x20>
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80008f6:	3b01      	subs	r3, #1
 80008f8:	d002      	beq.n	8000900 <zero_loop+0x26>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80008fa:	680a      	ldr	r2, [r1, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80008fc:	0392      	lsls	r2, r2, #14
 80008fe:	d5fa      	bpl.n	80008f6 <zero_loop+0x1c>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <zero_loop+0x5e>)
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait


    main();
 8000902:	490e      	ldr	r1, [pc, #56]	; (800093c <zero_loop+0x62>)
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	f042 0210 	orr.w	r2, r2, #16
 800090a:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f022 0203 	bic.w	r2, r2, #3
 8000912:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	f042 0202 	orr.w	r2, r2, #2
 800091a:	601a      	str	r2, [r3, #0]


    main();
 800091c:	4788      	blx	r1

}
 800091e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8000922:	4685      	mov	sp, r0
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000000 	.word	0x20000000
 800092c:	2000030c 	.word	0x2000030c
 8000930:	08003860 	.word	0x08003860
 8000934:	40021000 	.word	0x40021000
 8000938:	40022000 	.word	0x40022000
 800093c:	08000019 	.word	0x08000019
 8000940:	20000400 	.word	0x20000400
 8000944:	2000162c 	.word	0x2000162c

08000948 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <Hw_Init+0x4c>)
 800094c:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <Hw_Init+0x50>)
 8000950:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000952:	4e12      	ldr	r6, [pc, #72]	; (800099c <Hw_Init+0x54>)
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000954:	4912      	ldr	r1, [pc, #72]	; (80009a0 <Hw_Init+0x58>)
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <Hw_Init+0x5c>)
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <Hw_Init+0x60>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800095a:	4f14      	ldr	r7, [pc, #80]	; (80009ac <Hw_Init+0x64>)
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800095c:	4d14      	ldr	r5, [pc, #80]	; (80009b0 <Hw_Init+0x68>)
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800095e:	4c15      	ldr	r4, [pc, #84]	; (80009b4 <Hw_Init+0x6c>)
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000960:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 8000964:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <Hw_Init+0x70>)
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000968:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800096a:	602b      	str	r3, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800096c:	6023      	str	r3, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800096e:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 8000970:	4790      	blx	r2
	Hw_Uart_Init();
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <Hw_Init+0x74>)
 8000974:	4798      	blx	r3
	Hw_Led_Init();
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <Hw_Init+0x78>)
 8000978:	4798      	blx	r3
	Hw_Timer_Init();
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <Hw_Init+0x7c>)
 800097c:	4798      	blx	r3
	Hw_Si47xx_Init();
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <Hw_Init+0x80>)
 8000980:	4798      	blx	r3
	Hw_N5110G_Init();
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <Hw_Init+0x84>)
 8000984:	4798      	blx	r3
	Hw_I2C_Init();
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <Hw_Init+0x88>)
 8000988:	4798      	blx	r3
	
	Hw_VCom_Init();
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <Hw_Init+0x8c>)
 800098c:	4798      	blx	r3

	Hw_MPU6050_Init();
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <Hw_Init+0x90>)
 8000990:	4798      	blx	r3
 8000992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000994:	08000b75 	.word	0x08000b75
 8000998:	08000d8d 	.word	0x08000d8d
 800099c:	40010804 	.word	0x40010804
 80009a0:	40011004 	.word	0x40011004
 80009a4:	33444444 	.word	0x33444444
 80009a8:	40010800 	.word	0x40010800
 80009ac:	333334b3 	.word	0x333334b3
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	40010c04 	.word	0x40010c04
 80009b8:	08001751 	.word	0x08001751
 80009bc:	08000ac5 	.word	0x08000ac5
 80009c0:	08000bfd 	.word	0x08000bfd
 80009c4:	08000dbd 	.word	0x08000dbd
 80009c8:	08001011 	.word	0x08001011
 80009cc:	08001209 	.word	0x08001209
 80009d0:	08000f19 	.word	0x08000f19
 80009d4:	08000ef5 	.word	0x08000ef5
 80009d8:	08001bd5 	.word	0x08001bd5

080009dc <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 80009dc:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80009de:	2300      	movs	r3, #0
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	9b01      	ldr	r3, [sp, #4]
 80009e4:	4298      	cmp	r0, r3
 80009e6:	d905      	bls.n	80009f4 <Hw_Wait+0x18>
 80009e8:	9b01      	ldr	r3, [sp, #4]
 80009ea:	3301      	adds	r3, #1
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	4283      	cmp	r3, r0
 80009f2:	d3f9      	bcc.n	80009e8 <Hw_Wait+0xc>
}
 80009f4:	b002      	add	sp, #8
 80009f6:	4770      	bx	lr

080009f8 <Hw_Wait_ms>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80009f8:	f241 7370 	movw	r3, #6000	; 0x1770
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
 80009fc:	b082      	sub	sp, #8
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80009fe:	fb03 f000 	mul.w	r0, r3, r0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8000a02:	2200      	movs	r2, #0
 8000a04:	9201      	str	r2, [sp, #4]
 8000a06:	9b01      	ldr	r3, [sp, #4]
 8000a08:	4298      	cmp	r0, r3
 8000a0a:	d905      	bls.n	8000a18 <Hw_Wait_ms+0x20>
 8000a0c:	9b01      	ldr	r3, [sp, #4]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	9b01      	ldr	r3, [sp, #4]
 8000a14:	4298      	cmp	r0, r3
 8000a16:	d8f9      	bhi.n	8000a0c <Hw_Wait_ms+0x14>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
    Hw_Wait_Usec( msec*1000 );
}
 8000a18:	b002      	add	sp, #8
 8000a1a:	4770      	bx	lr

08000a1c <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000a1c:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <Hw_ISR_UART1_Handler+0x1c>)


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000a20:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <Hw_ISR_UART1_Handler+0x20>)
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000a28:	f801 2d01 	strb.w	r2, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	4798      	blx	r3
}
 8000a30:	b003      	add	sp, #12
 8000a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a36:	bf00      	nop
 8000a38:	40013804 	.word	0x40013804
 8000a3c:	08000ca1 	.word	0x08000ca1

08000a40 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a44:	f240 2e71 	movw	lr, #625	; 0x271
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a48:	4d15      	ldr	r5, [pc, #84]	; (8000aa0 <Hw_Uart_Open_COM1+0x60>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a4a:	4c16      	ldr	r4, [pc, #88]	; (8000aa4 <Hw_Uart_Open_COM1+0x64>)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a4c:	682b      	ldr	r3, [r5, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 8000a4e:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8000abc <Hw_Uart_Open_COM1+0x7c>
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a52:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000ac0 <Hw_Uart_Open_COM1+0x80>
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a56:	4f14      	ldr	r7, [pc, #80]	; (8000aa8 <Hw_Uart_Open_COM1+0x68>)
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a58:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a5e:	4e13      	ldr	r6, [pc, #76]	; (8000aac <Hw_Uart_Open_COM1+0x6c>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a60:	f04f 090c 	mov.w	r9, #12
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a64:	602b      	str	r3, [r5, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a66:	f8c4 9000 	str.w	r9, [r4]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a6a:	f8c8 2000 	str.w	r2, [r8]
	REG_USART1_CR3  = 0;
 8000a6e:	f8cc 2000 	str.w	r2, [ip]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a72:	f8c7 e000 	str.w	lr, [r7]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a76:	6833      	ldr	r3, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000a78:	4d0d      	ldr	r5, [pc, #52]	; (8000ab0 <Hw_Uart_Open_COM1+0x70>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a7a:	f043 0320 	orr.w	r3, r3, #32
 8000a7e:	6033      	str	r3, [r6, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	f043 0320 	orr.w	r3, r3, #32
 8000a86:	6023      	str	r3, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000a88:	6068      	str	r0, [r5, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8000a8a:	60a9      	str	r1, [r5, #8]
	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <Hw_Uart_Open_COM1+0x74>)
 8000a8e:	2025      	movs	r0, #37	; 0x25
 8000a90:	4909      	ldr	r1, [pc, #36]	; (8000ab8 <Hw_Uart_Open_COM1+0x78>)
 8000a92:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a9a:	6023      	str	r3, [r4, #0]
 8000a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aa0:	40021018 	.word	0x40021018
 8000aa4:	4001380c 	.word	0x4001380c
 8000aa8:	40013808 	.word	0x40013808
 8000aac:	e000e104 	.word	0xe000e104
 8000ab0:	200004c0 	.word	0x200004c0
 8000ab4:	08000d9d 	.word	0x08000d9d
 8000ab8:	08000a1d 	.word	0x08000a1d
 8000abc:	40013814 	.word	0x40013814
 8000ac0:	40013810 	.word	0x40013810

08000ac4 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8000ac4:	b508      	push	{r3, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <Hw_Uart_Init+0x24>)
 8000ac8:	4798      	blx	r3
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <Hw_Uart_Init+0x28>)
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000acc:	2200      	movs	r2, #0
 8000ace:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000ad2:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	330c      	adds	r3, #12
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d1fa      	bne.n	8000ad2 <Hw_Uart_Init+0xe>
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000adc:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <Hw_Uart_Init+0x2c>)
 8000ae4:	4798      	blx	r3
 8000ae6:	bd08      	pop	{r3, pc}
 8000ae8:	08000c51 	.word	0x08000c51
 8000aec:	200004c0 	.word	0x200004c0
 8000af0:	08000a41 	.word	0x08000a41

08000af4 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000af4:	b530      	push	{r4, r5, lr}
 8000af6:	4604      	mov	r4, r0
 8000af8:	b083      	sub	sp, #12
	u8 Uart_GetData = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	4d07      	ldr	r5, [pc, #28]	; (8000b1c <Hw_Uart_Getch+0x28>)
 8000afe:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8000b02:	4620      	mov	r0, r4
 8000b04:	47a8      	blx	r5
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d0fb      	beq.n	8000b02 <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f10d 0107 	add.w	r1, sp, #7
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <Hw_Uart_Getch+0x2c>)
 8000b12:	4798      	blx	r3

	return Uart_GetData;
}
 8000b14:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000b18:	b003      	add	sp, #12
 8000b1a:	bd30      	pop	{r4, r5, pc}
 8000b1c:	08000c71 	.word	0x08000c71
 8000b20:	08000d19 	.word	0x08000d19

08000b24 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 8000b24:	280a      	cmp	r0, #10
 8000b26:	d007      	beq.n	8000b38 <print_byte+0x14>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <print_byte+0x24>)
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	061b      	lsls	r3, r3, #24
 8000b2e:	d5fc      	bpl.n	8000b2a <print_byte+0x6>
    
    REG_USART1_DR = Uart_PutData;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <print_byte+0x28>)
 8000b32:	b2c0      	uxtb	r0, r0
 8000b34:	6018      	str	r0, [r3, #0]
 8000b36:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8000b38:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <print_byte+0x24>)
 8000b3a:	6813      	ldr	r3, [r2, #0]
 8000b3c:	0619      	lsls	r1, r3, #24
 8000b3e:	d5fc      	bpl.n	8000b3a <print_byte+0x16>
    
    REG_USART1_DR = Uart_PutData;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <print_byte+0x28>)
 8000b42:	220d      	movs	r2, #13
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e7ef      	b.n	8000b28 <print_byte+0x4>
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	40013804 	.word	0x40013804

08000b50 <get_byte>:
#endif    
}


char get_byte(void)
{
 8000b50:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 8000b52:	2000      	movs	r0, #0
 8000b54:	4b01      	ldr	r3, [pc, #4]	; (8000b5c <get_byte+0xc>)
 8000b56:	4798      	blx	r3
#endif
	
	return Ch;
}
 8000b58:	bd08      	pop	{r3, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08000af5 	.word	0x08000af5

08000b60 <get_byte_check>:


char get_byte_check(void)
{
 8000b60:	b508      	push	{r3, lr}
	char Ch = FALSE;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 ) Ch = TRUE;	
 8000b62:	2000      	movs	r0, #0
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <get_byte_check+0x10>)
 8000b66:	4798      	blx	r3
#endif
	
	return Ch;
}
 8000b68:	3000      	adds	r0, #0
 8000b6a:	bf18      	it	ne
 8000b6c:	2001      	movne	r0, #1
 8000b6e:	bd08      	pop	{r3, pc}
 8000b70:	08000c71 	.word	0x08000c71

08000b74 <Hw_PLL_Init>:
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b74:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <Hw_PLL_Init+0x7c>)
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000b76:	491f      	ldr	r1, [pc, #124]	; (8000bf4 <Hw_PLL_Init+0x80>)
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000b78:	4602      	mov	r2, r0
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000b7a:	680b      	ldr	r3, [r1, #0]
 8000b7c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b84:	600b      	str	r3, [r1, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000b86:	680b      	ldr	r3, [r1, #0]
 8000b88:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000b8c:	600b      	str	r3, [r1, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b8e:	6803      	ldr	r3, [r0, #0]
 8000b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b94:	6003      	str	r3, [r0, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000b96:	6813      	ldr	r3, [r2, #0]
 8000b98:	019b      	lsls	r3, r3, #6
 8000b9a:	d5fc      	bpl.n	8000b96 <Hw_PLL_Init+0x22>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <Hw_PLL_Init+0x80>)
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000b9e:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000ba0:	6819      	ldr	r1, [r3, #0]
 8000ba2:	f021 0103 	bic.w	r1, r1, #3
 8000ba6:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	f041 0102 	orr.w	r1, r1, #2
 8000bae:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8000bb6:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8000bb8:	6819      	ldr	r1, [r3, #0]
 8000bba:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000bbe:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8000bc0:	6819      	ldr	r1, [r3, #0]
 8000bc2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000bc6:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8000bc8:	6819      	ldr	r1, [r3, #0]
 8000bca:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8000bce:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000bd4:	6813      	ldr	r3, [r2, #0]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d1fa      	bne.n	8000bd4 <Hw_PLL_Init+0x60>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000bde:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <Hw_PLL_Init+0x84>)
 8000be0:	6813      	ldr	r3, [r2, #0]
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be6:	f043 031d 	orr.w	r3, r3, #29
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40021004 	.word	0x40021004
 8000bf8:	40021018 	.word	0x40021018

08000bfc <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <Hw_Led_Init+0x34>)
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <Hw_Led_Init+0x38>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000c00:	6811      	ldr	r1, [r2, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <Hw_Led_Init+0x3c>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000c04:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8000c08:	6011      	str	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000c0a:	6811      	ldr	r1, [r2, #0]
 8000c0c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000c10:	6011      	str	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000c18:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000c20:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	601a      	str	r2, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8000c26:	6803      	ldr	r3, [r0, #0]
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6003      	str	r3, [r0, #0]
 8000c2e:	4770      	bx	lr
 8000c30:	40010004 	.word	0x40010004
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40010c0c 	.word	0x40010c0c

08000c3c <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8000c3c:	b920      	cbnz	r0, 8000c48 <Hw_Led_Toggle+0xc>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 8000c3e:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <Hw_Led_Toggle+0x10>)
 8000c40:	6813      	ldr	r3, [r2, #0]
 8000c42:	f083 0308 	eor.w	r3, r3, #8
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40010c0c 	.word	0x40010c0c

08000c50 <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <Hw_Uart_Q_Init+0x18>)
 8000c52:	4906      	ldr	r1, [pc, #24]	; (8000c6c <Hw_Uart_Q_Init+0x1c>)
 8000c54:	f103 000e 	add.w	r0, r3, #14
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f823 2f02 	strh.w	r2, [r3, #2]!
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000c5e:	4283      	cmp	r3, r0
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000c60:	f821 2f02 	strh.w	r2, [r1, #2]!
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000c64:	d1f9      	bne.n	8000c5a <Hw_Uart_Q_Init+0xa>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 8000c66:	4770      	bx	lr
 8000c68:	200005f2 	.word	0x200005f2
 8000c6c:	20000602 	.word	0x20000602

08000c70 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HW_UART_Q_VAILD+0x24>)
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HW_UART_Q_VAILD+0x28>)
 8000c74:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000c78:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <HW_UART_Q_VAILD+0x2c>)
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	3320      	adds	r3, #32
 8000c82:	4018      	ands	r0, r3
 8000c84:	2800      	cmp	r0, #0
 8000c86:	db00      	blt.n	8000c8a <HW_UART_Q_VAILD+0x1a>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000c88:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000c8a:	3801      	subs	r0, #1
 8000c8c:	f060 001f 	orn	r0, r0, #31
 8000c90:	3001      	adds	r0, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000c92:	4770      	bx	lr
 8000c94:	20000604 	.word	0x20000604
 8000c98:	200005f4 	.word	0x200005f4
 8000c9c:	8000001f 	.word	0x8000001f

08000ca0 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000ca0:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000ca2:	4e19      	ldr	r6, [pc, #100]	; (8000d08 <Hw_Uart_Q_Push+0x68>)
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <Hw_Uart_Q_Push+0x6c>)
 8000ca6:	f836 3010 	ldrh.w	r3, [r6, r0, lsl #1]
 8000caa:	f932 4010 	ldrsh.w	r4, [r2, r0, lsl #1]
 8000cae:	b21d      	sxth	r5, r3
 8000cb0:	1b2c      	subs	r4, r5, r4
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <Hw_Uart_Q_Push+0x70>)
 8000cb4:	3420      	adds	r4, #32
 8000cb6:	4022      	ands	r2, r4
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	db16      	blt.n	8000cea <Hw_Uart_Q_Push+0x4a>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000cbc:	2a1f      	cmp	r2, #31
 8000cbe:	d01a      	beq.n	8000cf6 <Hw_Uart_Q_Push+0x56>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b29b      	uxth	r3, r3
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <Hw_Uart_Q_Push+0x70>)
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cc6:	f826 3010 	strh.w	r3, [r6, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cca:	b21b      	sxth	r3, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000ccc:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cce:	401a      	ands	r2, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cd0:	eb00 1140 	add.w	r1, r0, r0, lsl #5
 8000cd4:	4c0f      	ldr	r4, [pc, #60]	; (8000d14 <Hw_Uart_Q_Push+0x74>)
 8000cd6:	440d      	add	r5, r1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cd8:	2a00      	cmp	r2, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cda:	5566      	strb	r6, [r4, r5]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <Hw_Uart_Q_Push+0x68>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cde:	db0d      	blt.n	8000cfc <Hw_Uart_Q_Push+0x5c>

	return TRUE;
}
 8000ce0:	bc70      	pop	{r4, r5, r6}
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000ce2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]

	return TRUE;
 8000ce6:	2001      	movs	r0, #1
}
 8000ce8:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000cea:	3a01      	subs	r2, #1
 8000cec:	f062 021f 	orn	r2, r2, #31
 8000cf0:	3201      	adds	r2, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000cf2:	2a1f      	cmp	r2, #31
 8000cf4:	d1e4      	bne.n	8000cc0 <Hw_Uart_Q_Push+0x20>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
}
 8000cf6:	bc70      	pop	{r4, r5, r6}
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000cf8:	2000      	movs	r0, #0

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
}
 8000cfa:	4770      	bx	lr
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	f062 021f 	orn	r2, r2, #31
 8000d02:	3201      	adds	r2, #1
 8000d04:	e7ec      	b.n	8000ce0 <Hw_Uart_Q_Push+0x40>
 8000d06:	bf00      	nop
 8000d08:	20000604 	.word	0x20000604
 8000d0c:	200005f4 	.word	0x200005f4
 8000d10:	8000001f 	.word	0x8000001f
 8000d14:	200004fc 	.word	0x200004fc

08000d18 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000d18:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d1a:	4e18      	ldr	r6, [pc, #96]	; (8000d7c <Hw_Uart_Q_Pop+0x64>)
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <Hw_Uart_Q_Pop+0x68>)
 8000d1e:	f836 4010 	ldrh.w	r4, [r6, r0, lsl #1]
 8000d22:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000d26:	b225      	sxth	r5, r4
 8000d28:	1b52      	subs	r2, r2, r5
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <Hw_Uart_Q_Pop+0x6c>)
 8000d2c:	3220      	adds	r2, #32
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db15      	blt.n	8000d60 <Hw_Uart_Q_Pop+0x48>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000d34:	b1d3      	cbz	r3, 8000d6c <Hw_Uart_Q_Pop+0x54>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d36:	eb00 1340 	add.w	r3, r0, r0, lsl #5
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <Hw_Uart_Q_Pop+0x70>)
 8000d3c:	441d      	add	r5, r3
 8000d3e:	5d53      	ldrb	r3, [r2, r5]
 8000d40:	3401      	adds	r4, #1
 8000d42:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
 8000d46:	700b      	strb	r3, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d48:	f936 1010 	ldrsh.w	r1, [r6, r0, lsl #1]
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <Hw_Uart_Q_Pop+0x6c>)
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <Hw_Uart_Q_Pop+0x64>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d50:	400b      	ands	r3, r1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0d      	blt.n	8000d72 <Hw_Uart_Q_Pop+0x5a>

    return TRUE;
}
 8000d56:	bc70      	pop	{r4, r5, r6}
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d58:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]

    return TRUE;
 8000d5c:	2001      	movs	r0, #1
}
 8000d5e:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d60:	3b01      	subs	r3, #1
 8000d62:	f063 031f 	orn	r3, r3, #31
 8000d66:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1e4      	bne.n	8000d36 <Hw_Uart_Q_Pop+0x1e>
	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
}
 8000d6c:	bc70      	pop	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000d6e:	4618      	mov	r0, r3
	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
}
 8000d70:	4770      	bx	lr
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f063 031f 	orn	r3, r3, #31
 8000d78:	3301      	adds	r3, #1
 8000d7a:	e7ec      	b.n	8000d56 <Hw_Uart_Q_Pop+0x3e>
 8000d7c:	200005f4 	.word	0x200005f4
 8000d80:	20000604 	.word	0x20000604
 8000d84:	8000001f 	.word	0x8000001f
 8000d88:	200004fc 	.word	0x200004fc

08000d8c <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000d8c:	4a01      	ldr	r2, [pc, #4]	; (8000d94 <Hw_ISR_Init+0x8>)
 8000d8e:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <Hw_ISR_Init+0xc>)
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	4770      	bx	lr
 8000d94:	20000800 	.word	0x20000800
 8000d98:	e000ed08 	.word	0xe000ed08

08000d9c <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <Hw_ISR_SetIRQFunc+0xc>)
 8000d9e:	3010      	adds	r0, #16
 8000da0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000800 	.word	0x20000800

08000dac <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <Hw_ISR_SetIRQFuncByAddr+0xc>)
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000dae:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000db0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000800 	.word	0x20000800

08000dbc <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8000dbc:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8000dbe:	4d15      	ldr	r5, [pc, #84]	; (8000e14 <Hw_Timer_Init+0x58>)
 8000dc0:	782b      	ldrb	r3, [r5, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d024      	beq.n	8000e10 <Hw_Timer_Init+0x54>
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <Hw_Timer_Init+0x5c>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8000dce:	701a      	strb	r2, [r3, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000dd0:	805a      	strh	r2, [r3, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8000dd2:	809a      	strh	r2, [r3, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	3310      	adds	r3, #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000dd8:	428b      	cmp	r3, r1
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000dda:	f04f 0400 	mov.w	r4, #0
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000dde:	d1f6      	bne.n	8000dce <Hw_Timer_Init+0x12>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000de0:	203c      	movs	r0, #60	; 0x3c
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <Hw_Timer_Init+0x60>)
 8000de4:	4622      	mov	r2, r4
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <Hw_Timer_Init+0x64>)
 8000de8:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <Hw_Timer_Init+0x68>)
	
	REG_STK_VAL  = 0;	
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <Hw_Timer_Init+0x6c>)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000dee:	480f      	ldr	r0, [pc, #60]	; (8000e2c <Hw_Timer_Init+0x70>)
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <Hw_Timer_Init+0x74>)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000df2:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 8000df4:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000df6:	681a      	ldr	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8000df8:	2101      	movs	r1, #1

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000dfa:	f042 0204 	orr.w	r2, r2, #4
 8000dfe:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	f042 0202 	orr.w	r2, r2, #2
 8000e06:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8000e0e:	7029      	strb	r1, [r5, #0]
 8000e10:	bd38      	pop	{r3, r4, r5, pc}
 8000e12:	bf00      	nop
 8000e14:	20000478 	.word	0x20000478
 8000e18:	20000408 	.word	0x20000408
 8000e1c:	08000ea5 	.word	0x08000ea5
 8000e20:	08000dad 	.word	0x08000dad
 8000e24:	e000e014 	.word	0xe000e014
 8000e28:	e000e018 	.word	0xe000e018
 8000e2c:	0001193f 	.word	0x0001193f
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000e34:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <Hw_Timer_Tick+0x64>)
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8000e36:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8000e38:	6813      	ldr	r3, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000e3a:	4918      	ldr	r1, [pc, #96]	; (8000e9c <Hw_Timer_Tick+0x68>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000e40:	880b      	ldrh	r3, [r1, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b11b      	cbz	r3, 8000e4e <Hw_Timer_Tick+0x1a>
 8000e46:	880b      	ldrh	r3, [r1, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	800b      	strh	r3, [r1, #0]
 8000e4e:	4c14      	ldr	r4, [pc, #80]	; (8000ea0 <Hw_Timer_Tick+0x6c>)
 8000e50:	f104 0570 	add.w	r5, r4, #112	; 0x70
 8000e54:	e002      	b.n	8000e5c <Hw_Timer_Tick+0x28>
 8000e56:	3410      	adds	r4, #16
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000e58:	42ac      	cmp	r4, r5
 8000e5a:	d01b      	beq.n	8000e94 <Hw_Timer_Tick+0x60>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000e5c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d1f8      	bne.n	8000e56 <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000e64:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	f824 3c02 	strh.w	r3, [r4, #-2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f0      	bne.n	8000e56 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000e74:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8000e78:	3410      	adds	r4, #16
 8000e7a:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000e7c:	f834 2c10 	ldrh.w	r2, [r4, #-16]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000e80:	bf08      	it	eq
 8000e82:	f804 3c14 	strbeq.w	r3, [r4, #-20]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000e86:	f824 2c12 	strh.w	r2, [r4, #-18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000e8a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8000e8e:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000e90:	42ac      	cmp	r4, r5
 8000e92:	d1e3      	bne.n	8000e5c <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 8000e94:	bd38      	pop	{r3, r4, r5, pc}
 8000e96:	bf00      	nop
 8000e98:	2000047c 	.word	0x2000047c
 8000e9c:	20000480 	.word	0x20000480
 8000ea0:	2000040c 	.word	0x2000040c

08000ea4 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8000ea4:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8000ea6:	4b01      	ldr	r3, [pc, #4]	; (8000eac <Hw_Timer_ISR+0x8>)
 8000ea8:	4798      	blx	r3
 8000eaa:	bd08      	pop	{r3, pc}
 8000eac:	08000e35 	.word	0x08000e35

08000eb0 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8000eb0:	b430      	push	{r4, r5}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000eb2:	4c05      	ldr	r4, [pc, #20]	; (8000ec8 <Hw_Timer_Set+0x18>)
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8000eb4:	9d02      	ldr	r5, [sp, #8]
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000eb6:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8000eba:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000ebc:	60c5      	str	r5, [r0, #12]
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8000ebe:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8000ec0:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8000ec2:	8081      	strh	r1, [r0, #4]
}
 8000ec4:	bc30      	pop	{r4, r5}
 8000ec6:	4770      	bx	lr
 8000ec8:	20000408 	.word	0x20000408

08000ecc <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8000ecc:	2806      	cmp	r0, #6
 8000ece:	d803      	bhi.n	8000ed8 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <Hw_Timer_Start+0x10>)
 8000ed2:	0100      	lsls	r0, r0, #4
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	541a      	strb	r2, [r3, r0]
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000408 	.word	0x20000408

08000ee0 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8000ee0:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <Hw_Timer_Delay_ms+0x10>)
 8000ee2:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8000ee4:	8813      	ldrh	r3, [r2, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1fb      	bne.n	8000ee4 <Hw_Timer_Delay_ms+0x4>
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000480 	.word	0x20000480

08000ef4 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000ef4:	b508      	push	{r3, lr}
	Set_System();
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <Hw_VCom_Init+0x14>)
 8000ef8:	4798      	blx	r3
	Set_USBClock();
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <Hw_VCom_Init+0x18>)
 8000efc:	4798      	blx	r3
	USB_Interrupts_Config();
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <Hw_VCom_Init+0x1c>)
 8000f00:	4798      	blx	r3
	USB_Init();	
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <Hw_VCom_Init+0x20>)
 8000f04:	4798      	blx	r3
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	08002415 	.word	0x08002415
 8000f0c:	08002431 	.word	0x08002431
 8000f10:	08002471 	.word	0x08002471
 8000f14:	08002f85 	.word	0x08002f85

08000f18 <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 8000f18:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	#if HW_I2C_USE_SW_I2C == 1
	Hw_I2C_SW_Init();	
	#else
	Hw_I2C_HW_Init();		
 8000f1a:	4b01      	ldr	r3, [pc, #4]	; (8000f20 <Hw_I2C_Init+0x8>)
 8000f1c:	4798      	blx	r3
 8000f1e:	bd08      	pop	{r3, pc}
 8000f20:	08000f6d 	.word	0x08000f6d

08000f24 <Hw_I2C_HW_IO_Setup>:
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8000f24:	490f      	ldr	r1, [pc, #60]	; (8000f64 <Hw_I2C_HW_IO_Setup+0x40>)


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <Hw_I2C_HW_IO_Setup+0x44>)
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8000f28:	680a      	ldr	r2, [r1, #0]
 8000f2a:	f042 0202 	orr.w	r2, r2, #2
 8000f2e:	600a      	str	r2, [r1, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f022 020f 	bic.w	r2, r2, #15
 8000f36:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f042 0203 	orr.w	r2, r2, #3
 8000f3e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f042 020c 	orr.w	r2, r2, #12
 8000f46:	601a      	str	r2, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f4e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000f56:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40010004 	.word	0x40010004
 8000f68:	40010c04 	.word	0x40010c04

08000f6c <Hw_I2C_HW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_HW_Init( void )
{
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8000f6e:	f248 051e 	movw	r5, #32798	; 0x801e
	u32 SR;


	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <Hw_I2C_HW_Init+0x4c>)
 8000f74:	4798      	blx	r3

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8000f76:	4e11      	ldr	r6, [pc, #68]	; (8000fbc <Hw_I2C_HW_Init+0x50>)
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <Hw_I2C_HW_Init+0x54>)
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <Hw_I2C_HW_Init+0x58>)
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8000f7c:	4c12      	ldr	r4, [pc, #72]	; (8000fc8 <Hw_I2C_HW_Init+0x5c>)
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8000f7e:	4913      	ldr	r1, [pc, #76]	; (8000fcc <Hw_I2C_HW_Init+0x60>)
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8000f80:	2004      	movs	r0, #4
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8000f82:	f04f 0e00 	mov.w	lr, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8000f86:	2724      	movs	r7, #36	; 0x24
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8000f88:	f8c3 e000 	str.w	lr, [r3]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8000f8c:	6037      	str	r7, [r6, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8000f8e:	6025      	str	r5, [r4, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8000f90:	6010      	str	r0, [r2, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8000f92:	680a      	ldr	r2, [r1, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <Hw_I2C_HW_Init+0x64>)
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8000f96:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000f9a:	600a      	str	r2, [r1, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8000f9c:	681a      	ldr	r2, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8000f9e:	f5a1 31de 	sub.w	r1, r1, #113664	; 0x1bc00
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8000fa2:	f022 0202 	bic.w	r2, r2, #2
 8000fa6:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8000fa8:	681a      	ldr	r2, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8000faa:	3904      	subs	r1, #4
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

	SR = REG_I2C1_SR1;
 8000fb2:	6803      	ldr	r3, [r0, #0]
	SR = REG_I2C1_SR2;
 8000fb4:	680b      	ldr	r3, [r1, #0]
 8000fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb8:	08000f25 	.word	0x08000f25
 8000fbc:	40005404 	.word	0x40005404
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	40005420 	.word	0x40005420
 8000fc8:	4000541c 	.word	0x4000541c
 8000fcc:	4002101c 	.word	0x4002101c
 8000fd0:	40005414 	.word	0x40005414

08000fd4 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 8000fd4:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8000fd6:	4c0c      	ldr	r4, [pc, #48]	; (8001008 <Hw_Si47xx_Reset+0x34>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 8000fd8:	4d0c      	ldr	r5, [pc, #48]	; (800100c <Hw_Si47xx_Reset+0x38>)
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8000fde:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8000fe0:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8000fe2:	f043 0320 	orr.w	r3, r3, #32
 8000fe6:	6023      	str	r3, [r4, #0]
	Hw_Wait(100);
 8000fe8:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8000fea:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(500);	
 8000fec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 8000ff6:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8000ff8:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	6023      	str	r3, [r4, #0]
	Hw_Wait(100);
 8001002:	47a8      	blx	r5
 8001004:	bd38      	pop	{r3, r4, r5, pc}
 8001006:	bf00      	nop
 8001008:	40010c0c 	.word	0x40010c0c
 800100c:	080009dd 	.word	0x080009dd

08001010 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8001010:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <Hw_Si47xx_Init+0x24>)
 8001014:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <Hw_Si47xx_Init+0x28>)
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8001018:	4908      	ldr	r1, [pc, #32]	; (800103c <Hw_Si47xx_Init+0x2c>)

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001020:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 8001028:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	601a      	str	r2, [r3, #0]
	

	Hw_Si47xx_Reset();
 800102e:	4788      	blx	r1
 8001030:	bd08      	pop	{r3, pc}
 8001032:	bf00      	nop
 8001034:	08000f19 	.word	0x08000f19
 8001038:	40010c00 	.word	0x40010c00
 800103c:	08000fd5 	.word	0x08000fd5

08001040 <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <Hw_SPI_Ch2_Init+0x68>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Ch2_Init(void)
{
 8001042:	b430      	push	{r4, r5}

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8001044:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001046:	f244 051c 	movw	r5, #16412	; 0x401c

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 800104a:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 800104e:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8001050:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <Hw_SPI_Ch2_Init+0x6c>)
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8001054:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8001058:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 800105a:	6819      	ldr	r1, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 800105c:	4814      	ldr	r0, [pc, #80]	; (80010b0 <Hw_SPI_Ch2_Init+0x70>)
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 800105e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8001062:	6019      	str	r1, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8001064:	6819      	ldr	r1, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001066:	2404      	movs	r4, #4
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 8001068:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800106c:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001074:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800107c:	6019      	str	r1, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 800107e:	6819      	ldr	r1, [r3, #0]
 8001080:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 8001084:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
 800108c:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001094:	6019      	str	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 8001096:	6015      	str	r5, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001098:	6004      	str	r4, [r0, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 800109a:	6813      	ldr	r3, [r2, #0]
        | ( 1 <<  2 );  // SSOE      - SS output enable
        				//             0 : Disabled
		                //             1 : Enabled

	Hw_SPI_Enable(HW_SPI_CH2);	
}
 800109c:	bc30      	pop	{r4, r5}
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 800109e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a2:	6013      	str	r3, [r2, #0]
        | ( 1 <<  2 );  // SSOE      - SS output enable
        				//             0 : Disabled
		                //             1 : Enabled

	Hw_SPI_Enable(HW_SPI_CH2);	
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40010c04 	.word	0x40010c04
 80010ac:	40003800 	.word	0x40003800
 80010b0:	40003804 	.word	0x40003804

080010b4 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 80010b4:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 80010b6:	4c07      	ldr	r4, [pc, #28]	; (80010d4 <Hw_SPI_Init+0x20>)
 80010b8:	7823      	ldrb	r3, [r4, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d008      	beq.n	80010d0 <Hw_SPI_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <Hw_SPI_Init+0x24>)
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 80010c0:	4906      	ldr	r1, [pc, #24]	; (80010dc <Hw_SPI_Init+0x28>)
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6013      	str	r3, [r2, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 80010ca:	4788      	blx	r1

	Called = 1;	
 80010cc:	2301      	movs	r3, #1
 80010ce:	7023      	strb	r3, [r4, #0]
 80010d0:	bd10      	pop	{r4, pc}
 80010d2:	bf00      	nop
 80010d4:	20000482 	.word	0x20000482
 80010d8:	4002101c 	.word	0x4002101c
 80010dc:	08001041 	.word	0x08001041

080010e0 <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 80010e0:	2801      	cmp	r0, #1
 80010e2:	d108      	bne.n	80010f6 <Hw_SPI_StartDMA+0x16>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <Hw_SPI_StartDMA+0x18>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f042 0202 	orr.w	r2, r2, #2
 80010ec:	601a      	str	r2, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	f042 0201 	orr.w	r2, r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	4770      	bx	lr
 80010f8:	40003804 	.word	0x40003804

080010fc <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 80010fc:	2801      	cmp	r0, #1
 80010fe:	d10c      	bne.n	800111a <Hw_SPI_Write8Bit+0x1e>
 8001100:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001104:	480f      	ldr	r0, [pc, #60]	; (8001144 <Hw_SPI_Write8Bit+0x48>)
 8001106:	e002      	b.n	800110e <Hw_SPI_Write8Bit+0x12>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 8001108:	f113 33ff 	adds.w	r3, r3, #4294967295
 800110c:	d307      	bcc.n	800111e <Hw_SPI_Write8Bit+0x22>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800110e:	6802      	ldr	r2, [r0, #0]
 8001110:	0792      	lsls	r2, r2, #30
 8001112:	d5f9      	bpl.n	8001108 <Hw_SPI_Write8Bit+0xc>
			}
			if( TimeOut == 0 ) return 1;
 8001114:	b91b      	cbnz	r3, 800111e <Hw_SPI_Write8Bit+0x22>
 8001116:	2001      	movs	r0, #1
 8001118:	4770      	bx	lr
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 800111a:	2000      	movs	r0, #0
}
 800111c:	4770      	bx	lr
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <Hw_SPI_Write8Bit+0x4c>)

			
			TimeOut = 10000;	
			while( TimeOut-- )
 8001120:	f242 730f 	movw	r3, #9999	; 0x270f
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <Hw_SPI_Write8Bit+0x48>)
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 8001126:	6011      	str	r1, [r2, #0]
 8001128:	e002      	b.n	8001130 <Hw_SPI_Write8Bit+0x34>

			
			TimeOut = 10000;	
			while( TimeOut-- )
 800112a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800112e:	d304      	bcc.n	800113a <Hw_SPI_Write8Bit+0x3e>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001130:	6802      	ldr	r2, [r0, #0]
 8001132:	07d2      	lsls	r2, r2, #31
 8001134:	d5f9      	bpl.n	800112a <Hw_SPI_Write8Bit+0x2e>
			}
			if( TimeOut == 0 ) return 1;
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0ed      	beq.n	8001116 <Hw_SPI_Write8Bit+0x1a>
		
			ReadData = REG_SPI2_DR;
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <Hw_SPI_Write8Bit+0x4c>)
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 800113c:	2000      	movs	r0, #0
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
 800113e:	681b      	ldr	r3, [r3, #0]
			
			break;
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40003808 	.word	0x40003808
 8001148:	4000380c 	.word	0x4000380c

0800114c <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 800114c:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <Hw_N5100G_FrameTick+0x38>)
 8001150:	4798      	blx	r3
 8001152:	2801      	cmp	r0, #1
 8001154:	d00d      	beq.n	8001172 <Hw_N5100G_FrameTick+0x26>
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <Hw_N5100G_FrameTick+0x3c>)
 8001158:	681b      	ldr	r3, [r3, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 800115a:	b903      	cbnz	r3, 800115e <Hw_N5100G_FrameTick+0x12>
 800115c:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <Hw_N5100G_FrameTick+0x40>)
 8001160:	490b      	ldr	r1, [pc, #44]	; (8001190 <Hw_N5100G_FrameTick+0x44>)
 8001162:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <Hw_N5100G_FrameTick+0x48>)
 8001168:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 800116a:	2001      	movs	r0, #1
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <Hw_N5100G_FrameTick+0x4c>)
 800116e:	4798      	blx	r3
 8001170:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <Hw_N5100G_FrameTick+0x3c>)
 8001174:	6813      	ldr	r3, [r2, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 800117a:	3b01      	subs	r3, #1
 800117c:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0ec      	beq.n	800115c <Hw_N5100G_FrameTick+0x10>
 8001182:	e7ec      	b.n	800115e <Hw_N5100G_FrameTick+0x12>
 8001184:	080017e5 	.word	0x080017e5
 8001188:	20000b8c 	.word	0x20000b8c
 800118c:	20000990 	.word	0x20000990
 8001190:	20000b90 	.word	0x20000b90
 8001194:	08001771 	.word	0x08001771
 8001198:	080010e1 	.word	0x080010e1

0800119c <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 800119c:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 800119e:	4c06      	ldr	r4, [pc, #24]	; (80011b8 <Hw_N5110G_Reset+0x1c>)
	Hw_Timer_Delay_ms(10);
 80011a0:	200a      	movs	r0, #10
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 80011a2:	6823      	ldr	r3, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80011a4:	4a05      	ldr	r2, [pc, #20]	; (80011bc <Hw_N5110G_Reset+0x20>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 80011a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011aa:	6023      	str	r3, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80011ac:	4790      	blx	r2
	HW_N5110G_RESET_OFF();
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b4:	6023      	str	r3, [r4, #0]
 80011b6:	bd10      	pop	{r4, pc}
 80011b8:	40010c0c 	.word	0x40010c0c
 80011bc:	08000ee1 	.word	0x08000ee1

080011c0 <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 80011c0:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 80011c2:	4c07      	ldr	r4, [pc, #28]	; (80011e0 <Hw_N5110G_WriteCmd+0x20>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 80011c4:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 80011c6:	6823      	ldr	r3, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 80011c8:	2001      	movs	r0, #1
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 80011ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011ce:	6023      	str	r3, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <Hw_N5110G_WriteCmd+0x24>)
 80011d2:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011da:	6023      	str	r3, [r4, #0]
	
	return Ret;
}
 80011dc:	bd10      	pop	{r4, pc}
 80011de:	bf00      	nop
 80011e0:	40010c0c 	.word	0x40010c0c
 80011e4:	080010fd 	.word	0x080010fd

080011e8 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	4606      	mov	r6, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 80011ec:	4d05      	ldr	r5, [pc, #20]	; (8001204 <Hw_N5110G_Goto+0x1c>)
 80011ee:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 80011f2:	47a8      	blx	r5
 80011f4:	4604      	mov	r4, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 80011f6:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 80011fa:	47a8      	blx	r5
 80011fc:	4320      	orrs	r0, r4

	return Ret;
}
 80011fe:	b280      	uxth	r0, r0
 8001200:	bd70      	pop	{r4, r5, r6, pc}
 8001202:	bf00      	nop
 8001204:	080011c1 	.word	0x080011c1

08001208 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <Hw_N5110G_Init+0xac>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 800120c:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 800120e:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001210:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <Hw_N5110G_Init+0xb0>)
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8001212:	4d2a      	ldr	r5, [pc, #168]	; (80012bc <Hw_N5110G_Init+0xb4>)
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001214:	681a      	ldr	r2, [r3, #0]


	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
 8001216:	492a      	ldr	r1, [pc, #168]	; (80012c0 <Hw_N5110G_Init+0xb8>)
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001218:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800121c:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 800121e:	681a      	ldr	r2, [r3, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001220:	4e28      	ldr	r6, [pc, #160]	; (80012c4 <Hw_N5110G_Init+0xbc>)
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8001222:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001226:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001228:	681a      	ldr	r2, [r3, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 800122a:	2400      	movs	r4, #0
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 800122c:	601a      	str	r2, [r3, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 800122e:	681a      	ldr	r2, [r3, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8001230:	4f25      	ldr	r7, [pc, #148]	; (80012c8 <Hw_N5110G_Init+0xc0>)
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001232:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8001236:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800123e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	601a      	str	r2, [r3, #0]


	HW_N5110G_RESET_OFF();
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124a:	602b      	str	r3, [r5, #0]
	HW_N5110G_SEL_CMD();
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001252:	602b      	str	r3, [r5, #0]
	
	Hw_N5110G_Reset();
 8001254:	4788      	blx	r1
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001256:	2021      	movs	r0, #33	; 0x21
 8001258:	47b0      	blx	r6
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 800125a:	20c6      	movs	r0, #198	; 0xc6
 800125c:	47b0      	blx	r6
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 800125e:	2006      	movs	r0, #6
 8001260:	47b0      	blx	r6
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 8001262:	2013      	movs	r0, #19
 8001264:	47b0      	blx	r6
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 8001266:	2020      	movs	r0, #32
 8001268:	47b0      	blx	r6
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 800126a:	200c      	movs	r0, #12
 800126c:	47b0      	blx	r6
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 800126e:	4621      	mov	r1, r4
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <Hw_N5110G_Init+0xc4>)
 8001272:	4620      	mov	r0, r4
 8001274:	4798      	blx	r3
	
	
	HW_N5110G_SEL_DATA();
 8001276:	682b      	ldr	r3, [r5, #0]
	Hw_N5110G_Frame_Index    = 0;	
 8001278:	4e15      	ldr	r6, [pc, #84]	; (80012d0 <Hw_N5110G_Init+0xc8>)
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 800127a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800127e:	602b      	str	r3, [r5, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001280:	2121      	movs	r1, #33	; 0x21
 8001282:	9400      	str	r4, [sp, #0]
 8001284:	2202      	movs	r2, #2
 8001286:	2003      	movs	r0, #3
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <Hw_N5110G_Init+0xcc>)
 800128a:	4d13      	ldr	r5, [pc, #76]	; (80012d8 <Hw_N5110G_Init+0xd0>)
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 800128c:	8034      	strh	r4, [r6, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 800128e:	603c      	str	r4, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 8001290:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <Hw_N5110G_Init+0xd4>)
 8001294:	2003      	movs	r0, #3
 8001296:	4798      	blx	r3
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 8001298:	4622      	mov	r2, r4
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <Hw_N5110G_Init+0xd8>)
 800129c:	f503 71fc 	add.w	r1, r3, #504	; 0x1f8
 80012a0:	f803 2f01 	strb.w	r2, [r3, #1]!
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 80012a4:	428b      	cmp	r3, r1
 80012a6:	d1fb      	bne.n	80012a0 <Hw_N5110G_Init+0x98>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3302      	adds	r3, #2
 80012ac:	603b      	str	r3, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 80012ae:	b003      	add	sp, #12
 80012b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	080010b5 	.word	0x080010b5
 80012b8:	40010c04 	.word	0x40010c04
 80012bc:	40010c0c 	.word	0x40010c0c
 80012c0:	0800119d 	.word	0x0800119d
 80012c4:	080011c1 	.word	0x080011c1
 80012c8:	20000b8c 	.word	0x20000b8c
 80012cc:	080011e9 	.word	0x080011e9
 80012d0:	20000b88 	.word	0x20000b88
 80012d4:	0800114d 	.word	0x0800114d
 80012d8:	08000eb1 	.word	0x08000eb1
 80012dc:	08000ecd 	.word	0x08000ecd
 80012e0:	2000098f 	.word	0x2000098f

080012e4 <Hw_N5110G_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Clear( void )
{
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <Hw_N5110G_Clear+0x1c>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 80012e6:	2100      	movs	r1, #0
 80012e8:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 80012ec:	f803 1f01 	strb.w	r1, [r3, #1]!
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d1fb      	bne.n	80012ec <Hw_N5110G_Clear+0x8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <Hw_N5110G_Clear+0x20>)
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 80012f6:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80012f8:	6813      	ldr	r3, [r2, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	6013      	str	r3, [r2, #0]
	}
	
	Hw_N5110G_DrawRequest();
	
	return Ret;
}
 80012fe:	4770      	bx	lr
 8001300:	2000098f 	.word	0x2000098f
 8001304:	20000b8c 	.word	0x20000b8c

08001308 <Hw_N5110G_WriteStr>:
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001308:	7803      	ldrb	r3, [r0, #0]
 800130a:	b353      	cbz	r3, 8001362 <Hw_N5110G_WriteStr+0x5a>
 800130c:	f8df c060 	ldr.w	ip, [pc, #96]	; 8001370 <Hw_N5110G_WriteStr+0x68>
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
 8001310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001314:	4f14      	ldr	r7, [pc, #80]	; (8001368 <Hw_N5110G_WriteStr+0x60>)
 8001316:	f8bc 4000 	ldrh.w	r4, [ip]
 800131a:	f8df e058 	ldr.w	lr, [pc, #88]	; 8001374 <Hw_N5110G_WriteStr+0x6c>
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800131e:	4e13      	ldr	r6, [pc, #76]	; (800136c <Hw_N5110G_WriteStr+0x64>)
 8001320:	3b20      	subs	r3, #32
 8001322:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001326:	0059      	lsls	r1, r3, #1
 8001328:	1d8d      	adds	r5, r1, #6
 800132a:	4475      	add	r5, lr
 800132c:	4471      	add	r1, lr
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 800132e:	1c62      	adds	r2, r4, #1
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 8001330:	b292      	uxth	r2, r2
 8001332:	08d3      	lsrs	r3, r2, #3
 8001334:	fba6 8303 	umull	r8, r3, r6, r3
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
	{
		Ch = Hw_N5110G_Font6_8[CharData-32][i];
 8001338:	f811 8b01 	ldrb.w	r8, [r1], #1
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8001342:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
{
	u16 Ret = ERR_NONE;
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
 8001346:	42a9      	cmp	r1, r5
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteByte( u8 ByteData )
{
	u16 Ret = ERR_NONE;
	
	Hw_N5110G_TxFrameBuf[ Hw_N5110G_Frame_Index++ ] = ByteData;
 8001348:	f807 8004 	strb.w	r8, [r7, r4]
	Hw_N5110G_Frame_Index %= (HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT);
 800134c:	b29c      	uxth	r4, r3
{
	u16 Ret = ERR_NONE;
	u16 i;
	u8  Ch;
	
	for( i=0; i<6; i++ )
 800134e:	d1ee      	bne.n	800132e <Hw_N5110G_WriteStr+0x26>
 8001350:	f8ac 4000 	strh.w	r4, [ip]
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001354:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e1      	bne.n	8001320 <Hw_N5110G_WriteStr+0x18>
		Ret |= Hw_N5110G_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 800135c:	2000      	movs	r0, #0
 800135e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001362:	2000      	movs	r0, #0
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000990 	.word	0x20000990
 800136c:	20820821 	.word	0x20820821
 8001370:	20000b88 	.word	0x20000b88
 8001374:	20000000 	.word	0x20000000

08001378 <Hw_N5110G_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8001378:	b40c      	push	{r2, r3}
 800137a:	b530      	push	{r4, r5, lr}
 800137c:	460d      	mov	r5, r1
 800137e:	4604      	mov	r4, r0
 8001380:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8001382:	aa36      	add	r2, sp, #216	; 0xd8
 8001384:	f852 1b04 	ldr.w	r1, [r2], #4
 8001388:	4668      	mov	r0, sp
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <Hw_N5110G_Print+0x48>)

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 800138c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001390:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8001394:	4798      	blx	r3

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 8001396:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <Hw_N5110G_Print+0x4c>)
 800139c:	0064      	lsls	r4, r4, #1
 800139e:	eb04 0485 	add.w	r4, r4, r5, lsl #2

	Hw_N5110G_WriteStr( Str );		
 80013a2:	4668      	mov	r0, sp
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <Hw_N5110G_Print+0x50>)

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	

	Hw_N5110G_Frame_Index = y_str*HW_N5110G_BUF_WIDTH +x_str*6;
 80013a6:	8014      	strh	r4, [r2, #0]

	Hw_N5110G_WriteStr( Str );		
 80013a8:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <Hw_N5110G_Print+0x54>)
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 80013ac:	2000      	movs	r0, #0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80013ae:	6813      	ldr	r3, [r2, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
	Hw_N5110G_DrawRequest();
	
	Lb_va_end(ap);		
	
	return Ret;
}
 80013b4:	b033      	add	sp, #204	; 0xcc
 80013b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013ba:	b002      	add	sp, #8
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	080007b1 	.word	0x080007b1
 80013c4:	20000b88 	.word	0x20000b88
 80013c8:	08001309 	.word	0x08001309
 80013cc:	20000b8c 	.word	0x20000b8c

080013d0 <Hw_N5110G_DrawRequest>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 80013d0:	4a02      	ldr	r2, [pc, #8]	; (80013dc <Hw_N5110G_DrawRequest+0xc>)
 80013d2:	6813      	ldr	r3, [r2, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000b8c 	.word	0x20000b8c

080013e0 <Hw_N5110G_DrawCircle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 80013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e4:	b08b      	sub	sp, #44	; 0x2c
 80013e6:	9104      	str	r1, [sp, #16]
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 80013e8:	460c      	mov	r4, r1
 80013ea:	0051      	lsls	r1, r2, #1
 80013ec:	f1c1 0103 	rsb	r1, r1, #3
 80013f0:	b289      	uxth	r1, r1
 80013f2:	9103      	str	r1, [sp, #12]
 80013f4:	2100      	movs	r1, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawCircle( u16 Xpos, u16 Ypos, u16 Radius, u8 Mode )
{
 80013f6:	9305      	str	r3, [sp, #20]
 80013f8:	4683      	mov	fp, r0
 80013fa:	9006      	str	r0, [sp, #24]
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];
 80013fc:	4bd3      	ldr	r3, [pc, #844]	; (800174c <Hw_N5110G_DrawCircle+0x36c>)
{
	s16  D;		/* Decision Variable */ 
	u16  CurX;	/* Current X Value */
	u16  CurY;	/* Current Y Value */ 
  
	D    = 3 - (Radius << 1);
 80013fe:	9102      	str	r1, [sp, #8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001400:	f04f 0a54 	mov.w	sl, #84	; 0x54
 8001404:	e092      	b.n	800152c <Hw_N5110G_DrawCircle+0x14c>
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 8001406:	9f04      	ldr	r7, [sp, #16]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001408:	2101      	movs	r1, #1
	
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
 800140a:	eb02 0e07 	add.w	lr, r2, r7
 800140e:	fa1f fe8e 	uxth.w	lr, lr
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001412:	ea4f 06de 	mov.w	r6, lr, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001416:	fb0a f606 	mul.w	r6, sl, r6
	while (CurX <= CurY)
	{
		if( Mode == 0 )
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
 800141a:	1abf      	subs	r7, r7, r2
 800141c:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800141e:	08fd      	lsrs	r5, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001420:	eb06 080b 	add.w	r8, r6, fp
 8001424:	fb0a f505 	mul.w	r5, sl, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001428:	f00e 0e07 	and.w	lr, lr, #7
 800142c:	f813 c008 	ldrb.w	ip, [r3, r8]
 8001430:	fa01 fe0e 	lsl.w	lr, r1, lr
 8001434:	fa5f fe8e 	uxtb.w	lr, lr
 8001438:	ea4c 0c0e 	orr.w	ip, ip, lr
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800143c:	f803 c008 	strb.w	ip, [r3, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001440:	f007 0707 	and.w	r7, r7, #7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001444:	eb05 080b 	add.w	r8, r5, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001448:	fa01 fc07 	lsl.w	ip, r1, r7
 800144c:	f813 7008 	ldrb.w	r7, [r3, r8]
 8001450:	fa5f fc8c 	uxtb.w	ip, ip
 8001454:	ea47 070c 	orr.w	r7, r7, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001458:	f803 7008 	strb.w	r7, [r3, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800145c:	4406      	add	r6, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800145e:	f813 8006 	ldrb.w	r8, [r3, r6]
 8001462:	9901      	ldr	r1, [sp, #4]
 8001464:	ea4e 0e08 	orr.w	lr, lr, r8
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001468:	f803 e006 	strb.w	lr, [r3, r6]
 800146c:	9e04      	ldr	r6, [sp, #16]
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800146e:	08e7      	lsrs	r7, r4, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001470:	4405      	add	r5, r0
 8001472:	ebc1 0e06 	rsb	lr, r1, r6
 8001476:	fb0a f707 	mul.w	r7, sl, r7
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 800147a:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800147c:	f813 8005 	ldrb.w	r8, [r3, r5]
 8001480:	fa1f fe8e 	uxth.w	lr, lr
		{
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
 8001484:	1996      	adds	r6, r2, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 8001486:	ea4c 0c08 	orr.w	ip, ip, r8
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800148a:	b2b6      	uxth	r6, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_SetPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800148c:	ea4f 08de 	mov.w	r8, lr, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001490:	f803 c005 	strb.w	ip, [r3, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001494:	eb07 0906 	add.w	r9, r7, r6
 8001498:	fb0a f808 	mul.w	r8, sl, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 800149c:	2101      	movs	r1, #1
 800149e:	f004 0c07 	and.w	ip, r4, #7
 80014a2:	f813 5009 	ldrb.w	r5, [r3, r9]
 80014a6:	fa01 fc0c 	lsl.w	ip, r1, ip
 80014aa:	fa5f fc8c 	uxtb.w	ip, ip
 80014ae:	ea45 050c 	orr.w	r5, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80014b2:	f803 5009 	strb.w	r5, [r3, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80014b6:	4446      	add	r6, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80014b8:	f00e 0e07 	and.w	lr, lr, #7
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 80014bc:	9d06      	ldr	r5, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80014be:	f813 9006 	ldrb.w	r9, [r3, r6]
 80014c2:	fa01 fe0e 	lsl.w	lr, r1, lr
 80014c6:	fa5f fe8e 	uxtb.w	lr, lr
			Hw_N5110G_SetPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_SetPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
 80014ca:	1aad      	subs	r5, r5, r2
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80014cc:	ea49 090e 	orr.w	r9, r9, lr
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80014d0:	b2ad      	uxth	r5, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80014d2:	f803 9006 	strb.w	r9, [r3, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80014d6:	442f      	add	r7, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80014d8:	5dde      	ldrb	r6, [r3, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80014da:	4445      	add	r5, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80014dc:	ea4c 0c06 	orr.w	ip, ip, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80014e0:	f803 c007 	strb.w	ip, [r3, r7]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	SET_BIT( Buf, y_remain );
 80014e4:	5d5e      	ldrb	r6, [r3, r5]
 80014e6:	ea4e 0e06 	orr.w	lr, lr, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80014ea:	f803 e005 	strb.w	lr, [r3, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 80014ee:	9d03      	ldr	r5, [sp, #12]
 80014f0:	0429      	lsls	r1, r5, #16
 80014f2:	f100 80a1 	bmi.w	8001638 <Hw_N5110G_DrawCircle+0x258>
 80014f6:	9d03      	ldr	r5, [sp, #12]
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 80014f8:	9901      	ldr	r1, [sp, #4]
 80014fa:	350a      	adds	r5, #10
 80014fc:	1a8e      	subs	r6, r1, r2
 80014fe:	eb05 0586 	add.w	r5, r5, r6, lsl #2
			CurY--;
 8001502:	3a01      	subs	r2, #1
		{ 
			D += (CurX << 2) + 6;
		}
		else
		{
			D += ((CurX - CurY) << 2) + 10;
 8001504:	b2ad      	uxth	r5, r5
 8001506:	9503      	str	r5, [sp, #12]
			CurY--;
 8001508:	b292      	uxth	r2, r2
 800150a:	9901      	ldr	r1, [sp, #4]
 800150c:	9d02      	ldr	r5, [sp, #8]
 800150e:	3101      	adds	r1, #1
  
	D    = 3 - (Radius << 1);
	CurX = 0;
	CurY = Radius;
	
	while (CurX <= CurY)
 8001510:	b289      	uxth	r1, r1
 8001512:	f10b 0b01 	add.w	fp, fp, #1
 8001516:	3801      	subs	r0, #1
 8001518:	3401      	adds	r4, #1
 800151a:	3501      	adds	r5, #1
 800151c:	428a      	cmp	r2, r1
 800151e:	fa1f fb8b 	uxth.w	fp, fp
 8001522:	b280      	uxth	r0, r0
 8001524:	b2a4      	uxth	r4, r4
 8001526:	9502      	str	r5, [sp, #8]
 8001528:	f0c0 810c 	bcc.w	8001744 <Hw_N5110G_DrawCircle+0x364>
 800152c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	{
		if( Mode == 0 )
 8001530:	9d05      	ldr	r5, [sp, #20]
 8001532:	9101      	str	r1, [sp, #4]
 8001534:	2d00      	cmp	r5, #0
 8001536:	f43f af66 	beq.w	8001406 <Hw_N5110G_DrawCircle+0x26>
			Hw_N5110G_SetPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
 800153a:	9d05      	ldr	r5, [sp, #20]
 800153c:	2d01      	cmp	r5, #1
 800153e:	f000 8082 	beq.w	8001646 <Hw_N5110G_DrawCircle+0x266>
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
 8001542:	9d05      	ldr	r5, [sp, #20]
 8001544:	2d02      	cmp	r5, #2
 8001546:	d1d2      	bne.n	80014ee <Hw_N5110G_DrawCircle+0x10e>
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 8001548:	9f04      	ldr	r7, [sp, #16]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800154a:	2101      	movs	r1, #1
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
 800154c:	eb02 0e07 	add.w	lr, r2, r7
 8001550:	fa1f fe8e 	uxth.w	lr, lr
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001554:	ea4f 06de 	mov.w	r6, lr, lsr #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001558:	fb0a f606 	mul.w	r6, sl, r6
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos - CurX);			
		}
		if( Mode == 2 )
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
 800155c:	1abf      	subs	r7, r7, r2
 800155e:	b2bf      	uxth	r7, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001560:	08fd      	lsrs	r5, r7, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001562:	eb06 080b 	add.w	r8, r6, fp
 8001566:	fb0a f505 	mul.w	r5, sl, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800156a:	f00e 0e07 	and.w	lr, lr, #7
 800156e:	f813 c008 	ldrb.w	ip, [r3, r8]
 8001572:	fa01 fe0e 	lsl.w	lr, r1, lr
 8001576:	fa5f fe8e 	uxtb.w	lr, lr
 800157a:	ea8c 0c0e 	eor.w	ip, ip, lr
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800157e:	f803 c008 	strb.w	ip, [r3, r8]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001582:	f007 0707 	and.w	r7, r7, #7
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001586:	eb05 080b 	add.w	r8, r5, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800158a:	fa01 fc07 	lsl.w	ip, r1, r7
 800158e:	f813 7008 	ldrb.w	r7, [r3, r8]
 8001592:	fa5f fc8c 	uxtb.w	ip, ip
 8001596:	ea87 070c 	eor.w	r7, r7, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800159a:	f803 7008 	strb.w	r7, [r3, r8]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800159e:	4406      	add	r6, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80015a0:	f813 8006 	ldrb.w	r8, [r3, r6]
 80015a4:	9901      	ldr	r1, [sp, #4]
 80015a6:	ea8e 0e08 	eor.w	lr, lr, r8
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80015aa:	f803 e006 	strb.w	lr, [r3, r6]
 80015ae:	9e04      	ldr	r6, [sp, #16]
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80015b0:	08e7      	lsrs	r7, r4, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80015b2:	4405      	add	r5, r0
 80015b4:	ebc1 0e06 	rsb	lr, r1, r6
 80015b8:	fb0a f707 	mul.w	r7, sl, r7
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 80015bc:	9e06      	ldr	r6, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80015be:	f813 8005 	ldrb.w	r8, [r3, r5]
 80015c2:	fa1f fe8e 	uxth.w	lr, lr
		{
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
 80015c6:	1996      	adds	r6, r2, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80015c8:	ea8c 0c08 	eor.w	ip, ip, r8
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80015cc:	b2b6      	uxth	r6, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_XorPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80015ce:	ea4f 08de 	mov.w	r8, lr, lsr #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80015d2:	f803 c005 	strb.w	ip, [r3, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80015d6:	eb07 0906 	add.w	r9, r7, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80015da:	2101      	movs	r1, #1
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80015dc:	fb0a f808 	mul.w	r8, sl, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80015e0:	f004 0c07 	and.w	ip, r4, #7
 80015e4:	f813 5009 	ldrb.w	r5, [r3, r9]
 80015e8:	fa01 fc0c 	lsl.w	ip, r1, ip
 80015ec:	fa5f fc8c 	uxtb.w	ip, ip
 80015f0:	ea85 050c 	eor.w	r5, r5, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80015f4:	f803 5009 	strb.w	r5, [r3, r9]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80015f8:	4446      	add	r6, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 80015fa:	f00e 0e07 	and.w	lr, lr, #7
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 80015fe:	9d06      	ldr	r5, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001600:	f813 9006 	ldrb.w	r9, [r3, r6]
 8001604:	fa01 fe0e 	lsl.w	lr, r1, lr
 8001608:	fa5f fe8e 	uxtb.w	lr, lr
			Hw_N5110G_XorPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_XorPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
 800160c:	1aad      	subs	r5, r5, r2
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800160e:	ea89 090e 	eor.w	r9, r9, lr
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001612:	b2ad      	uxth	r5, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001614:	f803 9006 	strb.w	r9, [r3, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001618:	442f      	add	r7, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800161a:	5dde      	ldrb	r6, [r3, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800161c:	4445      	add	r5, r8
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 800161e:	ea8c 0c06 	eor.w	ip, ip, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001622:	f803 c007 	strb.w	ip, [r3, r7]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	Buf ^= (1<<y_remain);
 8001626:	5d5e      	ldrb	r6, [r3, r5]
 8001628:	ea8e 0e06 	eor.w	lr, lr, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800162c:	f803 e005 	strb.w	lr, [r3, r5]
			Hw_N5110G_XorPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos + CurX);
			Hw_N5110G_XorPixel(Xpos - CurY, Ypos - CurX);			
		}
				
		if (D < 0)
 8001630:	9d03      	ldr	r5, [sp, #12]
 8001632:	0429      	lsls	r1, r5, #16
 8001634:	f57f af5f 	bpl.w	80014f6 <Hw_N5110G_DrawCircle+0x116>
		{ 
			D += (CurX << 2) + 6;
 8001638:	9901      	ldr	r1, [sp, #4]
 800163a:	3506      	adds	r5, #6
 800163c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8001640:	b2a9      	uxth	r1, r5
 8001642:	9103      	str	r1, [sp, #12]
 8001644:	e761      	b.n	800150a <Hw_N5110G_DrawCircle+0x12a>
			Hw_N5110G_SetPixel(Xpos - CurY, Ypos - CurX);
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
 8001646:	9904      	ldr	r1, [sp, #16]
 8001648:	1856      	adds	r6, r2, r1
 800164a:	b2b6      	uxth	r6, r6
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800164c:	9905      	ldr	r1, [sp, #20]
 800164e:	f006 0507 	and.w	r5, r6, #7
 8001652:	fa01 f805 	lsl.w	r8, r1, r5
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 8001656:	9d04      	ldr	r5, [sp, #16]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001658:	ea6f 0908 	mvn.w	r9, r8
		}
		else
		if( Mode == 1 )
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
 800165c:	1aad      	subs	r5, r5, r2
 800165e:	b2ad      	uxth	r5, r5
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001660:	f005 0707 	and.w	r7, r5, #7
 8001664:	fa01 fc07 	lsl.w	ip, r1, r7
 8001668:	f004 0707 	and.w	r7, r4, #7
 800166c:	fa01 f707 	lsl.w	r7, r1, r7
 8001670:	43ff      	mvns	r7, r7
 8001672:	ea6f 0e0c 	mvn.w	lr, ip
 8001676:	9708      	str	r7, [sp, #32]
 8001678:	9901      	ldr	r1, [sp, #4]
 800167a:	9f04      	ldr	r7, [sp, #16]
 800167c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001680:	ebc1 0e07 	rsb	lr, r1, r7
 8001684:	fa1f fe8e 	uxth.w	lr, lr
 8001688:	9905      	ldr	r1, [sp, #20]
 800168a:	f00e 0707 	and.w	r7, lr, #7
 800168e:	fa01 f807 	lsl.w	r8, r1, r7
 8001692:	ea6f 0108 	mvn.w	r1, r8
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 8001696:	08f6      	lsrs	r6, r6, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001698:	fb0a f606 	mul.w	r6, sl, r6
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 800169c:	08ed      	lsrs	r5, r5, #3
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800169e:	eb06 0c0b 	add.w	ip, r6, fp
 80016a2:	fb0a f505 	mul.w	r5, sl, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80016a6:	f813 700c 	ldrb.w	r7, [r3, ip]
 80016aa:	fa5f f889 	uxtb.w	r8, r9
 80016ae:	ea07 0708 	and.w	r7, r7, r8
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80016b2:	f803 700c 	strb.w	r7, [r3, ip]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80016b6:	eb05 090b 	add.w	r9, r5, fp
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80016ba:	f813 7009 	ldrb.w	r7, [r3, r9]
 80016be:	f89d c01c 	ldrb.w	ip, [sp, #28]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80016c2:	4406      	add	r6, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80016c4:	ea07 070c 	and.w	r7, r7, ip
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80016c8:	f803 7009 	strb.w	r7, [r3, r9]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80016cc:	5d9f      	ldrb	r7, [r3, r6]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80016ce:	4405      	add	r5, r0
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80016d0:	ea08 0807 	and.w	r8, r8, r7
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80016d4:	08e7      	lsrs	r7, r4, #3
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80016d6:	f803 8006 	strb.w	r8, [r3, r6]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80016da:	9109      	str	r1, [sp, #36]	; 0x24
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80016dc:	fb0a f707 	mul.w	r7, sl, r7
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 80016e0:	9906      	ldr	r1, [sp, #24]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80016e2:	f813 8005 	ldrb.w	r8, [r3, r5]
---------------------------------------------------------------------------*/
void Hw_N5110G_ClrPixel( u16 x, u16 y )
{
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
 80016e6:	ea4f 06de 	mov.w	r6, lr, lsr #3
		{
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
 80016ea:	eb02 0e01 	add.w	lr, r2, r1
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 80016ee:	ea0c 0c08 	and.w	ip, ip, r8
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80016f2:	fa1f fe8e 	uxth.w	lr, lr
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 80016f6:	f803 c005 	strb.w	ip, [r3, r5]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 80016fa:	fb0a f606 	mul.w	r6, sl, r6
 80016fe:	eb07 0c0e 	add.w	ip, r7, lr
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001702:	f813 500c 	ldrb.w	r5, [r3, ip]
 8001706:	f89d 9020 	ldrb.w	r9, [sp, #32]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800170a:	44b6      	add	lr, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800170c:	ea05 0509 	and.w	r5, r5, r9
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001710:	f803 500c 	strb.w	r5, [r3, ip]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001714:	f813 c00e 	ldrb.w	ip, [r3, lr]
 8001718:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
			Hw_N5110G_ClrPixel(Xpos + CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos + CurY);
			Hw_N5110G_ClrPixel(Xpos - CurX, Ypos - CurY);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos + CurX);
			Hw_N5110G_ClrPixel(Xpos + CurY, Ypos - CurX);
			Hw_N5110G_ClrPixel(Xpos - CurY, Ypos + CurX);
 800171c:	1a8d      	subs	r5, r1, r2
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800171e:	ea0c 0c08 	and.w	ip, ip, r8
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001722:	b2ad      	uxth	r5, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001724:	f803 c00e 	strb.w	ip, [r3, lr]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 8001728:	442f      	add	r7, r5
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 800172a:	f813 e007 	ldrb.w	lr, [r3, r7]
	u8  Buf;
	u32 xy_offset; 
	u32 y_offset = y/8;
	u32 y_remain = y%8;
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
 800172e:	4435      	add	r5, r6
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001730:	ea09 090e 	and.w	r9, r9, lr
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 8001734:	f803 9007 	strb.w	r9, [r3, r7]
	
	xy_offset = y_offset*HW_N5110G_BUF_WIDTH + x;
	
	Buf = Hw_N5110G_TxFrameBuf[ xy_offset ];

	CLR_BIT( Buf, y_remain );
 8001738:	5d5e      	ldrb	r6, [r3, r5]
 800173a:	ea08 0806 	and.w	r8, r8, r6
	
	Hw_N5110G_TxFrameBuf[ xy_offset ] = Buf;
 800173e:	f803 8005 	strb.w	r8, [r3, r5]
 8001742:	e6d4      	b.n	80014ee <Hw_N5110G_DrawCircle+0x10e>
			D += ((CurX - CurY) << 2) + 10;
			CurY--;
		}
		CurX++;
	}
}
 8001744:	b00b      	add	sp, #44	; 0x2c
 8001746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174a:	bf00      	nop
 800174c:	20000990 	.word	0x20000990

08001750 <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <Hw_DMA_Init+0x18>)
 8001752:	7813      	ldrb	r3, [r2, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d005      	beq.n	8001764 <Hw_DMA_Init+0x14>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 8001758:	4904      	ldr	r1, [pc, #16]	; (800176c <Hw_DMA_Init+0x1c>)
	

	Called = 1;	
 800175a:	2001      	movs	r0, #1
	if( Called == 1 ) return;


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 800175c:	680b      	ldr	r3, [r1, #0]
 800175e:	4303      	orrs	r3, r0
 8001760:	600b      	str	r3, [r1, #0]
	

	Called = 1;	
 8001762:	7010      	strb	r0, [r2, #0]
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000483 	.word	0x20000483
 800176c:	40021014 	.word	0x40021014

08001770 <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 8001770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8001774:	f8df c060 	ldr.w	ip, [pc, #96]	; 80017d8 <Hw_DMA_SPI2_Setup+0x68>
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8001778:	4c13      	ldr	r4, [pc, #76]	; (80017c8 <Hw_DMA_SPI2_Setup+0x58>)
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
 800177a:	f8df e060 	ldr.w	lr, [pc, #96]	; 80017dc <Hw_DMA_SPI2_Setup+0x6c>
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 800177e:	4d13      	ldr	r5, [pc, #76]	; (80017cc <Hw_DMA_SPI2_Setup+0x5c>)
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8001780:	4f13      	ldr	r7, [pc, #76]	; (80017d0 <Hw_DMA_SPI2_Setup+0x60>)
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8001782:	2600      	movs	r6, #0
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 8001784:	f44f 5384 	mov.w	r3, #4224	; 0x1080
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8001788:	6026      	str	r6, [r4, #0]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 800178a:	f8cc 5000 	str.w	r5, [ip]
	REG_DMA1_CMAR(4)  = ReadAddress;
 800178e:	f8ce 1000 	str.w	r1, [lr]
	REG_DMA1_CNDTR(4) = BufSize;
 8001792:	603a      	str	r2, [r7, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 8001794:	6023      	str	r3, [r4, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8001796:	6821      	ldr	r1, [r4, #0]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <Hw_DMA_SPI2_Setup+0x64>)
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 800179a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80017e0 <Hw_DMA_SPI2_Setup+0x70>
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 800179e:	f041 0101 	orr.w	r1, r1, #1
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 80017a2:	2790      	movs	r7, #144	; 0x90
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80017a4:	6021      	str	r1, [r4, #0]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80017a6:	601e      	str	r6, [r3, #0]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80017a8:	f8c8 5000 	str.w	r5, [r8]
	REG_DMA1_CMAR(5)  = WriteAddress;
 80017ac:	f8cc 0018 	str.w	r0, [ip, #24]
	REG_DMA1_CNDTR(5) = BufSize;
 80017b0:	f8ce 200c 	str.w	r2, [lr, #12]
	
	
	
	REG_DMA1_CCR(5) = 0
 80017b4:	601f      	str	r7, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 80017b6:	681a      	ldr	r2, [r3, #0]
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
 80017b8:	f10e 0e0c 	add.w	lr, lr, #12
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 80017bc:	f042 0201 	orr.w	r2, r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017c6:	bf00      	nop
 80017c8:	40020044 	.word	0x40020044
 80017cc:	4000380c 	.word	0x4000380c
 80017d0:	40020048 	.word	0x40020048
 80017d4:	40020058 	.word	0x40020058
 80017d8:	4002004c 	.word	0x4002004c
 80017dc:	40020050 	.word	0x40020050
 80017e0:	40020060 	.word	0x40020060

080017e4 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <Hw_DMA_SPI2_IsTransFinished+0x1c>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 80017ec:	d007      	beq.n	80017fe <Hw_DMA_SPI2_IsTransFinished+0x1a>
	{
		if( REG_DMA1_ISR & (1<<17) )
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80017f4:	d003      	beq.n	80017fe <Hw_DMA_SPI2_IsTransFinished+0x1a>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 80017f6:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 80017fa:	605a      	str	r2, [r3, #4]
			Ret = 1;
 80017fc:	2001      	movs	r0, #1
		}
	}
	return Ret;
 80017fe:	4770      	bx	lr
 8001800:	40020000 	.word	0x40020000

08001804 <Hw_I2C_IMU_IO_Setup>:
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8001804:	490f      	ldr	r1, [pc, #60]	; (8001844 <Hw_I2C_IMU_IO_Setup+0x40>)


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <Hw_I2C_IMU_IO_Setup+0x44>)
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8001808:	680a      	ldr	r2, [r1, #0]
 800180a:	f042 0202 	orr.w	r2, r2, #2
 800180e:	600a      	str	r2, [r1, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	f022 020f 	bic.w	r2, r2, #15
 8001816:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	f042 0203 	orr.w	r2, r2, #3
 800181e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	f042 020c 	orr.w	r2, r2, #12
 8001826:	601a      	str	r2, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800182e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001836:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40010004 	.word	0x40010004
 8001848:	40010c04 	.word	0x40010c04

0800184c <Hw_I2C_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_IMU_Init( void )
{
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static u8 power_on = FALSE;
	u32 SR;



	if( power_on == TRUE ) return;
 800184e:	4c15      	ldr	r4, [pc, #84]	; (80018a4 <Hw_I2C_IMU_Init+0x58>)
 8001850:	7823      	ldrb	r3, [r4, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d024      	beq.n	80018a0 <Hw_I2C_IMU_Init+0x54>
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001856:	f248 061e 	movw	r6, #32798	; 0x801e
	if( power_on == TRUE ) return;


	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <Hw_I2C_IMU_Init+0x5c>)
 800185c:	4798      	blx	r3
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 800185e:	4d13      	ldr	r5, [pc, #76]	; (80018ac <Hw_I2C_IMU_Init+0x60>)
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <Hw_I2C_IMU_Init+0x64>)
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <Hw_I2C_IMU_Init+0x68>)

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8001864:	4f14      	ldr	r7, [pc, #80]	; (80018b8 <Hw_I2C_IMU_Init+0x6c>)
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001866:	4915      	ldr	r1, [pc, #84]	; (80018bc <Hw_I2C_IMU_Init+0x70>)
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 8001868:	200b      	movs	r0, #11
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 800186a:	f04f 0c00 	mov.w	ip, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800186e:	f04f 0e24 	mov.w	lr, #36	; 0x24
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8001872:	f8c3 c000 	str.w	ip, [r3]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8001876:	f8c7 e000 	str.w	lr, [r7]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 800187a:	602e      	str	r6, [r5, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 800187c:	6010      	str	r0, [r2, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 800187e:	680a      	ldr	r2, [r1, #0]

	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <Hw_I2C_IMU_Init+0x74>)
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001882:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001886:	600a      	str	r2, [r1, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8001888:	681a      	ldr	r2, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;


	power_on = TRUE;
 800188a:	2101      	movs	r1, #1
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 800188c:	f022 0202 	bic.w	r2, r2, #2
 8001890:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

	SR = REG_I2C1_SR1;
 8001898:	f855 3c08 	ldr.w	r3, [r5, #-8]
	SR = REG_I2C1_SR2;
 800189c:	6803      	ldr	r3, [r0, #0]


	power_on = TRUE;
 800189e:	7021      	strb	r1, [r4, #0]
 80018a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000484 	.word	0x20000484
 80018a8:	08001805 	.word	0x08001805
 80018ac:	4000541c 	.word	0x4000541c
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40005420 	.word	0x40005420
 80018b8:	40005404 	.word	0x40005404
 80018bc:	4002101c 	.word	0x4002101c
 80018c0:	40005418 	.word	0x40005418

080018c4 <Hw_I2C_IMU_GetErrStatus>:
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <Hw_I2C_IMU_GetErrStatus+0x30>)
 80018c6:	6819      	ldr	r1, [r3, #0]
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 80018c8:	681a      	ldr	r2, [r3, #0]
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 80018ca:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80018ce:	bf14      	ite	ne
 80018d0:	200b      	movne	r0, #11
 80018d2:	2000      	moveq	r0, #0
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 80018d4:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 80018d8:	681a      	ldr	r2, [r3, #0]
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 80018da:	681b      	ldr	r3, [r3, #0]
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 80018dc:	bf18      	it	ne
 80018de:	200a      	movne	r0, #10
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 80018e0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80018e4:	bf18      	it	ne
 80018e6:	2009      	movne	r0, #9
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 80018e8:	f413 7f80 	tst.w	r3, #256	; 0x100

	return Err;
}
 80018ec:	bf18      	it	ne
 80018ee:	2008      	movne	r0, #8
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40005414 	.word	0x40005414

080018f8 <Hw_I2C_IMU_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80018fa:	4f3b      	ldr	r7, [pc, #236]	; (80019e8 <Hw_I2C_IMU_WriteRegs+0xf0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 80018fc:	b087      	sub	sp, #28

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 80018fe:	683d      	ldr	r5, [r7, #0]
 8001900:	f242 7410 	movw	r4, #10000	; 0x2710
 8001904:	f445 7580 	orr.w	r5, r5, #256	; 0x100
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001908:	4e38      	ldr	r6, [pc, #224]	; (80019ec <Hw_I2C_IMU_WriteRegs+0xf4>)

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800190a:	603d      	str	r5, [r7, #0]
 800190c:	e001      	b.n	8001912 <Hw_I2C_IMU_WriteRegs+0x1a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800190e:	3c01      	subs	r4, #1
 8001910:	d042      	beq.n	8001998 <Hw_I2C_IMU_WriteRegs+0xa0>
	{
		Reg = *reg_addr;
 8001912:	6835      	ldr	r5, [r6, #0]
 8001914:	9500      	str	r5, [sp, #0]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001916:	9d00      	ldr	r5, [sp, #0]
 8001918:	07ed      	lsls	r5, r5, #31
 800191a:	d5f8      	bpl.n	800190e <Hw_I2C_IMU_WriteRegs+0x16>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800191c:	4c34      	ldr	r4, [pc, #208]	; (80019f0 <Hw_I2C_IMU_WriteRegs+0xf8>)
 800191e:	0040      	lsls	r0, r0, #1
 8001920:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001922:	4d32      	ldr	r5, [pc, #200]	; (80019ec <Hw_I2C_IMU_WriteRegs+0xf4>)
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8001924:	f242 7010 	movw	r0, #10000	; 0x2710
 8001928:	e001      	b.n	800192e <Hw_I2C_IMU_WriteRegs+0x36>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800192a:	3801      	subs	r0, #1
 800192c:	d04e      	beq.n	80019cc <Hw_I2C_IMU_WriteRegs+0xd4>
	{
		Reg = *reg_addr;
 800192e:	682c      	ldr	r4, [r5, #0]
 8001930:	9401      	str	r4, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001932:	9c01      	ldr	r4, [sp, #4]
 8001934:	07a7      	lsls	r7, r4, #30
 8001936:	d5f8      	bpl.n	800192a <Hw_I2C_IMU_WriteRegs+0x32>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001938:	4c2e      	ldr	r4, [pc, #184]	; (80019f4 <Hw_I2C_IMU_WriteRegs+0xfc>)
 800193a:	f242 7010 	movw	r0, #10000	; 0x2710
 800193e:	6824      	ldr	r4, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001940:	4d2a      	ldr	r5, [pc, #168]	; (80019ec <Hw_I2C_IMU_WriteRegs+0xf4>)
 8001942:	e001      	b.n	8001948 <Hw_I2C_IMU_WriteRegs+0x50>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001944:	3801      	subs	r0, #1
 8001946:	d045      	beq.n	80019d4 <Hw_I2C_IMU_WriteRegs+0xdc>
	{
		Reg = *reg_addr;
 8001948:	682c      	ldr	r4, [r5, #0]
 800194a:	9402      	str	r4, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800194c:	9c02      	ldr	r4, [sp, #8]
 800194e:	0626      	lsls	r6, r4, #24
 8001950:	d5f8      	bpl.n	8001944 <Hw_I2C_IMU_WriteRegs+0x4c>
 8001952:	f242 7010 	movw	r0, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001956:	4d25      	ldr	r5, [pc, #148]	; (80019ec <Hw_I2C_IMU_WriteRegs+0xf4>)
 8001958:	e001      	b.n	800195e <Hw_I2C_IMU_WriteRegs+0x66>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800195a:	3801      	subs	r0, #1
 800195c:	d03a      	beq.n	80019d4 <Hw_I2C_IMU_WriteRegs+0xdc>
	{
		Reg = *reg_addr;
 800195e:	682c      	ldr	r4, [r5, #0]
 8001960:	9403      	str	r4, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001962:	9c03      	ldr	r4, [sp, #12]
 8001964:	0624      	lsls	r4, r4, #24
 8001966:	d5f8      	bpl.n	800195a <Hw_I2C_IMU_WriteRegs+0x62>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;	
 8001968:	4e21      	ldr	r6, [pc, #132]	; (80019f0 <Hw_I2C_IMU_WriteRegs+0xf8>)
 800196a:	6031      	str	r1, [r6, #0]



			for( i=0; i<len; i++ )
 800196c:	2b00      	cmp	r3, #0
 800196e:	d033      	beq.n	80019d8 <Hw_I2C_IMU_WriteRegs+0xe0>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001970:	4c1e      	ldr	r4, [pc, #120]	; (80019ec <Hw_I2C_IMU_WriteRegs+0xf4>)

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8001972:	2500      	movs	r5, #0

	while( time_out )
	{
		Reg = *reg_addr;

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001974:	f242 7110 	movw	r1, #10000	; 0x2710
 8001978:	e001      	b.n	800197e <Hw_I2C_IMU_WriteRegs+0x86>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800197a:	3901      	subs	r1, #1
 800197c:	d00f      	beq.n	800199e <Hw_I2C_IMU_WriteRegs+0xa6>
	{
		Reg = *reg_addr;
 800197e:	6820      	ldr	r0, [r4, #0]
 8001980:	9004      	str	r0, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001982:	9804      	ldr	r0, [sp, #16]
 8001984:	0600      	lsls	r0, r0, #24
 8001986:	d5f8      	bpl.n	800197a <Hw_I2C_IMU_WriteRegs+0x82>
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 8001988:	5d51      	ldrb	r1, [r2, r5]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 800198a:	3501      	adds	r5, #1
 800198c:	b2ed      	uxtb	r5, r5
 800198e:	429d      	cmp	r5, r3
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 8001990:	6031      	str	r1, [r6, #0]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 8001992:	d3ef      	bcc.n	8001974 <Hw_I2C_IMU_WriteRegs+0x7c>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 8001994:	2000      	movs	r0, #0
 8001996:	e003      	b.n	80019a0 <Hw_I2C_IMU_WriteRegs+0xa8>
			SET_BIT( REG_I2C1_CR1, 8 );

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 8001998:	2002      	movs	r0, #2
		Err = Hw_I2C_IMU_GetErrStatus();
	}
	

    return Err;
}
 800199a:	b007      	add	sp, #28
 800199c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 800199e:	2004      	movs	r0, #4
 80019a0:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80019a4:	4911      	ldr	r1, [pc, #68]	; (80019ec <Hw_I2C_IMU_WriteRegs+0xf4>)
 80019a6:	e001      	b.n	80019ac <Hw_I2C_IMU_WriteRegs+0xb4>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80019a8:	3b01      	subs	r3, #1
 80019aa:	d01b      	beq.n	80019e4 <Hw_I2C_IMU_WriteRegs+0xec>
	{
		Reg = *reg_addr;
 80019ac:	680a      	ldr	r2, [r1, #0]
 80019ae:	9205      	str	r2, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80019b0:	9a05      	ldr	r2, [sp, #20]
 80019b2:	0752      	lsls	r2, r2, #29
 80019b4:	d5f8      	bpl.n	80019a8 <Hw_I2C_IMU_WriteRegs+0xb0>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <Hw_I2C_IMU_WriteRegs+0xf0>)
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019be:	6013      	str	r3, [r2, #0]
			break;
	}


	if( Err == 0 )
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d1ea      	bne.n	800199a <Hw_I2C_IMU_WriteRegs+0xa2>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <Hw_I2C_IMU_WriteRegs+0x100>)
 80019c6:	4798      	blx	r3
	}
	

    return Err;
}
 80019c8:	b007      	add	sp, #28
 80019ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <Hw_I2C_IMU_WriteRegs+0xfc>)

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 80019ce:	2003      	movs	r0, #3
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	e7e2      	b.n	800199a <Hw_I2C_IMU_WriteRegs+0xa2>
			//Lb_printf("S2 %x\n", REG_I2C1_SR2);
				
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 80019d4:	2004      	movs	r0, #4
 80019d6:	e7e0      	b.n	800199a <Hw_I2C_IMU_WriteRegs+0xa2>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 80019d8:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <Hw_I2C_IMU_WriteRegs+0xf0>)
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e7ef      	b.n	80019c4 <Hw_I2C_IMU_WriteRegs+0xcc>
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, 10000 );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 80019e4:	2006      	movs	r0, #6
 80019e6:	e7d8      	b.n	800199a <Hw_I2C_IMU_WriteRegs+0xa2>
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40005414 	.word	0x40005414
 80019f0:	40005410 	.word	0x40005410
 80019f4:	40005418 	.word	0x40005418
 80019f8:	080018c5 	.word	0x080018c5

080019fc <Hw_I2C_IMU_MPU6050_WriteReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 80019fc:	b510      	push	{r4, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	aa02      	add	r2, sp, #8
 8001a02:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8001a06:	2301      	movs	r3, #1
 8001a08:	4601      	mov	r1, r0
 8001a0a:	4c02      	ldr	r4, [pc, #8]	; (8001a14 <Hw_I2C_IMU_MPU6050_WriteReg+0x18>)
 8001a0c:	2068      	movs	r0, #104	; 0x68
 8001a0e:	47a0      	blx	r4
}
 8001a10:	b002      	add	sp, #8
 8001a12:	bd10      	pop	{r4, pc}
 8001a14:	080018f9 	.word	0x080018f9

08001a18 <Hw_I2C_IMU_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b08d      	sub	sp, #52	; 0x34
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;


	if( len > 0 ) LastIndex = len - 1;
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 809f 	beq.w	8001b60 <Hw_I2C_IMU_ReadRegs+0x148>
 8001a22:	1e5f      	subs	r7, r3, #1
 8001a24:	b2ff      	uxtb	r7, r7
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 8001a26:	4d5a      	ldr	r5, [pc, #360]	; (8001b90 <Hw_I2C_IMU_ReadRegs+0x178>)
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8001a28:	f242 7410 	movw	r4, #10000	; 0x2710
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 8001a2c:	f8d5 e000 	ldr.w	lr, [r5]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001a30:	462e      	mov	r6, r5
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 8001a32:	f8cd e004 	str.w	lr, [sp, #4]
			SR2 = REG_I2C1_SR2;
 8001a36:	3504      	adds	r5, #4
 8001a38:	682d      	ldr	r5, [r5, #0]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8001a3a:	f8df e160 	ldr.w	lr, [pc, #352]	; 8001b9c <Hw_I2C_IMU_ReadRegs+0x184>
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
			SR2 = REG_I2C1_SR2;
 8001a3e:	9502      	str	r5, [sp, #8]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8001a40:	f8de 5000 	ldr.w	r5, [lr]
 8001a44:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8001a48:	f8ce 5000 	str.w	r5, [lr]
 8001a4c:	e002      	b.n	8001a54 <Hw_I2C_IMU_ReadRegs+0x3c>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001a4e:	3c01      	subs	r4, #1
 8001a50:	f000 8088 	beq.w	8001b64 <Hw_I2C_IMU_ReadRegs+0x14c>
	{
		Reg = *reg_addr;
 8001a54:	6835      	ldr	r5, [r6, #0]
 8001a56:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001a58:	9d03      	ldr	r5, [sp, #12]
 8001a5a:	07ed      	lsls	r5, r5, #31
 8001a5c:	d5f7      	bpl.n	8001a4e <Hw_I2C_IMU_ReadRegs+0x36>
 8001a5e:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001a62:	4e4c      	ldr	r6, [pc, #304]	; (8001b94 <Hw_I2C_IMU_ReadRegs+0x17c>)
 8001a64:	e001      	b.n	8001a6a <Hw_I2C_IMU_ReadRegs+0x52>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001a66:	3c01      	subs	r4, #1
 8001a68:	d07c      	beq.n	8001b64 <Hw_I2C_IMU_ReadRegs+0x14c>
	{
		Reg = *reg_addr;
 8001a6a:	6835      	ldr	r5, [r6, #0]
 8001a6c:	9504      	str	r5, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001a6e:	9d04      	ldr	r5, [sp, #16]
 8001a70:	07ed      	lsls	r5, r5, #31
 8001a72:	d5f8      	bpl.n	8001a66 <Hw_I2C_IMU_ReadRegs+0x4e>



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8001a74:	4c48      	ldr	r4, [pc, #288]	; (8001b98 <Hw_I2C_IMU_ReadRegs+0x180>)
 8001a76:	0040      	lsls	r0, r0, #1
 8001a78:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001a7a:	4e45      	ldr	r6, [pc, #276]	; (8001b90 <Hw_I2C_IMU_ReadRegs+0x178>)



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8001a7c:	f242 7410 	movw	r4, #10000	; 0x2710
 8001a80:	e001      	b.n	8001a86 <Hw_I2C_IMU_ReadRegs+0x6e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001a82:	3c01      	subs	r4, #1
 8001a84:	d071      	beq.n	8001b6a <Hw_I2C_IMU_ReadRegs+0x152>
	{
		Reg = *reg_addr;
 8001a86:	6835      	ldr	r5, [r6, #0]
 8001a88:	9505      	str	r5, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001a8a:	9d05      	ldr	r5, [sp, #20]
 8001a8c:	07ad      	lsls	r5, r5, #30
 8001a8e:	d5f8      	bpl.n	8001a82 <Hw_I2C_IMU_ReadRegs+0x6a>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001a90:	4d40      	ldr	r5, [pc, #256]	; (8001b94 <Hw_I2C_IMU_ReadRegs+0x17c>)
 8001a92:	f242 7410 	movw	r4, #10000	; 0x2710
 8001a96:	682d      	ldr	r5, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001a98:	4e3d      	ldr	r6, [pc, #244]	; (8001b90 <Hw_I2C_IMU_ReadRegs+0x178>)
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001a9a:	9502      	str	r5, [sp, #8]
 8001a9c:	e001      	b.n	8001aa2 <Hw_I2C_IMU_ReadRegs+0x8a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001a9e:	3c01      	subs	r4, #1
 8001aa0:	d068      	beq.n	8001b74 <Hw_I2C_IMU_ReadRegs+0x15c>
	{
		Reg = *reg_addr;
 8001aa2:	6835      	ldr	r5, [r6, #0]
 8001aa4:	9506      	str	r5, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001aa6:	9d06      	ldr	r5, [sp, #24]
 8001aa8:	062d      	lsls	r5, r5, #24
 8001aaa:	d5f8      	bpl.n	8001a9e <Hw_I2C_IMU_ReadRegs+0x86>
 8001aac:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001ab0:	4e37      	ldr	r6, [pc, #220]	; (8001b90 <Hw_I2C_IMU_ReadRegs+0x178>)
 8001ab2:	e001      	b.n	8001ab8 <Hw_I2C_IMU_ReadRegs+0xa0>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001ab4:	3c01      	subs	r4, #1
 8001ab6:	d05d      	beq.n	8001b74 <Hw_I2C_IMU_ReadRegs+0x15c>
	{
		Reg = *reg_addr;
 8001ab8:	6835      	ldr	r5, [r6, #0]
 8001aba:	9507      	str	r5, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001abc:	9d07      	ldr	r5, [sp, #28]
 8001abe:	062d      	lsls	r5, r5, #24
 8001ac0:	d5f8      	bpl.n	8001ab4 <Hw_I2C_IMU_ReadRegs+0x9c>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 8001ac2:	4d35      	ldr	r5, [pc, #212]	; (8001b98 <Hw_I2C_IMU_ReadRegs+0x180>)
 8001ac4:	f242 7410 	movw	r4, #10000	; 0x2710
 8001ac8:	6029      	str	r1, [r5, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001aca:	3504      	adds	r5, #4
 8001acc:	e001      	b.n	8001ad2 <Hw_I2C_IMU_ReadRegs+0xba>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001ace:	3c01      	subs	r4, #1
 8001ad0:	d05c      	beq.n	8001b8c <Hw_I2C_IMU_ReadRegs+0x174>
	{
		Reg = *reg_addr;
 8001ad2:	6829      	ldr	r1, [r5, #0]
 8001ad4:	9108      	str	r1, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001ad6:	9908      	ldr	r1, [sp, #32]
 8001ad8:	0749      	lsls	r1, r1, #29
 8001ada:	d5f8      	bpl.n	8001ace <Hw_I2C_IMU_ReadRegs+0xb6>



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8001adc:	4e2f      	ldr	r6, [pc, #188]	; (8001b9c <Hw_I2C_IMU_ReadRegs+0x184>)
 8001ade:	f242 7110 	movw	r1, #10000	; 0x2710
 8001ae2:	6834      	ldr	r4, [r6, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001ae4:	4d2a      	ldr	r5, [pc, #168]	; (8001b90 <Hw_I2C_IMU_ReadRegs+0x178>)



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8001ae6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001aea:	6034      	str	r4, [r6, #0]
 8001aec:	e001      	b.n	8001af2 <Hw_I2C_IMU_ReadRegs+0xda>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001aee:	3901      	subs	r1, #1
 8001af0:	d038      	beq.n	8001b64 <Hw_I2C_IMU_ReadRegs+0x14c>
	{
		Reg = *reg_addr;
 8001af2:	682c      	ldr	r4, [r5, #0]
 8001af4:	9409      	str	r4, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001af6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001af8:	07e6      	lsls	r6, r4, #31
 8001afa:	d5f8      	bpl.n	8001aee <Hw_I2C_IMU_ReadRegs+0xd6>
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8001afc:	4926      	ldr	r1, [pc, #152]	; (8001b98 <Hw_I2C_IMU_ReadRegs+0x180>)
 8001afe:	f040 0001 	orr.w	r0, r0, #1
 8001b02:	6008      	str	r0, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001b04:	4c22      	ldr	r4, [pc, #136]	; (8001b90 <Hw_I2C_IMU_ReadRegs+0x178>)
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8001b06:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b0a:	e001      	b.n	8001b10 <Hw_I2C_IMU_ReadRegs+0xf8>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001b0c:	3901      	subs	r1, #1
 8001b0e:	d02c      	beq.n	8001b6a <Hw_I2C_IMU_ReadRegs+0x152>
	{
		Reg = *reg_addr;
 8001b10:	6820      	ldr	r0, [r4, #0]
 8001b12:	900a      	str	r0, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001b14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001b16:	0785      	lsls	r5, r0, #30
 8001b18:	d5f8      	bpl.n	8001b0c <Hw_I2C_IMU_ReadRegs+0xf4>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001b1a:	491e      	ldr	r1, [pc, #120]	; (8001b94 <Hw_I2C_IMU_ReadRegs+0x17c>)
 8001b1c:	6809      	ldr	r1, [r1, #0]
 8001b1e:	9102      	str	r1, [sp, #8]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8001b20:	b1db      	cbz	r3, 8001b5a <Hw_I2C_IMU_ReadRegs+0x142>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8001b22:	4e1e      	ldr	r6, [pc, #120]	; (8001b9c <Hw_I2C_IMU_ReadRegs+0x184>)
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001b24:	4c1a      	ldr	r4, [pc, #104]	; (8001b90 <Hw_I2C_IMU_ReadRegs+0x178>)


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8001b26:	f8df e070 	ldr.w	lr, [pc, #112]	; 8001b98 <Hw_I2C_IMU_ReadRegs+0x180>
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8001b2a:	2500      	movs	r5, #0
			{
				if( i < LastIndex )
 8001b2c:	42af      	cmp	r7, r5
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 8001b2e:	6831      	ldr	r1, [r6, #0]

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 8001b30:	d922      	bls.n	8001b78 <Hw_I2C_IMU_ReadRegs+0x160>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 8001b32:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001b36:	6031      	str	r1, [r6, #0]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8001b38:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b3c:	e001      	b.n	8001b42 <Hw_I2C_IMU_ReadRegs+0x12a>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001b3e:	3901      	subs	r1, #1
 8001b40:	d022      	beq.n	8001b88 <Hw_I2C_IMU_ReadRegs+0x170>
	{
		Reg = *reg_addr;
 8001b42:	6820      	ldr	r0, [r4, #0]
 8001b44:	900b      	str	r0, [sp, #44]	; 0x2c

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001b46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001b48:	0640      	lsls	r0, r0, #25
 8001b4a:	d5f8      	bpl.n	8001b3e <Hw_I2C_IMU_ReadRegs+0x126>


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8001b4c:	f8de 0000 	ldr.w	r0, [lr]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8001b50:	1c69      	adds	r1, r5, #1


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8001b52:	5550      	strb	r0, [r2, r5]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8001b54:	b2cd      	uxtb	r5, r1
 8001b56:	42ab      	cmp	r3, r5
 8001b58:	d8e8      	bhi.n	8001b2c <Hw_I2C_IMU_ReadRegs+0x114>
	}


	if( Err == 0 )
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <Hw_I2C_IMU_ReadRegs+0x188>)
 8001b5c:	4798      	blx	r3
 8001b5e:	e002      	b.n	8001b66 <Hw_I2C_IMU_ReadRegs+0x14e>
    u16 Err = 0;
	u8  i;
	u32 TimeOut;
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;
 8001b60:	461f      	mov	r7, r3
 8001b62:	e760      	b.n	8001a26 <Hw_I2C_IMU_ReadRegs+0xe>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 8001b64:	2002      	movs	r0, #2
	}
	

    return Err;

}
 8001b66:	b00d      	add	sp, #52	; 0x34
 8001b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <Hw_I2C_IMU_ReadRegs+0x17c>)

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 8001b6c:	2003      	movs	r0, #3
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	e7f8      	b.n	8001b66 <Hw_I2C_IMU_ReadRegs+0x14e>

			
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8001b74:	2004      	movs	r0, #4
 8001b76:	e7f6      	b.n	8001b66 <Hw_I2C_IMU_ReadRegs+0x14e>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8001b78:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001b7c:	6031      	str	r1, [r6, #0]
					SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8001b7e:	6831      	ldr	r1, [r6, #0]
 8001b80:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001b84:	6031      	str	r1, [r6, #0]
 8001b86:	e7d7      	b.n	8001b38 <Hw_I2C_IMU_ReadRegs+0x120>
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 8001b88:	2005      	movs	r0, #5
 8001b8a:	e7ec      	b.n	8001b66 <Hw_I2C_IMU_ReadRegs+0x14e>


			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, 10000 );	// BTF
			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_STOP;
 8001b8c:	2006      	movs	r0, #6
 8001b8e:	e7ea      	b.n	8001b66 <Hw_I2C_IMU_ReadRegs+0x14e>
 8001b90:	40005414 	.word	0x40005414
 8001b94:	40005418 	.word	0x40005418
 8001b98:	40005410 	.word	0x40005410
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	080018c5 	.word	0x080018c5

08001ba4 <Hw_I2C_IMU_MPU6050_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b510      	push	{r4, lr}
 8001ba8:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 8001baa:	4c03      	ldr	r4, [pc, #12]	; (8001bb8 <Hw_I2C_IMU_MPU6050_ReadReg+0x14>)
 8001bac:	4619      	mov	r1, r3
 8001bae:	2068      	movs	r0, #104	; 0x68
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	47a0      	blx	r4
}
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08001a19 	.word	0x08001a19

08001bbc <Hw_I2C_IMU_MPU6050_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadRegs( u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8001bbc:	b510      	push	{r4, lr}
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4613      	mov	r3, r2
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, len );
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	2068      	movs	r0, #104	; 0x68
 8001bc8:	4c01      	ldr	r4, [pc, #4]	; (8001bd0 <Hw_I2C_IMU_MPU6050_ReadRegs+0x14>)
 8001bca:	47a0      	blx	r4
}
 8001bcc:	bd10      	pop	{r4, pc}
 8001bce:	bf00      	nop
 8001bd0:	08001a19 	.word	0x08001a19

08001bd4 <Hw_MPU6050_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
 8001bd4:	b510      	push	{r4, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE ) return TRUE;
 8001bd6:	4c13      	ldr	r4, [pc, #76]	; (8001c24 <Hw_MPU6050_Init+0x50>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
 8001bd8:	b086      	sub	sp, #24
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE ) return TRUE;
 8001bda:	7820      	ldrb	r0, [r4, #0]
 8001bdc:	2801      	cmp	r0, #1
 8001bde:	d00f      	beq.n	8001c00 <Hw_MPU6050_Init+0x2c>


	Hw_Wait_ms(36);
 8001be0:	2024      	movs	r0, #36	; 0x24
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <Hw_MPU6050_Init+0x54>)
 8001be4:	4798      	blx	r3


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <Hw_MPU6050_Init+0x58>)
 8001be8:	4798      	blx	r3


	while(1)
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
 8001bea:	2075      	movs	r0, #117	; 0x75
 8001bec:	a901      	add	r1, sp, #4
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <Hw_MPU6050_Init+0x5c>)
 8001bf0:	4798      	blx	r3
		if( Err != 0 )
 8001bf2:	b138      	cbz	r0, 8001c04 <Hw_MPU6050_Init+0x30>
		{
			Lb_printf("Can't find MPU6050 \n");
 8001bf4:	480f      	ldr	r0, [pc, #60]	; (8001c34 <Hw_MPU6050_Init+0x60>)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <Hw_MPU6050_Init+0x64>)
 8001bf8:	4798      	blx	r3
		}

		break;
	}

	power_on = TRUE;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	7023      	strb	r3, [r4, #0]


	if( Err != 0 ) Ret = FALSE;
 8001bfe:	2000      	movs	r0, #0


	return Ret;
}
 8001c00:	b006      	add	sp, #24
 8001c02:	bd10      	pop	{r4, pc}
			Lb_printf("Can't find MPU6050 \n");
			break;
		}


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
 8001c04:	4601      	mov	r1, r0
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <Hw_MPU6050_Init+0x68>)
 8001c08:	206b      	movs	r0, #107	; 0x6b
 8001c0a:	4798      	blx	r3
		if( Err != 0 )
 8001c0c:	b920      	cbnz	r0, 8001c18 <Hw_MPU6050_Init+0x44>
		}

		break;
	}

	power_on = TRUE;
 8001c0e:	2301      	movs	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
	u8  Ret = TRUE;
 8001c10:	4618      	mov	r0, r3
		}

		break;
	}

	power_on = TRUE;
 8001c12:	7023      	strb	r3, [r4, #0]

	if( Err != 0 ) Ret = FALSE;


	return Ret;
}
 8001c14:	b006      	add	sp, #24
 8001c16:	bd10      	pop	{r4, pc}


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
		if( Err != 0 )
		{
			Lb_printf("Err write MPU6050_RA_PWR_MGMT_1 : %d\n", Err);
 8001c18:	4601      	mov	r1, r0
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <Hw_MPU6050_Init+0x64>)
 8001c1c:	4808      	ldr	r0, [pc, #32]	; (8001c40 <Hw_MPU6050_Init+0x6c>)
 8001c1e:	4798      	blx	r3
			break;
 8001c20:	e7eb      	b.n	8001bfa <Hw_MPU6050_Init+0x26>
 8001c22:	bf00      	nop
 8001c24:	20000485 	.word	0x20000485
 8001c28:	080009f9 	.word	0x080009f9
 8001c2c:	0800184d 	.word	0x0800184d
 8001c30:	08001ba5 	.word	0x08001ba5
 8001c34:	08003768 	.word	0x08003768
 8001c38:	080006cd 	.word	0x080006cd
 8001c3c:	080019fd 	.word	0x080019fd
 8001c40:	08003780 	.word	0x08003780

08001c44 <Hw_MPU6050_GetData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_MPU6050_GetData( HW_MPU6050_DATA_OBJ *ptr_data )
{
 8001c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	4604      	mov	r4, r0
	s16 Temp;

	HW_MPU6050_RAW_DATA_OBJ raw_data;


	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );
 8001c4c:	4669      	mov	r1, sp
 8001c4e:	203b      	movs	r0, #59	; 0x3b
 8001c50:	220e      	movs	r2, #14
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <Hw_MPU6050_GetData+0x90>)
 8001c54:	4798      	blx	r3

	if( Err == 0 )
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d139      	bne.n	8001cce <Hw_MPU6050_GetData+0x8a>

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 8001c5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
		Temp = Temp/340 + 36;
 8001c62:	491d      	ldr	r1, [pc, #116]	; (8001cd8 <Hw_MPU6050_GetData+0x94>)

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
 8001c64:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Temp = Temp/340 + 36;
 8001c68:	b213      	sxth	r3, r2
 8001c6a:	fb81 2e03 	smull	r2, lr, r1, r3

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8001c6e:	f89d b000 	ldrb.w	fp, [sp]
 8001c72:	f89d 7001 	ldrb.w	r7, [sp, #1]
		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8001c76:	17db      	asrs	r3, r3, #31
 8001c78:	ebc3 13ee 	rsb	r3, r3, lr, asr #7

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8001c7c:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8001c80:	f89d a002 	ldrb.w	sl, [sp, #2]
 8001c84:	f89d 6003 	ldrb.w	r6, [sp, #3]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8001c88:	f89d 9004 	ldrb.w	r9, [sp, #4]
 8001c8c:	f89d 5005 	ldrb.w	r5, [sp, #5]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8001c90:	f89d 8008 	ldrb.w	r8, [sp, #8]
 8001c94:	f89d 1009 	ldrb.w	r1, [sp, #9]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8001c98:	f89d c00a 	ldrb.w	ip, [sp, #10]
 8001c9c:	f89d 200b 	ldrb.w	r2, [sp, #11]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8001ca0:	f89d e00c 	ldrb.w	lr, [sp, #12]
 8001ca4:	f89d b00d 	ldrb.w	fp, [sp, #13]

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
 8001ca8:	3324      	adds	r3, #36	; 0x24
	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8001caa:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8001cae:	ea45 2509 	orr.w	r5, r5, r9, lsl #8

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8001cb2:	ea41 2108 	orr.w	r1, r1, r8, lsl #8
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8001cb6:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8001cba:	ea4b 2e0e 	orr.w	lr, fp, lr, lsl #8

		Temp = (s16)((raw_data.Temp_H<<8) | (raw_data.Temp_L<<0));	
		Temp = Temp/340 + 36;
		ptr_data->Temp = Temp;
 8001cbe:	80e3      	strh	r3, [r4, #6]

	Err = Hw_I2C_IMU_MPU6050_ReadRegs( MPU6050_RA_ACCEL_XOUT_H, (u8 *)&raw_data, 14 );

	if( Err == 0 )
	{
		ptr_data->X_Acc = (s16)((raw_data.X_Acc_H<<8) | (raw_data.X_Acc_L<<0));	
 8001cc0:	8027      	strh	r7, [r4, #0]
		ptr_data->Y_Acc = (s16)((raw_data.Y_Acc_H<<8) | (raw_data.Y_Acc_L<<0));	
 8001cc2:	8066      	strh	r6, [r4, #2]
		ptr_data->Z_Acc = (s16)((raw_data.Z_Acc_H<<8) | (raw_data.Z_Acc_L<<0));	
 8001cc4:	80a5      	strh	r5, [r4, #4]

		ptr_data->X_Gyro = (s16)((raw_data.X_Gyro_H<<8) | (raw_data.X_Gyro_L<<0));	
 8001cc6:	8121      	strh	r1, [r4, #8]
		ptr_data->Y_Gyro = (s16)((raw_data.Y_Gyro_H<<8) | (raw_data.Y_Gyro_L<<0));	
 8001cc8:	8162      	strh	r2, [r4, #10]
		ptr_data->Z_Gyro = (s16)((raw_data.Z_Gyro_H<<8) | (raw_data.Z_Gyro_L<<0));	
 8001cca:	f8a4 e00c 	strh.w	lr, [r4, #12]
		Temp = Temp/340 + 36;
		ptr_data->Temp = Temp;
	}

	return Err;
}
 8001cce:	b005      	add	sp, #20
 8001cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cd4:	08001bbd 	.word	0x08001bbd
 8001cd8:	60606061 	.word	0x60606061

08001cdc <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8001cdc:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <EP1_IN_Callback+0x58>)
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	2a01      	cmp	r2, #1
 8001ce4:	d000      	beq.n	8001ce8 <EP1_IN_Callback+0xc>
 8001ce6:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8001ce8:	4913      	ldr	r1, [pc, #76]	; (8001d38 <EP1_IN_Callback+0x5c>)
 8001cea:	680a      	ldr	r2, [r1, #0]
 8001cec:	b302      	cbz	r2, 8001d30 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001cee:	2a40      	cmp	r2, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001cf0:	4812      	ldr	r0, [pc, #72]	; (8001d3c <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001cf2:	d814      	bhi.n	8001d1e <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001cf4:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8001cf6:	2500      	movs	r5, #0
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = USART_Rx_length;
 8001cf8:	b294      	uxth	r4, r2
        
        USART_Rx_ptr_out += USART_Rx_length;
 8001cfa:	441a      	add	r2, r3
 8001cfc:	6002      	str	r2, [r0, #0]
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001cfe:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8001d00:	600d      	str	r5, [r1, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001d02:	480f      	ldr	r0, [pc, #60]	; (8001d40 <EP1_IN_Callback+0x64>)
 8001d04:	4622      	mov	r2, r4
 8001d06:	4418      	add	r0, r3
 8001d08:	21c0      	movs	r1, #192	; 0xc0
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <EP1_IN_Callback+0x68>)
 8001d0c:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8001d0e:	4621      	mov	r1, r4
 8001d10:	2001      	movs	r0, #1
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <EP1_IN_Callback+0x6c>)
 8001d14:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 8001d16:	2001      	movs	r0, #1
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <EP1_IN_Callback+0x70>)
 8001d1a:	4798      	blx	r3
 8001d1c:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001d1e:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001d20:	3a40      	subs	r2, #64	; 0x40
 8001d22:	600a      	str	r2, [r1, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8001d24:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001d28:	6002      	str	r2, [r0, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001d2a:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001d2c:	2440      	movs	r4, #64	; 0x40
 8001d2e:	e7e8      	b.n	8001d02 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
 8001d34:	200004a8 	.word	0x200004a8
 8001d38:	200004b4 	.word	0x200004b4
 8001d3c:	200004b0 	.word	0x200004b0
 8001d40:	20000df0 	.word	0x20000df0
 8001d44:	08002fbd 	.word	0x08002fbd
 8001d48:	080031dd 	.word	0x080031dd
 8001d4c:	080030a5 	.word	0x080030a5

08001d50 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8001d50:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8001d52:	4c06      	ldr	r4, [pc, #24]	; (8001d6c <EP3_OUT_Callback+0x1c>)
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <EP3_OUT_Callback+0x20>)
 8001d56:	4621      	mov	r1, r4
 8001d58:	2003      	movs	r0, #3
 8001d5a:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <EP3_OUT_Callback+0x24>)
 8001d5e:	b2c1      	uxtb	r1, r0
 8001d60:	4620      	mov	r0, r4
 8001d62:	4798      	blx	r3
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8001d64:	2003      	movs	r0, #3
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <EP3_OUT_Callback+0x28>)
 8001d68:	4798      	blx	r3
 8001d6a:	bd10      	pop	{r4, pc}
 8001d6c:	20000d88 	.word	0x20000d88
 8001d70:	08003291 	.word	0x08003291
 8001d74:	08002521 	.word	0x08002521
 8001d78:	080030cd 	.word	0x080030cd

08001d7c <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8001d7c:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <SOF_Callback+0x28>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d000      	beq.n	8001d88 <SOF_Callback+0xc>
 8001d86:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <SOF_Callback+0x2c>)
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	f103 0101 	add.w	r1, r3, #1
 8001d92:	d001      	beq.n	8001d98 <SOF_Callback+0x1c>
 8001d94:	6011      	str	r1, [r2, #0]
 8001d96:	bd08      	pop	{r3, pc}
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8001d98:	2100      	movs	r1, #0
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SOF_Callback+0x30>)
  if(bDeviceState == CONFIGURED)
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8001d9c:	6011      	str	r1, [r2, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8001d9e:	4798      	blx	r3
 8001da0:	e7f1      	b.n	8001d86 <SOF_Callback+0xa>
 8001da2:	bf00      	nop
 8001da4:	2000049c 	.word	0x2000049c
 8001da8:	20000488 	.word	0x20000488
 8001dac:	0800254d 	.word	0x0800254d

08001db0 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001db0:	4959      	ldr	r1, [pc, #356]	; (8001f18 <USB_Istr+0x168>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8001db2:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001db4:	680b      	ldr	r3, [r1, #0]
 8001db6:	4c59      	ldr	r4, [pc, #356]	; (8001f1c <USB_Istr+0x16c>)
 8001db8:	b29b      	uxth	r3, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001dba:	4d59      	ldr	r5, [pc, #356]	; (8001f20 <USB_Istr+0x170>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001dbc:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001dbe:	8822      	ldrh	r2, [r4, #0]
 8001dc0:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	401a      	ands	r2, r3
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001dc6:	0590      	lsls	r0, r2, #22
 8001dc8:	d455      	bmi.n	8001e76 <USB_Istr+0xc6>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8001dca:	8822      	ldrh	r2, [r4, #0]
 8001dcc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001dd0:	4213      	tst	r3, r2
 8001dd2:	d14c      	bne.n	8001e6e <USB_Istr+0xbe>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8001dd4:	8822      	ldrh	r2, [r4, #0]
 8001dd6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001dda:	4213      	tst	r3, r2
 8001ddc:	d13e      	bne.n	8001e5c <USB_Istr+0xac>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8001dde:	8822      	ldrh	r2, [r4, #0]
 8001de0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001de4:	4213      	tst	r3, r2
 8001de6:	d003      	beq.n	8001df0 <USB_Istr+0x40>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8001de8:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <USB_Istr+0x168>)
 8001dee:	6011      	str	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8001df0:	8822      	ldrh	r2, [r4, #0]
 8001df2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001df6:	4213      	tst	r3, r2
 8001df8:	d127      	bne.n	8001e4a <USB_Istr+0x9a>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8001dfa:	8822      	ldrh	r2, [r4, #0]
 8001dfc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e00:	4213      	tst	r3, r2
 8001e02:	d00a      	beq.n	8001e1a <USB_Istr+0x6a>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8001e04:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <USB_Istr+0x174>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b9e3      	cbnz	r3, 8001e44 <USB_Istr+0x94>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <USB_Istr+0x178>)
 8001e0e:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8001e10:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8001e14:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <USB_Istr+0x168>)
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	882b      	ldrh	r3, [r5, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8001e1a:	8822      	ldrh	r2, [r4, #0]
 8001e1c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001e20:	4213      	tst	r3, r2
 8001e22:	d00d      	beq.n	8001e40 <USB_Istr+0x90>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8001e24:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8001e28:	4a3b      	ldr	r2, [pc, #236]	; (8001f18 <USB_Istr+0x168>)
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001e2a:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <USB_Istr+0x17c>)

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8001e2c:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0419      	lsls	r1, r3, #16
 8001e32:	d42c      	bmi.n	8001e8e <USB_Istr+0xde>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8001e34:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <USB_Istr+0x180>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8001e3a:	2007      	movs	r0, #7
 8001e3c:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <USB_Istr+0x178>)
 8001e3e:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8001e40:	b009      	add	sp, #36	; 0x24
 8001e42:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8001e44:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <USB_Istr+0x184>)
 8001e46:	4798      	blx	r3
 8001e48:	e7e2      	b.n	8001e10 <USB_Istr+0x60>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8001e4a:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <USB_Istr+0x168>)
    Resume(RESUME_EXTERNAL);
 8001e50:	2000      	movs	r0, #0
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8001e52:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8001e54:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <USB_Istr+0x178>)
 8001e56:	4798      	blx	r3
 8001e58:	882b      	ldrh	r3, [r5, #0]
 8001e5a:	e7ce      	b.n	8001dfa <USB_Istr+0x4a>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8001e5c:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8001e60:	4a2d      	ldr	r2, [pc, #180]	; (8001f18 <USB_Istr+0x168>)
    Device_Property.Reset();
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <USB_Istr+0x188>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8001e64:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4798      	blx	r3
 8001e6a:	882b      	ldrh	r3, [r5, #0]
 8001e6c:	e7b7      	b.n	8001dde <USB_Istr+0x2e>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <USB_Istr+0x18c>)
 8001e70:	4798      	blx	r3
 8001e72:	882b      	ldrh	r3, [r5, #0]
 8001e74:	e7ae      	b.n	8001dd4 <USB_Istr+0x24>
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8001e76:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 8001e7a:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <USB_Istr+0x190>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8001e7c:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 8001e7e:	7813      	ldrb	r3, [r2, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8001e80:	4930      	ldr	r1, [pc, #192]	; (8001f44 <USB_Istr+0x194>)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	7013      	strb	r3, [r2, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8001e88:	4788      	blx	r1
 8001e8a:	882b      	ldrh	r3, [r5, #0]
 8001e8c:	e79d      	b.n	8001dca <USB_Istr+0x1a>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8001e8e:	4828      	ldr	r0, [pc, #160]	; (8001f30 <USB_Istr+0x180>)
 8001e90:	6803      	ldr	r3, [r0, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	6003      	str	r3, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8001e96:	6803      	ldr	r3, [r0, #0]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d9ce      	bls.n	8001e3a <USB_Istr+0x8a>
 8001e9c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8001ea0:	3a04      	subs	r2, #4
 8001ea2:	f013 0308 	ands.w	r3, r3, #8
 8001ea6:	d1c8      	bne.n	8001e3a <USB_Istr+0x8a>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4d27      	ldr	r5, [pc, #156]	; (8001f48 <USB_Istr+0x198>)
 8001eac:	b292      	uxth	r2, r2
 8001eae:	4927      	ldr	r1, [pc, #156]	; (8001f4c <USB_Istr+0x19c>)
 8001eb0:	602a      	str	r2, [r5, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001eb2:	f851 2b04 	ldr.w	r2, [r1], #4
 8001eb6:	ac08      	add	r4, sp, #32
 8001eb8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	f844 2c20 	str.w	r2, [r4, #-32]
 8001ec6:	d1f4      	bne.n	8001eb2 <USB_Istr+0x102>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001ec8:	682b      	ldr	r3, [r5, #0]
        _SetCNTR(wCNTR);
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <USB_Istr+0x1a0>)
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	602b      	str	r3, [r5, #0]
        _SetCNTR(wCNTR);
 8001ed2:	682b      	ldr	r3, [r5, #0]
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001ed4:	4910      	ldr	r1, [pc, #64]	; (8001f18 <USB_Istr+0x168>)
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	6013      	str	r3, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	602b      	str	r3, [r5, #0]
        _SetCNTR(wCNTR);
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	6013      	str	r3, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001ee8:	680b      	ldr	r3, [r1, #0]
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <USB_Istr+0x168>)
 8001eec:	055b      	lsls	r3, r3, #21
 8001eee:	d5fb      	bpl.n	8001ee8 <USB_Istr+0x138>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8001ef0:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8001ef4:	4915      	ldr	r1, [pc, #84]	; (8001f4c <USB_Istr+0x19c>)
 8001ef6:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001ef8:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 8001efa:	aa08      	add	r2, sp, #32
 8001efc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001f00:	f852 2c20 	ldr.w	r2, [r2, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001f04:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 8001f06:	b292      	uxth	r2, r2
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001f08:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 8001f0a:	f841 2b04 	str.w	r2, [r1], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001f0e:	d1f4      	bne.n	8001efa <USB_Istr+0x14a>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	6003      	str	r3, [r0, #0]
 8001f14:	e791      	b.n	8001e3a <USB_Istr+0x8a>
 8001f16:	bf00      	nop
 8001f18:	40005c44 	.word	0x40005c44
 8001f1c:	20000dc8 	.word	0x20000dc8
 8001f20:	20001624 	.word	0x20001624
 8001f24:	200004a0 	.word	0x200004a0
 8001f28:	080022e9 	.word	0x080022e9
 8001f2c:	40005c48 	.word	0x40005c48
 8001f30:	20000494 	.word	0x20000494
 8001f34:	08002201 	.word	0x08002201
 8001f38:	20000284 	.word	0x20000284
 8001f3c:	080032c1 	.word	0x080032c1
 8001f40:	20000490 	.word	0x20000490
 8001f44:	08001d7d 	.word	0x08001d7d
 8001f48:	2000048c 	.word	0x2000048c
 8001f4c:	40005c00 	.word	0x40005c00
 8001f50:	40005c40 	.word	0x40005c40

08001f54 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <Virtual_Com_Port_SetConfiguration+0x10>)
 8001f56:	7a9b      	ldrb	r3, [r3, #10]
 8001f58:	b113      	cbz	r3, 8001f60 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8001f5a:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <Virtual_Com_Port_SetConfiguration+0x14>)
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20001600 	.word	0x20001600
 8001f68:	2000049c 	.word	0x2000049c

08001f6c <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8001f6e:	2204      	movs	r2, #4
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4770      	bx	lr
 8001f74:	2000049c 	.word	0x2000049c

08001f78 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <Virtual_Com_Port_Status_In+0x10>)
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	2a20      	cmp	r2, #32
  {
    //USART_Config();
    Request = 0;
 8001f7e:	bf04      	itt	eq
 8001f80:	2200      	moveq	r2, #0
 8001f82:	701a      	strbeq	r2, [r3, #0]
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000498 	.word	0x20000498

08001f8c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop

08001f90 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001f90:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8001f92:	b510      	push	{r4, lr}
 8001f94:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001f96:	d003      	beq.n	8001fa0 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8001f98:	2820      	cmp	r0, #32
 8001f9a:	d010      	beq.n	8001fbe <Virtual_Com_Port_Data_Setup+0x2e>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <Virtual_Com_Port_Data_Setup+0x4c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	7813      	ldrb	r3, [r2, #0]
 8001fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001faa:	2b21      	cmp	r3, #33	; 0x21
 8001fac:	d1f6      	bne.n	8001f9c <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8001fae:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <Virtual_Com_Port_Data_Setup+0x50>)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001fb0:	2400      	movs	r4, #0
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001fb2:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001fb4:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4788      	blx	r1
  return USB_SUCCESS;
 8001fba:	4620      	mov	r0, r4
 8001fbc:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <Virtual_Com_Port_Data_Setup+0x4c>)
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	7811      	ldrb	r1, [r2, #0]
 8001fc4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001fc8:	2921      	cmp	r1, #33	; 0x21
 8001fca:	d003      	beq.n	8001fd4 <Virtual_Com_Port_Data_Setup+0x44>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001fcc:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <Virtual_Com_Port_Data_Setup+0x54>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001fce:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001fd0:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8001fd2:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <Virtual_Com_Port_Data_Setup+0x54>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8001fd6:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <Virtual_Com_Port_Data_Setup+0x58>)
    }
    Request = SET_LINE_CODING;
 8001fd8:	7003      	strb	r3, [r0, #0]
 8001fda:	e7e9      	b.n	8001fb0 <Virtual_Com_Port_Data_Setup+0x20>
 8001fdc:	20001620 	.word	0x20001620
 8001fe0:	08002021 	.word	0x08002021
 8001fe4:	20000498 	.word	0x20000498
 8001fe8:	08002039 	.word	0x08002039

08001fec <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <Virtual_Com_Port_NoData_Setup+0x20>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff6:	2b21      	cmp	r3, #33	; 0x21
 8001ff8:	d001      	beq.n	8001ffe <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8001ffa:	2002      	movs	r0, #2
}
 8001ffc:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8001ffe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002002:	2802      	cmp	r0, #2
    {
      return USB_SUCCESS;
 8002004:	bf14      	ite	ne
 8002006:	2002      	movne	r0, #2
 8002008:	2000      	moveq	r0, #0
 800200a:	4770      	bx	lr
 800200c:	20001620 	.word	0x20001620

08002010 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8002010:	b109      	cbz	r1, 8002016 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8002012:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 8002014:	4770      	bx	lr
{
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
 8002016:	2801      	cmp	r0, #1
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8002018:	bf8c      	ite	hi
 800201a:	2002      	movhi	r0, #2
 800201c:	2000      	movls	r0, #0
 800201e:	4770      	bx	lr

08002020 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002020:	b108      	cbz	r0, 8002026 <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002022:	4803      	ldr	r0, [pc, #12]	; (8002030 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8002024:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002026:	4b03      	ldr	r3, [pc, #12]	; (8002034 <Virtual_Com_Port_GetLineCoding+0x14>)
 8002028:	2208      	movs	r2, #8
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	821a      	strh	r2, [r3, #16]
    return NULL;
 800202e:	4770      	bx	lr
 8002030:	20000300 	.word	0x20000300
 8002034:	20001620 	.word	0x20001620

08002038 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002038:	b108      	cbz	r0, 800203e <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800203a:	4803      	ldr	r0, [pc, #12]	; (8002048 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800203c:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800203e:	4b03      	ldr	r3, [pc, #12]	; (800204c <Virtual_Com_Port_SetLineCoding+0x14>)
 8002040:	2208      	movs	r2, #8
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002046:	4770      	bx	lr
 8002048:	20000300 	.word	0x20000300
 800204c:	20001620 	.word	0x20001620

08002050 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8002050:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <Virtual_Com_Port_init+0x1c>)
 8002054:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <Virtual_Com_Port_init+0x20>)
 8002058:	2400      	movs	r4, #0
 800205a:	681a      	ldr	r2, [r3, #0]

  /* Connect the device */
  PowerOn();
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <Virtual_Com_Port_init+0x24>)

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 800205e:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8002060:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <Virtual_Com_Port_init+0x28>)
 8002064:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <Virtual_Com_Port_init+0x2c>)
 8002068:	601c      	str	r4, [r3, #0]
 800206a:	bd10      	pop	{r4, pc}
 800206c:	080025f1 	.word	0x080025f1
 8002070:	20001620 	.word	0x20001620
 8002074:	080021cd 	.word	0x080021cd
 8002078:	08003269 	.word	0x08003269
 800207c:	2000049c 	.word	0x2000049c

08002080 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <Virtual_Com_Port_Reset+0xc4>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002082:	4a31      	ldr	r2, [pc, #196]	; (8002148 <Virtual_Com_Port_Reset+0xc8>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002084:	681b      	ldr	r3, [r3, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002086:	79d2      	ldrb	r2, [r2, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8002088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800208c:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800208e:	725a      	strb	r2, [r3, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002090:	729c      	strb	r4, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8002092:	72dc      	strb	r4, [r3, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8002094:	4620      	mov	r0, r4
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <Virtual_Com_Port_Reset+0xcc>)
 8002098:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800209a:	4e2d      	ldr	r6, [pc, #180]	; (8002150 <Virtual_Com_Port_Reset+0xd0>)
 800209c:	4620      	mov	r0, r4
 800209e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a2:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 80020a4:	4d2b      	ldr	r5, [pc, #172]	; (8002154 <Virtual_Com_Port_Reset+0xd4>)
 80020a6:	4620      	mov	r0, r4
 80020a8:	2110      	movs	r1, #16
 80020aa:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80020ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8002170 <Virtual_Com_Port_Reset+0xf0>
 80020b0:	4620      	mov	r0, r4
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80020b6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8002174 <Virtual_Com_Port_Reset+0xf4>
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	4620      	mov	r0, r4
 80020be:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 80020c0:	4620      	mov	r0, r4
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <Virtual_Com_Port_Reset+0xd8>)
 80020c4:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <Virtual_Com_Port_Reset+0xdc>)
 80020c8:	4620      	mov	r0, r4
 80020ca:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80020ce:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002178 <Virtual_Com_Port_Reset+0xf8>
 80020d2:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <Virtual_Com_Port_Reset+0xe0>)
 80020d6:	4620      	mov	r0, r4
 80020d8:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 80020da:	4621      	mov	r1, r4
 80020dc:	2001      	movs	r0, #1
 80020de:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 80020e0:	2001      	movs	r0, #1
 80020e2:	21c0      	movs	r1, #192	; 0xc0
 80020e4:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 80020e6:	2001      	movs	r0, #1
 80020e8:	2120      	movs	r1, #32
 80020ea:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80020ec:	4f1d      	ldr	r7, [pc, #116]	; (8002164 <Virtual_Com_Port_Reset+0xe4>)
 80020ee:	4621      	mov	r1, r4
 80020f0:	2001      	movs	r0, #1
 80020f2:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 80020f4:	2002      	movs	r0, #2
 80020f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80020fa:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80020fc:	2002      	movs	r0, #2
 80020fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002102:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8002104:	4621      	mov	r1, r4
 8002106:	2002      	movs	r0, #2
 8002108:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800210a:	2002      	movs	r0, #2
 800210c:	2120      	movs	r1, #32
 800210e:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8002110:	4621      	mov	r1, r4
 8002112:	2003      	movs	r0, #3
 8002114:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8002116:	2003      	movs	r0, #3
 8002118:	f44f 7188 	mov.w	r1, #272	; 0x110
 800211c:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800211e:	2003      	movs	r0, #3
 8002120:	2140      	movs	r1, #64	; 0x40
 8002122:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8002124:	2003      	movs	r0, #3
 8002126:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800212a:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800212c:	4621      	mov	r1, r4
 800212e:	2003      	movs	r0, #3
 8002130:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <Virtual_Com_Port_Reset+0xe8>)
 8002134:	4620      	mov	r0, r4
 8002136:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <Virtual_Com_Port_Reset+0xec>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002142:	bf00      	nop
 8002144:	20001620 	.word	0x20001620
 8002148:	0800381c 	.word	0x0800381c
 800214c:	08003011 	.word	0x08003011
 8002150:	08003021 	.word	0x08003021
 8002154:	0800303d 	.word	0x0800303d
 8002158:	080030f5 	.word	0x080030f5
 800215c:	20000284 	.word	0x20000284
 8002160:	080030cd 	.word	0x080030cd
 8002164:	08003071 	.word	0x08003071
 8002168:	08002ec9 	.word	0x08002ec9
 800216c:	2000049c 	.word	0x2000049c
 8002170:	0800317d 	.word	0x0800317d
 8002174:	0800315d 	.word	0x0800315d
 8002178:	080031f9 	.word	0x080031f9

0800217c <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 800217c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800217e:	4902      	ldr	r1, [pc, #8]	; (8002188 <Virtual_Com_Port_GetDeviceDescriptor+0xc>)
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <Virtual_Com_Port_GetDeviceDescriptor+0x10>)
 8002182:	4798      	blx	r3
}
 8002184:	bd08      	pop	{r3, pc}
 8002186:	bf00      	nop
 8002188:	200002d8 	.word	0x200002d8
 800218c:	080029d1 	.word	0x080029d1

08002190 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8002190:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8002192:	4902      	ldr	r1, [pc, #8]	; (800219c <Virtual_Com_Port_GetConfigDescriptor+0xc>)
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <Virtual_Com_Port_GetConfigDescriptor+0x10>)
 8002196:	4798      	blx	r3
}
 8002198:	bd08      	pop	{r3, pc}
 800219a:	bf00      	nop
 800219c:	2000027c 	.word	0x2000027c
 80021a0:	080029d1 	.word	0x080029d1

080021a4 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 80021a4:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d805      	bhi.n	80021bc <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80021b0:	4904      	ldr	r1, [pc, #16]	; (80021c4 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 80021b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80021b8:	4790      	blx	r2
 80021ba:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 80021bc:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 80021be:	bd08      	pop	{r3, pc}
 80021c0:	20001620 	.word	0x20001620
 80021c4:	200002e0 	.word	0x200002e0
 80021c8:	080029d1 	.word	0x080029d1

080021cc <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 80021cc:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 80021ce:	2001      	movs	r0, #1
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <PowerOn+0x24>)
 80021d2:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80021d4:	4d07      	ldr	r5, [pc, #28]	; (80021f4 <PowerOn+0x28>)
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <PowerOn+0x2c>)
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80021d8:	4c08      	ldr	r4, [pc, #32]	; (80021fc <PowerOn+0x30>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80021da:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80021dc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80021e0:	2001      	movs	r0, #1
 80021e2:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80021e4:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 80021e6:	4610      	mov	r0, r2

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80021e8:	602a      	str	r2, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80021ea:	8021      	strh	r1, [r4, #0]
  _SetCNTR(wInterrupt_Mask);
 80021ec:	6019      	str	r1, [r3, #0]
  
  return USB_SUCCESS;
}
 80021ee:	bd38      	pop	{r3, r4, r5, pc}
 80021f0:	08002505 	.word	0x08002505
 80021f4:	40005c44 	.word	0x40005c44
 80021f8:	40005c40 	.word	0x40005c40
 80021fc:	20001624 	.word	0x20001624

08002200 <Suspend>:
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8002200:	2200      	movs	r2, #0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002202:	4613      	mov	r3, r2
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002204:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002206:	4931      	ldr	r1, [pc, #196]	; (80022cc <Suspend+0xcc>)
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002208:	b082      	sub	sp, #8
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800220a:	9201      	str	r2, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800220c:	680c      	ldr	r4, [r1, #0]
 800220e:	4830      	ldr	r0, [pc, #192]	; (80022d0 <Suspend+0xd0>)
 8002210:	3940      	subs	r1, #64	; 0x40
 8002212:	b2a4      	uxth	r4, r4

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002214:	f851 2b04 	ldr.w	r2, [r1], #4
 8002218:	b292      	uxth	r2, r2
 800221a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800221e:	3301      	adds	r3, #1
 8002220:	2b08      	cmp	r3, #8
 8002222:	d1f7      	bne.n	8002214 <Suspend+0x14>
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8002224:	f444 6280 	orr.w	r2, r4, #1024	; 0x400
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002228:	f024 0501 	bic.w	r5, r4, #1
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800222c:	4614      	mov	r4, r2
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <Suspend+0xcc>)
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002230:	b2ad      	uxth	r5, r5
	_SetCNTR(wCNTR);
 8002232:	f445 6680 	orr.w	r6, r5, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8002236:	f042 0201 	orr.w	r2, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800223a:	4926      	ldr	r1, [pc, #152]	; (80022d4 <Suspend+0xd4>)
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800223c:	601c      	str	r4, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800223e:	601a      	str	r2, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8002240:	601e      	str	r6, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8002242:	680b      	ldr	r3, [r1, #0]
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <Suspend+0xd4>)
 8002246:	055c      	lsls	r4, r3, #21
 8002248:	d5fb      	bpl.n	8002242 <Suspend+0x42>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 800224a:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 800224e:	4922      	ldr	r1, [pc, #136]	; (80022d8 <Suspend+0xd8>)
 8002250:	6013      	str	r3, [r2, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8002252:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 8002254:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8002258:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 800225a:	b292      	uxth	r2, r2
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800225c:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 800225e:	f841 2b04 	str.w	r2, [r1], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8002262:	d1f7      	bne.n	8002254 <Suspend+0x54>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <Suspend+0xcc>)
 8002266:	f445 6581 	orr.w	r5, r5, #1032	; 0x408
 800226a:	6015      	str	r5, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800226c:	6813      	ldr	r3, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800226e:	491b      	ldr	r1, [pc, #108]	; (80022dc <Suspend+0xdc>)
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8002270:	b29b      	uxth	r3, r3
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6013      	str	r3, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002278:	680b      	ldr	r3, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800227a:	4c19      	ldr	r4, [pc, #100]	; (80022e0 <Suspend+0xe0>)
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800227c:	9301      	str	r3, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 800227e:	680b      	ldr	r3, [r1, #0]
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8002280:	4814      	ldr	r0, [pc, #80]	; (80022d4 <Suspend+0xd4>)
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8002282:	f023 0303 	bic.w	r3, r3, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8002286:	f043 0301 	orr.w	r3, r3, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 800228a:	600b      	str	r3, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6023      	str	r3, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8002294:	6803      	ldr	r3, [r0, #0]
 8002296:	04db      	lsls	r3, r3, #19
 8002298:	d50f      	bpl.n	80022ba <Suspend+0xba>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 800229a:	f64e 75ff 	movw	r5, #61439	; 0xefff
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 800229e:	f64f 73f7 	movw	r3, #65527	; 0xfff7
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 80022a2:	6005      	str	r5, [r0, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 80022a4:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 80022a6:	4003      	ands	r3, r0
 80022a8:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 80022aa:	9b01      	ldr	r3, [sp, #4]
 80022ac:	600b      	str	r3, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6023      	str	r3, [r4, #0]
#endif
    }
}
 80022b6:	b002      	add	sp, #8
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <Suspend+0xe4>)
 80022bc:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6023      	str	r3, [r4, #0]
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
#endif
    }
}
 80022c6:	b002      	add	sp, #8
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
 80022ca:	bf00      	nop
 80022cc:	40005c40 	.word	0x40005c40
 80022d0:	20000dd0 	.word	0x20000dd0
 80022d4:	40005c44 	.word	0x40005c44
 80022d8:	40005c00 	.word	0x40005c00
 80022dc:	40007000 	.word	0x40007000
 80022e0:	e000ed10 	.word	0xe000ed10
 80022e4:	08002629 	.word	0x08002629

080022e8 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 80022e8:	b570      	push	{r4, r5, r6, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 80022ea:	4c32      	ldr	r4, [pc, #200]	; (80023b4 <Resume+0xcc>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 80022ec:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 80022ee:	bf18      	it	ne
 80022f0:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 80022f2:	7823      	ldrb	r3, [r4, #0]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d84b      	bhi.n	8002390 <Resume+0xa8>
 80022f8:	e8df f003 	tbb	[pc, r3]
 80022fc:	35301f18 	.word	0x35301f18
 8002300:	033f      	.short	0x033f
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8002302:	7863      	ldrb	r3, [r4, #1]
 8002304:	492b      	ldr	r1, [pc, #172]	; (80023b4 <Resume+0xcc>)
 8002306:	3b01      	subs	r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800230c:	7863      	ldrb	r3, [r4, #1]
 800230e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002312:	2b00      	cmp	r3, #0
 8002314:	d13e      	bne.n	8002394 <Resume+0xac>
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8002316:	f64f 73ef 	movw	r3, #65519	; 0xffef
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 800231a:	4827      	ldr	r0, [pc, #156]	; (80023b8 <Resume+0xd0>)
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
        remotewakeupon = 0;
 800231c:	4c27      	ldr	r4, [pc, #156]	; (80023bc <Resume+0xd4>)
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 800231e:	6806      	ldr	r6, [r0, #0]
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8002320:	2506      	movs	r5, #6
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 8002322:	4033      	ands	r3, r6
 8002324:	6003      	str	r3, [r0, #0]
        ResumeS.eState = RESUME_OFF;
 8002326:	700d      	strb	r5, [r1, #0]
        remotewakeupon = 0;
 8002328:	6022      	str	r2, [r4, #0]
 800232a:	bd70      	pop	{r4, r5, r6, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <Resume+0xd4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d030      	beq.n	8002396 <Resume+0xae>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8002334:	2305      	movs	r3, #5
 8002336:	7023      	strb	r3, [r4, #0]
 8002338:	bd70      	pop	{r4, r5, r6, pc}
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800233a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800233e:	4d1e      	ldr	r5, [pc, #120]	; (80023b8 <Resume+0xd0>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002340:	4a1f      	ldr	r2, [pc, #124]	; (80023c0 <Resume+0xd8>)
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8002342:	6829      	ldr	r1, [r5, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8002344:	400b      	ands	r3, r1
 8002346:	602b      	str	r3, [r5, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002348:	4790      	blx	r2
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <Resume+0xd4>)
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800234c:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8002350:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8002352:	2201      	movs	r2, #1
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8002354:	6028      	str	r0, [r5, #0]
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8002356:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 8002358:	601a      	str	r2, [r3, #0]
      break;
 800235a:	bd70      	pop	{r4, r5, r6, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800235c:	2202      	movs	r2, #2
      ResumeS.eState = RESUME_WAIT;
 800235e:	2303      	movs	r3, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002360:	7062      	strb	r2, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8002362:	7023      	strb	r3, [r4, #0]
      break;
 8002364:	bd70      	pop	{r4, r5, r6, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8002366:	7863      	ldrb	r3, [r4, #1]
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <Resume+0xcc>)
 800236a:	3b01      	subs	r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002370:	7863      	ldrb	r3, [r4, #1]
 8002372:	b97b      	cbnz	r3, 8002394 <Resume+0xac>
        ResumeS.eState = RESUME_START;
 8002374:	2304      	movs	r3, #4
 8002376:	7013      	strb	r3, [r2, #0]
 8002378:	bd70      	pop	{r4, r5, r6, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800237a:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <Resume+0xd0>)
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 800237c:	2005      	movs	r0, #5
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800237e:	6813      	ldr	r3, [r2, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 8002380:	210a      	movs	r1, #10
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8002382:	b29b      	uxth	r3, r3
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8002384:	f043 0310 	orr.w	r3, r3, #16
 8002388:	6013      	str	r3, [r2, #0]
      ResumeS.eState = RESUME_ON;
 800238a:	7020      	strb	r0, [r4, #0]
      ResumeS.bESOFcnt = 10;
 800238c:	7061      	strb	r1, [r4, #1]
      break;
 800238e:	bd70      	pop	{r4, r5, r6, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8002390:	2306      	movs	r3, #6
 8002392:	7023      	strb	r3, [r4, #0]
 8002394:	bd70      	pop	{r4, r5, r6, pc}
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8002396:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800239a:	4d07      	ldr	r5, [pc, #28]	; (80023b8 <Resume+0xd0>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <Resume+0xd8>)
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800239e:	6829      	ldr	r1, [r5, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 80023a0:	400b      	ands	r3, r1
 80023a2:	602b      	str	r3, [r5, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80023a4:	4790      	blx	r2

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80023a6:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
 80023aa:	2306      	movs	r3, #6
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80023ac:	602a      	str	r2, [r5, #0]
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
 80023ae:	7023      	strb	r3, [r4, #0]
 80023b0:	bd70      	pop	{r4, r5, r6, pc}
 80023b2:	bf00      	nop
 80023b4:	20000dcc 	.word	0x20000dcc
 80023b8:	40005c40 	.word	0x40005c40
 80023bc:	200004a4 	.word	0x200004a4
 80023c0:	08002451 	.word	0x08002451

080023c4 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 80023c4:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <USBWakeUp_IRQHandler+0xc>)
 80023c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40010414 	.word	0x40010414

080023d4 <IntToUnicode>:
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80023d4:	b1b2      	cbz	r2, 8002404 <IntToUnicode+0x30>
 80023d6:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80023d8:	b470      	push	{r4, r5, r6}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80023da:	461e      	mov	r6, r3
 80023dc:	1e54      	subs	r4, r2, #1
 80023de:	b2e4      	uxtb	r4, r4
 80023e0:	3401      	adds	r4, #1
 80023e2:	0064      	lsls	r4, r4, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80023e4:	0f02      	lsrs	r2, r0, #28
 80023e6:	2a09      	cmp	r2, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80023e8:	f102 0530 	add.w	r5, r2, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80023ec:	bf86      	itte	hi
 80023ee:	3237      	addhi	r2, #55	; 0x37
 80023f0:	54ca      	strbhi	r2, [r1, r3]
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80023f2:	54cd      	strbls	r5, [r1, r3]
 80023f4:	18ca      	adds	r2, r1, r3
 80023f6:	3302      	adds	r3, #2
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80023f8:	42a3      	cmp	r3, r4
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80023fa:	ea4f 1000 	mov.w	r0, r0, lsl #4
    
    pbuf[ 2* idx + 1] = 0;
 80023fe:	7056      	strb	r6, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002400:	d1f0      	bne.n	80023e4 <IntToUnicode+0x10>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8002402:	bc70      	pop	{r4, r5, r6}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop

08002408 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8002408:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800240a:	4b01      	ldr	r3, [pc, #4]	; (8002410 <USB_LP_IRQHandler+0x8>)
 800240c:	4798      	blx	r3
 800240e:	bd08      	pop	{r3, pc}
 8002410:	08001db1 	.word	0x08001db1

08002414 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <Set_System+0x18>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800241c:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002424:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	4770      	bx	lr
 800242c:	40011004 	.word	0x40011004

08002430 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8002430:	4905      	ldr	r1, [pc, #20]	; (8002448 <Set_USBClock+0x18>)
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8002432:	4a06      	ldr	r2, [pc, #24]	; (800244c <Set_USBClock+0x1c>)
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8002434:	680b      	ldr	r3, [r1, #0]
 8002436:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800243a:	600b      	str	r3, [r1, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40021004 	.word	0x40021004
 800244c:	4002101c 	.word	0x4002101c

08002450 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <Leave_LowPowerMode+0x18>)
 8002452:	7a9b      	ldrb	r3, [r3, #10]
 8002454:	b91b      	cbnz	r3, 800245e <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <Leave_LowPowerMode+0x1c>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800245e:	4b03      	ldr	r3, [pc, #12]	; (800246c <Leave_LowPowerMode+0x1c>)
 8002460:	2205      	movs	r2, #5
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20001600 	.word	0x20001600
 800246c:	2000049c 	.word	0x2000049c

08002470 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <USB_Interrupts_Config+0x6c>)
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <USB_Interrupts_Config+0x70>)
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002474:	f44f 2180 	mov.w	r1, #262144	; 0x40000
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8002478:	b510      	push	{r4, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800247a:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800247c:	681a      	ldr	r2, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800247e:	4919      	ldr	r1, [pc, #100]	; (80024e4 <USB_Interrupts_Config+0x74>)

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002484:	601a      	str	r2, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002486:	680a      	ldr	r2, [r1, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002488:	4817      	ldr	r0, [pc, #92]	; (80024e8 <USB_Interrupts_Config+0x78>)
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800248a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800248e:	600a      	str	r2, [r1, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002490:	6802      	ldr	r2, [r0, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8002492:	4c16      	ldr	r4, [pc, #88]	; (80024ec <USB_Interrupts_Config+0x7c>)
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002494:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002498:	6002      	str	r2, [r0, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800249a:	688a      	ldr	r2, [r1, #8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800249c:	2090      	movs	r0, #144	; 0x90
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800249e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024a2:	608a      	str	r2, [r1, #8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80024a4:	681a      	ldr	r2, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80024a6:	4912      	ldr	r1, [pc, #72]	; (80024f0 <USB_Interrupts_Config+0x80>)
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80024a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024ac:	601a      	str	r2, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80024ae:	2200      	movs	r2, #0
 80024b0:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <USB_Interrupts_Config+0x84>)
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80024b4:	4910      	ldr	r1, [pc, #64]	; (80024f8 <USB_Interrupts_Config+0x88>)
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80024b6:	6813      	ldr	r3, [r2, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80024b8:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80024ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024be:	6013      	str	r3, [r2, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80024c0:	2200      	movs	r2, #0
 80024c2:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80024c4:	490d      	ldr	r1, [pc, #52]	; (80024fc <USB_Interrupts_Config+0x8c>)

	SET_BIT( REG_EXTI_SWIER, 18 );
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <USB_Interrupts_Config+0x90>)
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80024c8:	680b      	ldr	r3, [r1, #0]
 80024ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ce:	600b      	str	r3, [r1, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	bf00      	nop
 80024dc:	40010414 	.word	0x40010414
 80024e0:	40010400 	.word	0x40010400
 80024e4:	40010404 	.word	0x40010404
 80024e8:	40010408 	.word	0x40010408
 80024ec:	08000dad 	.word	0x08000dad
 80024f0:	08002409 	.word	0x08002409
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	080023c5 	.word	0x080023c5
 80024fc:	e000e104 	.word	0xe000e104
 8002500:	40010410 	.word	0x40010410

08002504 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <USB_Cable_Config+0x18>)
 8002506:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8002508:	b918      	cbnz	r0, 8002512 <USB_Cable_Config+0xe>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 800250a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8002512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	4001100c 	.word	0x4001100c

08002520 <USB_To_USART_Send_Data>:
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8002520:	b181      	cbz	r1, 8002544 <USB_To_USART_Send_Data+0x24>
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8002522:	b570      	push	{r4, r5, r6, lr}
 8002524:	4604      	mov	r4, r0
 8002526:	4e08      	ldr	r6, [pc, #32]	; (8002548 <USB_To_USART_Send_Data+0x28>)
 8002528:	b082      	sub	sp, #8
 800252a:	1845      	adds	r5, r0, r1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800252c:	f814 3b01 	ldrb.w	r3, [r4], #1
    Hw_Uart_Q_Push( 5, &UartData );	//
 8002530:	2005      	movs	r0, #5
 8002532:	f10d 0107 	add.w	r1, sp, #7
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8002536:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800253a:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800253c:	42ac      	cmp	r4, r5
 800253e:	d1f5      	bne.n	800252c <USB_To_USART_Send_Data+0xc>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8002540:	b002      	add	sp, #8
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	08000ca1 	.word	0x08000ca1

0800254c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800254e:	4d20      	ldr	r5, [pc, #128]	; (80025d0 <Handle_USBAsynchXfer+0x84>)
 8002550:	782b      	ldrb	r3, [r5, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d023      	beq.n	800259e <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <Handle_USBAsynchXfer+0x88>)
 8002558:	6813      	ldr	r3, [r2, #0]
 800255a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800255e:	d02c      	beq.n	80025ba <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8002560:	491d      	ldr	r1, [pc, #116]	; (80025d8 <Handle_USBAsynchXfer+0x8c>)
 8002562:	6809      	ldr	r1, [r1, #0]
 8002564:	428b      	cmp	r3, r1
 8002566:	d02f      	beq.n	80025c8 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8002568:	d81a      	bhi.n	80025a0 <Handle_USBAsynchXfer+0x54>
 800256a:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800256c:	1ac9      	subs	r1, r1, r3
 800256e:	4e1b      	ldr	r6, [pc, #108]	; (80025dc <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8002570:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8002572:	6031      	str	r1, [r6, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8002574:	d91b      	bls.n	80025ae <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8002576:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8002578:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 800257a:	6013      	str	r3, [r2, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 800257c:	6031      	str	r1, [r6, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800257e:	2440      	movs	r4, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8002582:	2601      	movs	r6, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002584:	4418      	add	r0, r3
 8002586:	21c0      	movs	r1, #192	; 0xc0
 8002588:	4622      	mov	r2, r4
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800258c:	702e      	strb	r6, [r5, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800258e:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8002590:	4630      	mov	r0, r6
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <Handle_USBAsynchXfer+0x9c>)
 8002594:	4621      	mov	r1, r4
 8002596:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 8002598:	4630      	mov	r0, r6
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <Handle_USBAsynchXfer+0xa0>)
 800259c:	4798      	blx	r3
 800259e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80025a0:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 80025a4:	4e0d      	ldr	r6, [pc, #52]	; (80025dc <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80025a6:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80025a8:	6031      	str	r1, [r6, #0]
 80025aa:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80025ac:	d8e3      	bhi.n	8002576 <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80025ae:	440b      	add	r3, r1
      USART_Rx_length = 0;
 80025b0:	2700      	movs	r7, #0
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80025b2:	6013      	str	r3, [r2, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 80025b4:	b28c      	uxth	r4, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 80025b6:	6037      	str	r7, [r6, #0]
 80025b8:	e7e2      	b.n	8002580 <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80025bc:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80025be:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80025c0:	6010      	str	r0, [r2, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80025c2:	b109      	cbz	r1, 80025c8 <Handle_USBAsynchXfer+0x7c>
 80025c4:	4603      	mov	r3, r0
 80025c6:	e7d1      	b.n	800256c <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 80025c8:	2300      	movs	r3, #0
 80025ca:	702b      	strb	r3, [r5, #0]
      return;
 80025cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200004a8 	.word	0x200004a8
 80025d4:	200004b0 	.word	0x200004b0
 80025d8:	200004ac 	.word	0x200004ac
 80025dc:	200004b4 	.word	0x200004b4
 80025e0:	20000df0 	.word	0x20000df0
 80025e4:	08002fbd 	.word	0x08002fbd
 80025e8:	080031dd 	.word	0x080031dd
 80025ec:	080030a5 	.word	0x080030a5

080025f0 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80025f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <Get_SerialNum+0x24>)
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <Get_SerialNum+0x28>)
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80025f6:	6810      	ldr	r0, [r2, #0]
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80025f8:	681b      	ldr	r3, [r3, #0]
  Device_Serial1 = *(uint32_t*)ID2;
 80025fa:	f852 4c04 	ldr.w	r4, [r2, #-4]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80025fe:	1818      	adds	r0, r3, r0
 8002600:	d007      	beq.n	8002612 <Get_SerialNum+0x22>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8002602:	4906      	ldr	r1, [pc, #24]	; (800261c <Get_SerialNum+0x2c>)
 8002604:	2208      	movs	r2, #8
 8002606:	4d06      	ldr	r5, [pc, #24]	; (8002620 <Get_SerialNum+0x30>)
 8002608:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 800260a:	4620      	mov	r0, r4
 800260c:	4905      	ldr	r1, [pc, #20]	; (8002624 <Get_SerialNum+0x34>)
 800260e:	2204      	movs	r2, #4
 8002610:	47a8      	blx	r5
 8002612:	bd38      	pop	{r3, r4, r5, pc}
 8002614:	1ffff7f0 	.word	0x1ffff7f0
 8002618:	1ffff7e8 	.word	0x1ffff7e8
 800261c:	2000022a 	.word	0x2000022a
 8002620:	080023d5 	.word	0x080023d5
 8002624:	2000023a 	.word	0x2000023a

08002628 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8002628:	bf30      	wfi
 800262a:	4770      	bx	lr

0800262c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800262c:	b508      	push	{r3, lr}
  if (Length == 0)
 800262e:	b138      	cbz	r0, 8002640 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <Standard_GetConfiguration+0x20>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <Standard_GetConfiguration+0x24>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	300a      	adds	r0, #10
}
 800263e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <Standard_GetConfiguration+0x24>)
 8002642:	2201      	movs	r2, #1
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8002648:	bd08      	pop	{r3, pc}
 800264a:	bf00      	nop
 800264c:	2000161c 	.word	0x2000161c
 8002650:	20001620 	.word	0x20001620

08002654 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8002654:	b508      	push	{r3, lr}
  if (Length == 0)
 8002656:	b138      	cbz	r0, 8002668 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <Standard_GetInterface+0x20>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <Standard_GetInterface+0x24>)
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	300c      	adds	r0, #12
}
 8002666:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <Standard_GetInterface+0x24>)
 800266a:	2201      	movs	r2, #1
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8002670:	bd08      	pop	{r3, pc}
 8002672:	bf00      	nop
 8002674:	2000161c 	.word	0x2000161c
 8002678:	20001620 	.word	0x20001620

0800267c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800267c:	b508      	push	{r3, lr}
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <Standard_GetStatus+0x80>)
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
 8002680:	2800      	cmp	r0, #0
 8002682:	d032      	beq.n	80026ea <Standard_GetStatus+0x6e>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8002684:	481e      	ldr	r0, [pc, #120]	; (8002700 <Standard_GetStatus+0x84>)

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002686:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8002688:	2100      	movs	r1, #0
 800268a:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800268c:	7813      	ldrb	r3, [r2, #0]
 800268e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002692:	d016      	beq.n	80026c2 <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002694:	2b01      	cmp	r3, #1
 8002696:	d027      	beq.n	80026e8 <Standard_GetStatus+0x6c>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002698:	2b02      	cmp	r3, #2
 800269a:	d124      	bne.n	80026e6 <Standard_GetStatus+0x6a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800269c:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800269e:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026a8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80026ac:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80026ae:	681b      	ldr	r3, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80026b0:	d41f      	bmi.n	80026f2 <Standard_GetStatus+0x76>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80026b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	d10e      	bne.n	80026da <Standard_GetStatus+0x5e>
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 80026bc:	2301      	movs	r3, #1
 80026be:	7003      	strb	r3, [r0, #0]
 80026c0:	e00b      	b.n	80026da <Standard_GetStatus+0x5e>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 80026c2:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80026c4:	0693      	lsls	r3, r2, #26
 80026c6:	bf54      	ite	pl
 80026c8:	7803      	ldrbpl	r3, [r0, #0]
 80026ca:	2302      	movmi	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80026cc:	0651      	lsls	r1, r2, #25
    {
      SetBit(StatusInfo0, 0);
 80026ce:	bf4c      	ite	mi
 80026d0:	f043 0301 	orrmi.w	r3, r3, #1
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80026d4:	f023 0301 	bicpl.w	r3, r3, #1
 80026d8:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <Standard_GetStatus+0x88>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 80026e2:	4807      	ldr	r0, [pc, #28]	; (8002700 <Standard_GetStatus+0x84>)
 80026e4:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 80026e6:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80026e8:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2202      	movs	r2, #2
 80026ee:	821a      	strh	r2, [r3, #16]
    return 0;
 80026f0:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80026f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d1ef      	bne.n	80026da <Standard_GetStatus+0x5e>
 80026fa:	e7df      	b.n	80026bc <Standard_GetStatus+0x40>
 80026fc:	20001620 	.word	0x20001620
 8002700:	200015f0 	.word	0x200015f0
 8002704:	2000161c 	.word	0x2000161c

08002708 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8002708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800270c:	4f24      	ldr	r7, [pc, #144]	; (80027a0 <DataStageIn+0x98>)
 800270e:	683c      	ldr	r4, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8002710:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8002712:	7a26      	ldrb	r6, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8002714:	b923      	cbnz	r3, 8002720 <DataStageIn+0x18>
 8002716:	2e04      	cmp	r6, #4
 8002718:	d02a      	beq.n	8002770 <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800271a:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800271c:	2604      	movs	r6, #4
 800271e:	e003      	b.n	8002728 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8002720:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8002722:	42ab      	cmp	r3, r5
 8002724:	d9fa      	bls.n	800271c <DataStageIn+0x14>
 8002726:	2602      	movs	r6, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8002728:	429d      	cmp	r5, r3
 800272a:	bf28      	it	cs
 800272c:	461d      	movcs	r5, r3
 800272e:	69a3      	ldr	r3, [r4, #24]
 8002730:	4628      	mov	r0, r5
 8002732:	4798      	blx	r3
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <DataStageIn+0x9c>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8002736:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8002738:	2000      	movs	r0, #0
 800273a:	4798      	blx	r3
 800273c:	462a      	mov	r2, r5
 800273e:	4601      	mov	r1, r0
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <DataStageIn+0xa0>)
 8002742:	4640      	mov	r0, r8
 8002744:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8002746:	4629      	mov	r1, r5
 8002748:	2000      	movs	r0, #0
 800274a:	4b18      	ldr	r3, [pc, #96]	; (80027ac <DataStageIn+0xa4>)
 800274c:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800274e:	8a63      	ldrh	r3, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8002750:	8a22      	ldrh	r2, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8002752:	4917      	ldr	r1, [pc, #92]	; (80027b0 <DataStageIn+0xa8>)
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8002754:	1b52      	subs	r2, r2, r5
  pEPinfo->Usb_wOffset += Length;
 8002756:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <DataStageIn+0xac>)
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800275a:	8222      	strh	r2, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800275c:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 800275e:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8002760:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002764:	683c      	ldr	r4, [r7, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8002766:	8008      	strh	r0, [r1, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8002768:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800276a:	7226      	strb	r6, [r4, #8]
 800276c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8002770:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <DataStageIn+0xb0>)
 8002772:	7811      	ldrb	r1, [r2, #0]
 8002774:	2901      	cmp	r1, #1
 8002776:	d006      	beq.n	8002786 <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <DataStageIn+0xa8>)
 800277a:	2607      	movs	r6, #7
 800277c:	2210      	movs	r2, #16
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800277e:	7226      	strb	r6, [r4, #8]
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8002780:	801a      	strh	r2, [r3, #0]
 8002782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <DataStageIn+0xb4>)
 8002788:	490d      	ldr	r1, [pc, #52]	; (80027c0 <DataStageIn+0xb8>)
 800278a:	6800      	ldr	r0, [r0, #0]
 800278c:	4d08      	ldr	r5, [pc, #32]	; (80027b0 <DataStageIn+0xa8>)
 800278e:	b280      	uxth	r0, r0
 8002790:	4401      	add	r1, r0
 8002792:	0049      	lsls	r1, r1, #1
 8002794:	2030      	movs	r0, #48	; 0x30
 8002796:	800b      	strh	r3, [r1, #0]
 8002798:	804b      	strh	r3, [r1, #2]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800279a:	7013      	strb	r3, [r2, #0]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800279c:	8028      	strh	r0, [r5, #0]
 800279e:	e7e4      	b.n	800276a <DataStageIn+0x62>
 80027a0:	20001620 	.word	0x20001620
 80027a4:	0800319d 	.word	0x0800319d
 80027a8:	08002fbd 	.word	0x08002fbd
 80027ac:	080031dd 	.word	0x080031dd
 80027b0:	20001628 	.word	0x20001628
 80027b4:	20001626 	.word	0x20001626
 80027b8:	200004b8 	.word	0x200004b8
 80027bc:	40005c50 	.word	0x40005c50
 80027c0:	20003002 	.word	0x20003002

080027c4 <Standard_SetConfiguration>:
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <Standard_SetConfiguration+0x30>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80027c6:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <Standard_SetConfiguration+0x34>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	7851      	ldrb	r1, [r2, #1]
 80027cc:	78da      	ldrb	r2, [r3, #3]
 80027ce:	4291      	cmp	r1, r2
 80027d0:	d201      	bcs.n	80027d6 <Standard_SetConfiguration+0x12>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80027d2:	2002      	movs	r0, #2
 80027d4:	4770      	bx	lr
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80027d6:	7899      	ldrb	r1, [r3, #2]
 80027d8:	2900      	cmp	r1, #0
 80027da:	d1fa      	bne.n	80027d2 <Standard_SetConfiguration+0xe>
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80027dc:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80027de:	889c      	ldrh	r4, [r3, #4]
 80027e0:	b10c      	cbz	r4, 80027e6 <Standard_SetConfiguration+0x22>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80027e2:	2002      	movs	r0, #2
  }
}
 80027e4:	bd10      	pop	{r4, pc}
  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
    pUser_Standard_Requests->User_SetConfiguration();
 80027e6:	4905      	ldr	r1, [pc, #20]	; (80027fc <Standard_SetConfiguration+0x38>)

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80027e8:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80027ea:	680b      	ldr	r3, [r1, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4798      	blx	r3
    return USB_SUCCESS;
 80027f0:	4620      	mov	r0, r4
 80027f2:	bd10      	pop	{r4, pc}
 80027f4:	20001620 	.word	0x20001620
 80027f8:	20000308 	.word	0x20000308
 80027fc:	2000161c 	.word	0x2000161c

08002800 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8002800:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <Standard_SetInterface+0x44>)
 8002804:	4c10      	ldr	r4, [pc, #64]	; (8002848 <Standard_SetInterface+0x48>)
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	7958      	ldrb	r0, [r3, #5]
 800280c:	78d9      	ldrb	r1, [r3, #3]
 800280e:	6993      	ldr	r3, [r2, #24]
 8002810:	4798      	blx	r3

  if (pInformation->Current_Configuration != 0)
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	7a9a      	ldrb	r2, [r3, #10]
 8002816:	b90a      	cbnz	r2, 800281c <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8002818:	2002      	movs	r0, #2
}
 800281a:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800281c:	2800      	cmp	r0, #0
 800281e:	d1fb      	bne.n	8002818 <Standard_SetInterface+0x18>
 8002820:	791a      	ldrb	r2, [r3, #4]
 8002822:	2a00      	cmp	r2, #0
 8002824:	d1f8      	bne.n	8002818 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8002826:	789d      	ldrb	r5, [r3, #2]
 8002828:	2d00      	cmp	r5, #0
 800282a:	d1f5      	bne.n	8002818 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <Standard_SetInterface+0x4c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002834:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8002836:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002838:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800283a:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800283c:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800283e:	731a      	strb	r2, [r3, #12]
 8002840:	bd38      	pop	{r3, r4, r5, pc}
 8002842:	bf00      	nop
 8002844:	200015f8 	.word	0x200015f8
 8002848:	20001620 	.word	0x20001620
 800284c:	2000161c 	.word	0x2000161c

08002850 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8002850:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8002852:	4b31      	ldr	r3, [pc, #196]	; (8002918 <Standard_ClearFeature+0xc8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002858:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800285c:	d003      	beq.n	8002866 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800285e:	2802      	cmp	r0, #2
 8002860:	d006      	beq.n	8002870 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8002862:	2002      	movs	r0, #2
}
 8002864:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8002866:	7a5a      	ldrb	r2, [r3, #9]
 8002868:	f022 0220 	bic.w	r2, r2, #32
 800286c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800286e:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8002870:	885a      	ldrh	r2, [r3, #2]
 8002872:	2a00      	cmp	r2, #0
 8002874:	d1f6      	bne.n	8002864 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8002876:	791a      	ldrb	r2, [r3, #4]
 8002878:	2a00      	cmp	r2, #0
 800287a:	d1f3      	bne.n	8002864 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800287c:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800287e:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8002882:	0084      	lsls	r4, r0, #2
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8002884:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8002886:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800288a:	4d24      	ldr	r5, [pc, #144]	; (800291c <Standard_ClearFeature+0xcc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800288c:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002890:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8002892:	782d      	ldrb	r5, [r5, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8002894:	bf4c      	ite	mi
 8002896:	f001 0130 	andmi.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800289a:	f401 5140 	andpl.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800289e:	42a8      	cmp	r0, r5
 80028a0:	d2df      	bcs.n	8002862 <Standard_ClearFeature+0x12>
 80028a2:	2900      	cmp	r1, #0
 80028a4:	d0dd      	beq.n	8002862 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 80028a6:	7a9b      	ldrb	r3, [r3, #10]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0da      	beq.n	8002862 <Standard_ClearFeature+0x12>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80028ac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80028b0:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80028b4:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80028b6:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80028b8:	d509      	bpl.n	80028ce <Standard_ClearFeature+0x7e>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80028ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d01e      	beq.n	8002900 <Standard_ClearFeature+0xb0>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80028c2:	4b17      	ldr	r3, [pc, #92]	; (8002920 <Standard_ClearFeature+0xd0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	4798      	blx	r3
    return USB_SUCCESS;
 80028ca:	2000      	movs	r0, #0
 80028cc:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80028ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80028d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d6:	d1f4      	bne.n	80028c2 <Standard_ClearFeature+0x72>
      {
        if (Related_Endpoint == ENDP0)
 80028d8:	b9d8      	cbnz	r0, 8002912 <Standard_ClearFeature+0xc2>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <Standard_ClearFeature+0xd4>)
 80028dc:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <Standard_ClearFeature+0xd8>)
 80028e2:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80028f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	e7e0      	b.n	80028c2 <Standard_ClearFeature+0x72>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8002900:	b2c4      	uxtb	r4, r0
 8002902:	4620      	mov	r0, r4
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <Standard_ClearFeature+0xdc>)
 8002906:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8002908:	4620      	mov	r0, r4
 800290a:	2130      	movs	r1, #48	; 0x30
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <Standard_ClearFeature+0xe0>)
 800290e:	4798      	blx	r3
 8002910:	e7d7      	b.n	80028c2 <Standard_ClearFeature+0x72>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <Standard_ClearFeature+0xe4>)
 8002914:	4798      	blx	r3
 8002916:	e7e5      	b.n	80028e4 <Standard_ClearFeature+0x94>
 8002918:	20001620 	.word	0x20001620
 800291c:	20000308 	.word	0x20000308
 8002920:	2000161c 	.word	0x2000161c
 8002924:	20000284 	.word	0x20000284
 8002928:	080031f9 	.word	0x080031f9
 800292c:	08003139 	.word	0x08003139
 8002930:	0800303d 	.word	0x0800303d
 8002934:	08003115 	.word	0x08003115

08002938 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8002938:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <Standard_SetEndPointFeature+0x8c>)
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	7942      	ldrb	r2, [r0, #5]
  rEP = wIndex0 & ~0x80;
 8002940:	f022 0180 	bic.w	r1, r2, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002944:	008c      	lsls	r4, r1, #2

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8002946:	0615      	lsls	r5, r2, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002948:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800294c:	4d1e      	ldr	r5, [pc, #120]	; (80029c8 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800294e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002952:	681b      	ldr	r3, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8002954:	782d      	ldrb	r5, [r5, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002956:	bf4c      	ite	mi
 8002958:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800295c:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8002960:	42a9      	cmp	r1, r5
 8002962:	d301      	bcc.n	8002968 <Standard_SetEndPointFeature+0x30>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8002964:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8002966:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8002968:	8841      	ldrh	r1, [r0, #2]
 800296a:	2900      	cmp	r1, #0
 800296c:	d1fa      	bne.n	8002964 <Standard_SetEndPointFeature+0x2c>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f8      	beq.n	8002964 <Standard_SetEndPointFeature+0x2c>
      || pInformation->Current_Configuration == 0)
 8002972:	7a83      	ldrb	r3, [r0, #10]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f5      	beq.n	8002964 <Standard_SetEndPointFeature+0x2c>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8002978:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800297c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002980:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8002982:	6823      	ldr	r3, [r4, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002984:	d511      	bpl.n	80029aa <Standard_SetEndPointFeature+0x72>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8002986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800298e:	b29b      	uxth	r3, r3
 8002990:	f083 0310 	eor.w	r3, r3, #16
 8002994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299c:	6023      	str	r3, [r4, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <Standard_SetEndPointFeature+0x94>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4798      	blx	r3
  return USB_SUCCESS;
 80029a6:	2000      	movs	r0, #0
 80029a8:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80029aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80029b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	e7ec      	b.n	800299e <Standard_SetEndPointFeature+0x66>
 80029c4:	20001620 	.word	0x20001620
 80029c8:	20000308 	.word	0x20000308
 80029cc:	2000161c 	.word	0x2000161c

080029d0 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <Standard_GetDescriptorData+0x18>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 80029d6:	b110      	cbz	r0, 80029de <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 80029d8:	6808      	ldr	r0, [r1, #0]
 80029da:	4410      	add	r0, r2
}
 80029dc:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80029de:	8889      	ldrh	r1, [r1, #4]
 80029e0:	1a8a      	subs	r2, r1, r2
 80029e2:	821a      	strh	r2, [r3, #16]
    return 0;
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20001620 	.word	0x20001620

080029ec <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80029ec:	b510      	push	{r4, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <Post0_Process+0x34>)
 80029f0:	2000      	movs	r0, #0
 80029f2:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <Post0_Process+0x38>)
 80029f8:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <Post0_Process+0x3c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	7a18      	ldrb	r0, [r3, #8]
 8002a00:	2808      	cmp	r0, #8
 8002a02:	d106      	bne.n	8002a12 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8002a04:	4909      	ldr	r1, [pc, #36]	; (8002a2c <Post0_Process+0x40>)
    vSetEPTxStatus(EP_TX_STALL);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <Post0_Process+0x44>)
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 8002a08:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8002a0c:	2210      	movs	r2, #16
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 8002a0e:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8002a10:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8002a12:	f1a0 0009 	sub.w	r0, r0, #9
 8002a16:	fab0 f080 	clz	r0, r0
 8002a1a:	0940      	lsrs	r0, r0, #5
 8002a1c:	bd10      	pop	{r4, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000284 	.word	0x20000284
 8002a24:	080031f9 	.word	0x080031f9
 8002a28:	20001620 	.word	0x20001620
 8002a2c:	20001626 	.word	0x20001626
 8002a30:	20001628 	.word	0x20001628

08002a34 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8002a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002a36:	4ba1      	ldr	r3, [pc, #644]	; (8002cbc <Setup0_Process+0x288>)

  if (pInformation->ControlState != PAUSE)
 8002a38:	4ea1      	ldr	r6, [pc, #644]	; (8002cc0 <Setup0_Process+0x28c>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002a3a:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8002a3c:	6834      	ldr	r4, [r6, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002a3e:	4ba1      	ldr	r3, [pc, #644]	; (8002cc4 <Setup0_Process+0x290>)
 8002a40:	b292      	uxth	r2, r2
 8002a42:	4413      	add	r3, r2

  if (pInformation->ControlState != PAUSE)
 8002a44:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002a46:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 8002a48:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8002a4a:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002a4c:	681d      	ldr	r5, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8002a4e:	d047      	beq.n	8002ae0 <Setup0_Process+0xac>
 8002a50:	b2ad      	uxth	r5, r5
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002a52:	006d      	lsls	r5, r5, #1
 8002a54:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002a58:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8002a5c:	782b      	ldrb	r3, [r5, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8002a5e:	4f9a      	ldr	r7, [pc, #616]	; (8002cc8 <Setup0_Process+0x294>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8002a60:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8002a62:	786b      	ldrb	r3, [r5, #1]
 8002a64:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8002a66:	88a8      	ldrh	r0, [r5, #4]
 8002a68:	47b8      	blx	r7
 8002a6a:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8002a6c:	8928      	ldrh	r0, [r5, #8]
 8002a6e:	6834      	ldr	r4, [r6, #0]
 8002a70:	47b8      	blx	r7
 8002a72:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8002a74:	89ab      	ldrh	r3, [r5, #12]
 8002a76:	6834      	ldr	r4, [r6, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8002a78:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8002a7a:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8002a7c:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d033      	beq.n	8002aea <Setup0_Process+0xb6>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8002a82:	7860      	ldrb	r0, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8002a84:	2806      	cmp	r0, #6
 8002a86:	f000 808a 	beq.w	8002b9e <Setup0_Process+0x16a>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d149      	bne.n	8002b22 <Setup0_Process+0xee>
 8002a8e:	8861      	ldrh	r1, [r4, #2]
 8002a90:	2900      	cmp	r1, #0
 8002a92:	f000 8098 	beq.w	8002bc6 <Setup0_Process+0x192>
 8002a96:	4d8d      	ldr	r5, [pc, #564]	; (8002ccc <Setup0_Process+0x298>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8002a9e:	2803      	cmp	r0, #3
 8002aa0:	f000 80ea 	beq.w	8002c78 <Setup0_Process+0x244>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8002aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002aa8:	6833      	ldr	r3, [r6, #0]
 8002aaa:	8a1a      	ldrh	r2, [r3, #16]
 8002aac:	428a      	cmp	r2, r1
 8002aae:	d048      	beq.n	8002b42 <Setup0_Process+0x10e>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8002ab0:	2802      	cmp	r0, #2
 8002ab2:	d00f      	beq.n	8002ad4 <Setup0_Process+0xa0>
 8002ab4:	b172      	cbz	r2, 8002ad4 <Setup0_Process+0xa0>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8002ab6:	f993 1000 	ldrsb.w	r1, [r3]
 8002aba:	2900      	cmp	r1, #0
 8002abc:	f2c0 80b8 	blt.w	8002c30 <Setup0_Process+0x1fc>
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8002ac0:	4983      	ldr	r1, [pc, #524]	; (8002cd0 <Setup0_Process+0x29c>)
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8002ac2:	2203      	movs	r2, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8002ac4:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8002ac8:	8008      	strh	r0, [r1, #0]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8002aca:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8002acc:	4b81      	ldr	r3, [pc, #516]	; (8002cd4 <Setup0_Process+0x2a0>)
 8002ace:	4798      	blx	r3
}
 8002ad0:	b003      	add	sp, #12
 8002ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8002ad8:	4b7e      	ldr	r3, [pc, #504]	; (8002cd4 <Setup0_Process+0x2a0>)
 8002ada:	4798      	blx	r3
}
 8002adc:	b003      	add	sp, #12
 8002ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae0:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1cb      	bne.n	8002a82 <Setup0_Process+0x4e>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002aea:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8002aec:	7865      	ldrb	r5, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002aee:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002af2:	d02c      	beq.n	8002b4e <Setup0_Process+0x11a>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	f000 80b2 	beq.w	8002c5e <Setup0_Process+0x22a>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	f000 80d5 	beq.w	8002caa <Setup0_Process+0x276>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8002b00:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <Setup0_Process+0x298>)
 8002b02:	4628      	mov	r0, r5
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8002b0a:	2803      	cmp	r0, #3
 8002b0c:	f000 8110 	beq.w	8002d30 <Setup0_Process+0x2fc>
 8002b10:	6834      	ldr	r4, [r6, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d034      	beq.n	8002b80 <Setup0_Process+0x14c>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8002b16:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002b18:	7223      	strb	r3, [r4, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8002b1a:	4b6e      	ldr	r3, [pc, #440]	; (8002cd4 <Setup0_Process+0x2a0>)
 8002b1c:	4798      	blx	r3
}
 8002b1e:	b003      	add	sp, #12
 8002b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8002b22:	2808      	cmp	r0, #8
 8002b24:	d161      	bne.n	8002bea <Setup0_Process+0x1b6>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002b26:	7823      	ldrb	r3, [r4, #0]
 8002b28:	065b      	lsls	r3, r3, #25
 8002b2a:	d1b4      	bne.n	8002a96 <Setup0_Process+0x62>
    {
      CopyRoutine = Standard_GetConfiguration;
 8002b2c:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <Setup0_Process+0x2a4>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8002b2e:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002b30:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8002b32:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8002b34:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8002b36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b3a:	6833      	ldr	r3, [r6, #0]
 8002b3c:	8a1a      	ldrh	r2, [r3, #16]
 8002b3e:	428a      	cmp	r2, r1
 8002b40:	d1b8      	bne.n	8002ab4 <Setup0_Process+0x80>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8002b42:	2209      	movs	r2, #9
 8002b44:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <Setup0_Process+0x2a0>)
 8002b48:	4798      	blx	r3
}
 8002b4a:	b003      	add	sp, #12
 8002b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8002b4e:	2d09      	cmp	r5, #9
 8002b50:	f000 80e8 	beq.w	8002d24 <Setup0_Process+0x2f0>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8002b54:	2d05      	cmp	r5, #5
 8002b56:	f000 8096 	beq.w	8002c86 <Setup0_Process+0x252>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8002b5a:	2d03      	cmp	r5, #3
 8002b5c:	f000 80d0 	beq.w	8002d00 <Setup0_Process+0x2cc>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8002b60:	2d01      	cmp	r5, #1
 8002b62:	d1cd      	bne.n	8002b00 <Setup0_Process+0xcc>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8002b64:	78e3      	ldrb	r3, [r4, #3]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d1ca      	bne.n	8002b00 <Setup0_Process+0xcc>
          && pInformation->USBwIndex == 0
 8002b6a:	88a3      	ldrh	r3, [r4, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1c7      	bne.n	8002b00 <Setup0_Process+0xcc>
          && ValBit(pInformation->Current_Feature, 5))
 8002b70:	7a63      	ldrb	r3, [r4, #9]
 8002b72:	069f      	lsls	r7, r3, #26
 8002b74:	d5c4      	bpl.n	8002b00 <Setup0_Process+0xcc>
      {
        Result = Standard_ClearFeature();
 8002b76:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <Setup0_Process+0x2a8>)
 8002b78:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d1c0      	bne.n	8002b00 <Setup0_Process+0xcc>
 8002b7e:	6834      	ldr	r4, [r6, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002b80:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <Setup0_Process+0x288>)
 8002b82:	4b57      	ldr	r3, [pc, #348]	; (8002ce0 <Setup0_Process+0x2ac>)
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	4957      	ldr	r1, [pc, #348]	; (8002ce4 <Setup0_Process+0x2b0>)
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2200      	movs	r2, #0
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	805a      	strh	r2, [r3, #2]
 8002b94:	2030      	movs	r0, #48	; 0x30
 8002b96:	2306      	movs	r3, #6
 8002b98:	8008      	strh	r0, [r1, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002b9a:	7223      	strb	r3, [r4, #8]
 8002b9c:	e7bd      	b.n	8002b1a <Setup0_Process+0xe6>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002b9e:	7823      	ldrb	r3, [r4, #0]
 8002ba0:	065d      	lsls	r5, r3, #25
 8002ba2:	f47f af78 	bne.w	8002a96 <Setup0_Process+0x62>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8002ba6:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8002ba8:	4d48      	ldr	r5, [pc, #288]	; (8002ccc <Setup0_Process+0x298>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	f000 80bd 	beq.w	8002d2a <Setup0_Process+0x2f6>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d065      	beq.n	8002c80 <Setup0_Process+0x24c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	f47f af6f 	bne.w	8002a98 <Setup0_Process+0x64>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1b5      	bne.n	8002b2e <Setup0_Process+0xfa>
 8002bc2:	2006      	movs	r0, #6
 8002bc4:	e768      	b.n	8002a98 <Setup0_Process+0x64>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8002bc6:	6863      	ldr	r3, [r4, #4]
 8002bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bd0:	f47f af61 	bne.w	8002a96 <Setup0_Process+0x62>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002bd4:	7820      	ldrb	r0, [r4, #0]
 8002bd6:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8002bda:	f040 80ad 	bne.w	8002d38 <Setup0_Process+0x304>
        && (pInformation->USBwIndex == 0))
 8002bde:	88a3      	ldrh	r3, [r4, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f af58 	bne.w	8002a96 <Setup0_Process+0x62>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <Setup0_Process+0x2b4>)
 8002be8:	e7a1      	b.n	8002b2e <Setup0_Process+0xfa>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8002bea:	280a      	cmp	r0, #10
 8002bec:	f47f af53 	bne.w	8002a96 <Setup0_Process+0x62>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002bf0:	7823      	ldrb	r3, [r4, #0]
 8002bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f47f af4d 	bne.w	8002a96 <Setup0_Process+0x62>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8002bfc:	7aa3      	ldrb	r3, [r4, #10]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f43f af49 	beq.w	8002a96 <Setup0_Process+0x62>
 8002c04:	8861      	ldrh	r1, [r4, #2]
 8002c06:	2900      	cmp	r1, #0
 8002c08:	f47f af45 	bne.w	8002a96 <Setup0_Process+0x62>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002c0c:	6863      	ldr	r3, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002c0e:	4d2f      	ldr	r5, [pc, #188]	; (8002ccc <Setup0_Process+0x298>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002c10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	f47f af3e 	bne.w	8002a98 <Setup0_Process+0x64>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	7960      	ldrb	r0, [r4, #5]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	4798      	blx	r3
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f040 80c7 	bne.w	8002db8 <Setup0_Process+0x384>
 8002c2a:	6834      	ldr	r4, [r6, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <Setup0_Process+0x2b8>)
 8002c2e:	e77e      	b.n	8002b2e <Setup0_Process+0xfa>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8002c30:	88d9      	ldrh	r1, [r3, #6]
 8002c32:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8002c34:	9801      	ldr	r0, [sp, #4]
 8002c36:	4282      	cmp	r2, r0
 8002c38:	d817      	bhi.n	8002c6a <Setup0_Process+0x236>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8002c3a:	428a      	cmp	r2, r1
 8002c3c:	f080 8083 	bcs.w	8002d46 <Setup0_Process+0x312>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8002c40:	4922      	ldr	r1, [pc, #136]	; (8002ccc <Setup0_Process+0x298>)
 8002c42:	6809      	ldr	r1, [r1, #0]
 8002c44:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8002c48:	b281      	uxth	r1, r0
 8002c4a:	428a      	cmp	r2, r1
 8002c4c:	f080 8080 	bcs.w	8002d50 <Setup0_Process+0x31c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <Setup0_Process+0x2bc>)
 8002c52:	2000      	movs	r0, #0
 8002c54:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8002c56:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8002c58:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <Setup0_Process+0x2c0>)
 8002c5a:	4798      	blx	r3
 8002c5c:	e73c      	b.n	8002ad8 <Setup0_Process+0xa4>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8002c5e:	2d0b      	cmp	r5, #11
 8002c60:	f47f af4e 	bne.w	8002b00 <Setup0_Process+0xcc>
    {
      Result = Standard_SetInterface();
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <Setup0_Process+0x2c4>)
 8002c66:	4798      	blx	r3
 8002c68:	e787      	b.n	8002b7a <Setup0_Process+0x146>
 8002c6a:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <Setup0_Process+0x298>)
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	8219      	strh	r1, [r3, #16]
 8002c72:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8002c76:	e7ee      	b.n	8002c56 <Setup0_Process+0x222>
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
    {
      pInformation->ControlState = PAUSE;
 8002c78:	6833      	ldr	r3, [r6, #0]
 8002c7a:	2209      	movs	r2, #9
 8002c7c:	721a      	strb	r2, [r3, #8]
 8002c7e:	e72b      	b.n	8002ad8 <Setup0_Process+0xa4>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	e79b      	b.n	8002bbe <Setup0_Process+0x18a>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8002c86:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f6ff af43 	blt.w	8002b16 <Setup0_Process+0xe2>
 8002c90:	78a3      	ldrb	r3, [r4, #2]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f47f af3f 	bne.w	8002b16 <Setup0_Process+0xe2>
          || (pInformation->USBwIndex != 0)
 8002c98:	88a3      	ldrh	r3, [r4, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f47f af3b 	bne.w	8002b16 <Setup0_Process+0xe2>
          || (pInformation->Current_Configuration != 0))
 8002ca0:	7aa3      	ldrb	r3, [r4, #10]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f43f af6c 	beq.w	8002b80 <Setup0_Process+0x14c>
 8002ca8:	e735      	b.n	8002b16 <Setup0_Process+0xe2>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8002caa:	2d01      	cmp	r5, #1
 8002cac:	f43f af63 	beq.w	8002b76 <Setup0_Process+0x142>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8002cb0:	2d03      	cmp	r5, #3
 8002cb2:	f47f af25 	bne.w	8002b00 <Setup0_Process+0xcc>
    {
      Result = Standard_SetEndPointFeature();
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <Setup0_Process+0x2c8>)
 8002cb8:	4798      	blx	r3
 8002cba:	e75e      	b.n	8002b7a <Setup0_Process+0x146>
 8002cbc:	40005c50 	.word	0x40005c50
 8002cc0:	20001620 	.word	0x20001620
 8002cc4:	20003004 	.word	0x20003004
 8002cc8:	0800325d 	.word	0x0800325d
 8002ccc:	200015f8 	.word	0x200015f8
 8002cd0:	20001626 	.word	0x20001626
 8002cd4:	080029ed 	.word	0x080029ed
 8002cd8:	0800262d 	.word	0x0800262d
 8002cdc:	08002851 	.word	0x08002851
 8002ce0:	20003002 	.word	0x20003002
 8002ce4:	20001628 	.word	0x20001628
 8002ce8:	0800267d 	.word	0x0800267d
 8002cec:	08002655 	.word	0x08002655
 8002cf0:	200004b8 	.word	0x200004b8
 8002cf4:	08002709 	.word	0x08002709
 8002cf8:	08002801 	.word	0x08002801
 8002cfc:	08002939 	.word	0x08002939
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8002d00:	78e3      	ldrb	r3, [r4, #3]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	f47f aefc 	bne.w	8002b00 <Setup0_Process+0xcc>
          && (pInformation->USBwIndex == 0))
 8002d08:	88a3      	ldrh	r3, [r4, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f47f aef8 	bne.w	8002b00 <Setup0_Process+0xcc>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002d10:	7a63      	ldrb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002d12:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <Setup0_Process+0x38c>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002d14:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002d18:	6812      	ldr	r2, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002d1a:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002d1c:	69d3      	ldr	r3, [r2, #28]
 8002d1e:	4798      	blx	r3
 8002d20:	6834      	ldr	r4, [r6, #0]
 8002d22:	e72d      	b.n	8002b80 <Setup0_Process+0x14c>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <Setup0_Process+0x390>)
 8002d26:	4798      	blx	r3
 8002d28:	e727      	b.n	8002b7a <Setup0_Process+0x146>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8002d2a:	682b      	ldr	r3, [r5, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	e746      	b.n	8002bbe <Setup0_Process+0x18a>
 8002d30:	6834      	ldr	r4, [r6, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8002d32:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002d34:	7223      	strb	r3, [r4, #8]
 8002d36:	e6f0      	b.n	8002b1a <Setup0_Process+0xe6>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002d38:	2801      	cmp	r0, #1
 8002d3a:	d030      	beq.n	8002d9e <Setup0_Process+0x36a>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002d3c:	2802      	cmp	r0, #2
 8002d3e:	d012      	beq.n	8002d66 <Setup0_Process+0x332>
 8002d40:	4608      	mov	r0, r1
 8002d42:	4d21      	ldr	r5, [pc, #132]	; (8002dc8 <Setup0_Process+0x394>)
 8002d44:	e6a8      	b.n	8002a98 <Setup0_Process+0x64>
 8002d46:	4a20      	ldr	r2, [pc, #128]	; (8002dc8 <Setup0_Process+0x394>)
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8002d4e:	e782      	b.n	8002c56 <Setup0_Process+0x222>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8002d50:	fb92 f4f0 	sdiv	r4, r2, r0
 8002d54:	fb00 2214 	mls	r2, r0, r4, r2
 8002d58:	2a00      	cmp	r2, #0
 8002d5a:	f47f af7c 	bne.w	8002c56 <Setup0_Process+0x222>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8002d5e:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <Setup0_Process+0x398>)
 8002d60:	2001      	movs	r0, #1
 8002d62:	7010      	strb	r0, [r2, #0]
 8002d64:	e777      	b.n	8002c56 <Setup0_Process+0x222>
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8002d66:	7960      	ldrb	r0, [r4, #5]
 8002d68:	f000 020f 	and.w	r2, r0, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002d6c:	0093      	lsls	r3, r2, #2
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8002d6e:	0601      	lsls	r1, r0, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002d74:	4916      	ldr	r1, [pc, #88]	; (8002dd0 <Setup0_Process+0x39c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002d76:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002d7a:	681b      	ldr	r3, [r3, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002d7c:	7809      	ldrb	r1, [r1, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002d7e:	bf4c      	ite	mi
 8002d80:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8002d84:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002d88:	428a      	cmp	r2, r1
 8002d8a:	d206      	bcs.n	8002d9a <Setup0_Process+0x366>
 8002d8c:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 8002d90:	d103      	bne.n	8002d9a <Setup0_Process+0x366>
          && (Status != 0))
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f47f af27 	bne.w	8002be6 <Setup0_Process+0x1b2>
 8002d98:	e67d      	b.n	8002a96 <Setup0_Process+0x62>
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	e67b      	b.n	8002a96 <Setup0_Process+0x62>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8002d9e:	4d0a      	ldr	r5, [pc, #40]	; (8002dc8 <Setup0_Process+0x394>)
 8002da0:	7960      	ldrb	r0, [r4, #5]
 8002da2:	682b      	ldr	r3, [r5, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	4798      	blx	r3
 8002da8:	b930      	cbnz	r0, 8002db8 <Setup0_Process+0x384>
          && (pInformation->Current_Configuration != 0))
 8002daa:	6834      	ldr	r4, [r6, #0]
 8002dac:	7aa3      	ldrb	r3, [r4, #10]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f47f af19 	bne.w	8002be6 <Setup0_Process+0x1b2>
 8002db4:	7860      	ldrb	r0, [r4, #1]
 8002db6:	e66f      	b.n	8002a98 <Setup0_Process+0x64>
 8002db8:	6833      	ldr	r3, [r6, #0]
 8002dba:	7858      	ldrb	r0, [r3, #1]
 8002dbc:	e66c      	b.n	8002a98 <Setup0_Process+0x64>
 8002dbe:	bf00      	nop
 8002dc0:	2000161c 	.word	0x2000161c
 8002dc4:	080027c5 	.word	0x080027c5
 8002dc8:	200015f8 	.word	0x200015f8
 8002dcc:	200004b8 	.word	0x200004b8
 8002dd0:	20000308 	.word	0x20000308

08002dd4 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8002dd6:	4d32      	ldr	r5, [pc, #200]	; (8002ea0 <Out0_Process+0xcc>)
 8002dd8:	682c      	ldr	r4, [r5, #0]
 8002dda:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d007      	beq.n	8002df0 <Out0_Process+0x1c>
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d005      	beq.n	8002df0 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d008      	beq.n	8002dfa <Out0_Process+0x26>
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d006      	beq.n	8002dfa <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8002dec:	2b07      	cmp	r3, #7
 8002dee:	d036      	beq.n	8002e5e <Out0_Process+0x8a>
 8002df0:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002df2:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <Out0_Process+0xd0>)
 8002df6:	4798      	blx	r3
 8002df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8002dfa:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8002dfc:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8002dfe:	b1b3      	cbz	r3, 8002e2e <Out0_Process+0x5a>
 8002e00:	b1b2      	cbz	r2, 8002e30 <Out0_Process+0x5c>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8002e02:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002e04:	4296      	cmp	r6, r2
 8002e06:	bf28      	it	cs
 8002e08:	4616      	movcs	r6, r2
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8002e0e:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8002e10:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8002e12:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 8002e14:	4433      	add	r3, r6
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002e16:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8002e18:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8002e1a:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <Out0_Process+0xd4>)
 8002e20:	4798      	blx	r3
 8002e22:	4632      	mov	r2, r6
 8002e24:	4601      	mov	r1, r0
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <Out0_Process+0xd8>)
 8002e28:	4638      	mov	r0, r7
 8002e2a:	4798      	blx	r3
 8002e2c:	8a22      	ldrh	r2, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8002e2e:	b9ea      	cbnz	r2, 8002e6c <Out0_Process+0x98>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002e30:	8aa3      	ldrh	r3, [r4, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d029      	beq.n	8002e8a <Out0_Process+0xb6>
 8002e36:	491e      	ldr	r1, [pc, #120]	; (8002eb0 <Out0_Process+0xdc>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002e38:	682c      	ldr	r4, [r5, #0]
 8002e3a:	2206      	movs	r2, #6
      USB_StatusIn();
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <Out0_Process+0xe0>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002e3e:	7222      	strb	r2, [r4, #8]
      USB_StatusIn();
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <Out0_Process+0xe4>)
 8002e44:	b292      	uxth	r2, r2
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	805a      	strh	r2, [r3, #2]
 8002e50:	7a23      	ldrb	r3, [r4, #8]
 8002e52:	2230      	movs	r2, #48	; 0x30
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002e54:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <Out0_Process+0xd0>)
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8002e58:	800a      	strh	r2, [r1, #0]
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8002e5a:	4798      	blx	r3
 8002e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <Out0_Process+0xe8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4798      	blx	r3
 8002e66:	682c      	ldr	r4, [r5, #0]
 8002e68:	2308      	movs	r3, #8
 8002e6a:	e7c2      	b.n	8002df2 <Out0_Process+0x1e>

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <Out0_Process+0xec>)
    SetEPTxCount(ENDP0, 0);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	4601      	mov	r1, r0
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <Out0_Process+0xf0>)

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002e74:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8002e78:	8016      	strh	r6, [r2, #0]
    SetEPTxCount(ENDP0, 0);
 8002e7a:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002e7c:	8a23      	ldrh	r3, [r4, #16]
 8002e7e:	8aa2      	ldrh	r2, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002e80:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <Out0_Process+0xdc>)
 8002e82:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002e84:	429a      	cmp	r2, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002e86:	8008      	strh	r0, [r1, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002e88:	d803      	bhi.n	8002e92 <Out0_Process+0xbe>
  {
    pInformation->ControlState = OUT_DATA;
 8002e8a:	682c      	ldr	r4, [r5, #0]
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	7223      	strb	r3, [r4, #8]
 8002e90:	e7af      	b.n	8002df2 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0d0      	beq.n	8002e38 <Out0_Process+0x64>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8002e96:	682c      	ldr	r4, [r5, #0]
 8002e98:	2305      	movs	r3, #5
 8002e9a:	7223      	strb	r3, [r4, #8]
 8002e9c:	e7a9      	b.n	8002df2 <Out0_Process+0x1e>
 8002e9e:	bf00      	nop
 8002ea0:	20001620 	.word	0x20001620
 8002ea4:	080029ed 	.word	0x080029ed
 8002ea8:	080031bd 	.word	0x080031bd
 8002eac:	08002ff1 	.word	0x08002ff1
 8002eb0:	20001628 	.word	0x20001628
 8002eb4:	40005c50 	.word	0x40005c50
 8002eb8:	20003002 	.word	0x20003002
 8002ebc:	200015f8 	.word	0x200015f8
 8002ec0:	20001626 	.word	0x20001626
 8002ec4:	080031dd 	.word	0x080031dd

08002ec8 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8002ec8:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <SetDeviceAddress+0x34>)
 8002ecc:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002ece:	b17e      	cbz	r6, 8002ef0 <SetDeviceAddress+0x28>
 8002ed0:	4c0b      	ldr	r4, [pc, #44]	; (8002f00 <SetDeviceAddress+0x38>)
 8002ed2:	2200      	movs	r2, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002ed4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002ed8:	6825      	ldr	r5, [r4, #0]
 8002eda:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8002ede:	402b      	ands	r3, r5
 8002ee0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002ee4:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002ee6:	430b      	orrs	r3, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002ee8:	4296      	cmp	r6, r2
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002eea:	f844 3b04 	str.w	r3, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002eee:	d1f1      	bne.n	8002ed4 <SetDeviceAddress+0xc>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <SetDeviceAddress+0x3c>)
 8002ef2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002ef6:	6018      	str	r0, [r3, #0]
}
 8002ef8:	bc70      	pop	{r4, r5, r6}
 8002efa:	4770      	bx	lr
 8002efc:	20000308 	.word	0x20000308
 8002f00:	40005c00 	.word	0x40005c00
 8002f04:	40005c4c 	.word	0x40005c4c

08002f08 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8002f08:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8002f0a:	4c17      	ldr	r4, [pc, #92]	; (8002f68 <In0_Process+0x60>)
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8002f10:	2a02      	cmp	r2, #2
 8002f12:	d015      	beq.n	8002f40 <In0_Process+0x38>
 8002f14:	2a04      	cmp	r2, #4
 8002f16:	d013      	beq.n	8002f40 <In0_Process+0x38>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8002f18:	2a06      	cmp	r2, #6
 8002f1a:	d004      	beq.n	8002f26 <In0_Process+0x1e>
 8002f1c:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002f1e:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <In0_Process+0x64>)
 8002f22:	4798      	blx	r3
}
 8002f24:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8002f26:	785a      	ldrb	r2, [r3, #1]
 8002f28:	2a05      	cmp	r2, #5
 8002f2a:	d011      	beq.n	8002f50 <In0_Process+0x48>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <In0_Process+0x68>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4798      	blx	r3
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002f38:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <In0_Process+0x64>)
 8002f3c:	4798      	blx	r3
}
 8002f3e:	bd10      	pop	{r4, pc}
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <In0_Process+0x6c>)
 8002f42:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	7a1a      	ldrb	r2, [r3, #8]
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002f48:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <In0_Process+0x64>)
 8002f4c:	4798      	blx	r3
}
 8002f4e:	bd10      	pop	{r4, pc}
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8002f50:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8002f52:	0652      	lsls	r2, r2, #25
 8002f54:	d1ea      	bne.n	8002f2c <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8002f56:	78d8      	ldrb	r0, [r3, #3]
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <In0_Process+0x70>)
 8002f5a:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <In0_Process+0x74>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4798      	blx	r3
 8002f64:	e7e2      	b.n	8002f2c <In0_Process+0x24>
 8002f66:	bf00      	nop
 8002f68:	20001620 	.word	0x20001620
 8002f6c:	080029ed 	.word	0x080029ed
 8002f70:	200015f8 	.word	0x200015f8
 8002f74:	08002709 	.word	0x08002709
 8002f78:	08002ec9 	.word	0x08002ec9
 8002f7c:	2000161c 	.word	0x2000161c

08002f80 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop

08002f84 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8002f84:	b470      	push	{r4, r5, r6}
  pInformation = &Device_Info;
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <USB_Init+0x20>)
 8002f88:	4e07      	ldr	r6, [pc, #28]	; (8002fa8 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002f8a:	4c08      	ldr	r4, [pc, #32]	; (8002fac <USB_Init+0x28>)
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <USB_Init+0x2c>)
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 8002f8e:	2502      	movs	r5, #2
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8002f90:	4908      	ldr	r1, [pc, #32]	; (8002fb4 <USB_Init+0x30>)
 8002f92:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <USB_Init+0x34>)
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 8002f94:	7215      	strb	r5, [r2, #8]
  pProperty = &Device_Property;
 8002f96:	6023      	str	r3, [r4, #0]
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8002f98:	6032      	str	r2, [r6, #0]
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
  /* Initialize devices one by one */
  pProperty->Init();
 8002f9a:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8002f9c:	6008      	str	r0, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
}
 8002f9e:	bc70      	pop	{r4, r5, r6}
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
  /* Initialize devices one by one */
  pProperty->Init();
 8002fa0:	4718      	bx	r3
 8002fa2:	bf00      	nop
 8002fa4:	20001600 	.word	0x20001600
 8002fa8:	20001620 	.word	0x20001620
 8002fac:	200015f8 	.word	0x200015f8
 8002fb0:	20000284 	.word	0x20000284
 8002fb4:	2000161c 	.word	0x2000161c
 8002fb8:	200002b4 	.word	0x200002b4

08002fbc <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002fbc:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002fc0:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002fc2:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 8002fc6:	1052      	asrs	r2, r2, #1
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002fc8:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 8002fcc:	d00f      	beq.n	8002fee <UserToPMABufferCopy+0x32>
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002fce:	b430      	push	{r4, r5}
 8002fd0:	3002      	adds	r0, #2
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002fd2:	2300      	movs	r3, #0
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002fd4:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002fd8:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8002fdc:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002fde:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8002fe2:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8002fe6:	3301      	adds	r3, #1
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1f3      	bne.n	8002fd4 <UserToPMABufferCopy+0x18>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002fec:	bc30      	pop	{r4, r5}
 8002fee:	4770      	bx	lr

08002ff0 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002ff0:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002ff4:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002ff6:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 8002ffa:	1052      	asrs	r2, r2, #1
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002ffc:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 8003000:	d005      	beq.n	800300e <PMAToUserBufferCopy+0x1e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003002:	f851 3b04 	ldr.w	r3, [r1], #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003006:	3a01      	subs	r2, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003008:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800300c:	d1f9      	bne.n	8003002 <PMAToUserBufferCopy+0x12>
 800300e:	4770      	bx	lr

08003010 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8003010:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003014:	4a01      	ldr	r2, [pc, #4]	; (800301c <SetBTABLE+0xc>)
 8003016:	4003      	ands	r3, r0
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4770      	bx	lr
 800301c:	40005c50 	.word	0x40005c50

08003020 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8003020:	0080      	lsls	r0, r0, #2
 8003022:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003026:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800302a:	6803      	ldr	r3, [r0, #0]
 800302c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003034:	4319      	orrs	r1, r3
 8003036:	b289      	uxth	r1, r1
 8003038:	6001      	str	r1, [r0, #0]
 800303a:	4770      	bx	lr

0800303c <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800303c:	0080      	lsls	r0, r0, #2
 800303e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003042:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8003046:	6803      	ldr	r3, [r0, #0]
 8003048:	06ca      	lsls	r2, r1, #27
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003052:	b29b      	uxth	r3, r3
 8003054:	bf48      	it	mi
 8003056:	f083 0310 	eormi.w	r3, r3, #16
 800305a:	068a      	lsls	r2, r1, #26
 800305c:	bf48      	it	mi
 800305e:	f083 0320 	eormi.w	r3, r3, #32
 8003062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306a:	6003      	str	r3, [r0, #0]
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop

08003070 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8003070:	0080      	lsls	r0, r0, #2
 8003072:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003076:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800307a:	6803      	ldr	r3, [r0, #0]
 800307c:	04ca      	lsls	r2, r1, #19
 800307e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	b29b      	uxth	r3, r3
 8003088:	bf48      	it	mi
 800308a:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800308e:	048a      	lsls	r2, r1, #18
 8003090:	bf48      	it	mi
 8003092:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8003096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800309e:	6003      	str	r3, [r0, #0]
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 80030a4:	0080      	lsls	r0, r0, #2
 80030a6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80030aa:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80030ae:	6803      	ldr	r3, [r0, #0]
 80030b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80030be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c6:	6003      	str	r3, [r0, #0]
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80030cc:	0080      	lsls	r0, r0, #2
 80030ce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80030d2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80030d6:	6803      	ldr	r3, [r0, #0]
 80030d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80030e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ee:	6003      	str	r3, [r0, #0]
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop

080030f4 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80030f4:	f640 620f 	movw	r2, #3599	; 0xe0f
 80030f8:	0080      	lsls	r0, r0, #2
 80030fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80030fe:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8003102:	6803      	ldr	r3, [r0, #0]
 8003104:	4013      	ands	r3, r2
 8003106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800310a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310e:	6003      	str	r3, [r0, #0]
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop

08003114 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8003114:	0080      	lsls	r0, r0, #2
 8003116:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800311a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800311e:	6803      	ldr	r3, [r0, #0]
 8003120:	045b      	lsls	r3, r3, #17
 8003122:	d508      	bpl.n	8003136 <ClearDTOG_RX+0x22>
 8003124:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003128:	6802      	ldr	r2, [r0, #0]
 800312a:	4013      	ands	r3, r2
 800312c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003134:	6003      	str	r3, [r0, #0]
 8003136:	4770      	bx	lr

08003138 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8003138:	0080      	lsls	r0, r0, #2
 800313a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800313e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8003142:	6803      	ldr	r3, [r0, #0]
 8003144:	065b      	lsls	r3, r3, #25
 8003146:	d508      	bpl.n	800315a <ClearDTOG_TX+0x22>
 8003148:	f640 730f 	movw	r3, #3855	; 0xf0f
 800314c:	6802      	ldr	r2, [r0, #0]
 800314e:	4013      	ands	r3, r2
 8003150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003158:	6003      	str	r3, [r0, #0]
 800315a:	4770      	bx	lr

0800315c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <SetEPTxAddr+0x1c>)
 800315e:	0849      	lsrs	r1, r1, #1
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0049      	lsls	r1, r1, #1
 8003164:	b29b      	uxth	r3, r3
 8003166:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800316a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800316e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8003172:	0040      	lsls	r0, r0, #1
 8003174:	6001      	str	r1, [r0, #0]
 8003176:	4770      	bx	lr
 8003178:	40005c50 	.word	0x40005c50

0800317c <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800317c:	4a05      	ldr	r2, [pc, #20]	; (8003194 <SetEPRxAddr+0x18>)
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <SetEPRxAddr+0x1c>)
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	0849      	lsrs	r1, r1, #1
 8003184:	b292      	uxth	r2, r2
 8003186:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800318a:	4403      	add	r3, r0
 800318c:	0049      	lsls	r1, r1, #1
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	6019      	str	r1, [r3, #0]
 8003192:	4770      	bx	lr
 8003194:	40005c50 	.word	0x40005c50
 8003198:	20003004 	.word	0x20003004

0800319c <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <GetEPTxAddr+0x1c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80031a6:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80031aa:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80031ae:	0040      	lsls	r0, r0, #1
 80031b0:	6800      	ldr	r0, [r0, #0]
}
 80031b2:	b280      	uxth	r0, r0
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40005c50 	.word	0x40005c50

080031bc <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80031bc:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <GetEPRxAddr+0x18>)
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <GetEPRxAddr+0x1c>)
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	b292      	uxth	r2, r2
 80031c4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80031c8:	4403      	add	r3, r0
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	6818      	ldr	r0, [r3, #0]
}
 80031ce:	b280      	uxth	r0, r0
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40005c50 	.word	0x40005c50
 80031d8:	20003004 	.word	0x20003004

080031dc <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80031dc:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <SetEPTxCount+0x14>)
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <SetEPTxCount+0x18>)
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	b292      	uxth	r2, r2
 80031e4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80031e8:	4403      	add	r3, r0
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	6019      	str	r1, [r3, #0]
 80031ee:	4770      	bx	lr
 80031f0:	40005c50 	.word	0x40005c50
 80031f4:	20003002 	.word	0x20003002

080031f8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80031f8:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <SetEPRxCount+0x3c>)
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <SetEPRxCount+0x40>)
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	293e      	cmp	r1, #62	; 0x3e
 8003200:	b292      	uxth	r2, r2
 8003202:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003206:	4403      	add	r3, r0
 8003208:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800320c:	d90a      	bls.n	8003224 <SetEPRxCount+0x2c>
 800320e:	094a      	lsrs	r2, r1, #5
 8003210:	06c8      	lsls	r0, r1, #27
 8003212:	bf04      	itt	eq
 8003214:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003218:	b292      	uxtheq	r2, r2
 800321a:	0292      	lsls	r2, r2, #10
 800321c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	4770      	bx	lr
 8003224:	084a      	lsrs	r2, r1, #1
 8003226:	07c9      	lsls	r1, r1, #31
 8003228:	bf48      	it	mi
 800322a:	3201      	addmi	r2, #1
 800322c:	0292      	lsls	r2, r2, #10
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40005c50 	.word	0x40005c50
 8003238:	20003006 	.word	0x20003006

0800323c <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800323c:	4a05      	ldr	r2, [pc, #20]	; (8003254 <GetEPRxCount+0x18>)
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <GetEPRxCount+0x1c>)
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	b292      	uxth	r2, r2
 8003244:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003248:	4403      	add	r3, r0
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	6818      	ldr	r0, [r3, #0]
}
 800324e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003252:	4770      	bx	lr
 8003254:	40005c50 	.word	0x40005c50
 8003258:	20003006 	.word	0x20003006

0800325c <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800325c:	b2c3      	uxtb	r3, r0
 800325e:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8003260:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8003268:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800326a:	4906      	ldr	r1, [pc, #24]	; (8003284 <USB_SIL_Init+0x1c>)
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800326c:	4c06      	ldr	r4, [pc, #24]	; (8003288 <USB_SIL_Init+0x20>)
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <USB_SIL_Init+0x24>)
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8003270:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 8003272:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8003276:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8003278:	800b      	strh	r3, [r1, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
  return 0;
}
 800327a:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800327e:	6013      	str	r3, [r2, #0]
  return 0;
}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20001624 	.word	0x20001624
 8003288:	40005c44 	.word	0x40005c44
 800328c:	40005c40 	.word	0x40005c40

08003290 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8003290:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8003292:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8003296:	4628      	mov	r0, r5
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <USB_SIL_Read+0x24>)
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800329a:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800329c:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <USB_SIL_Read+0x28>)
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80032a0:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80032a2:	4628      	mov	r0, r5
 80032a4:	4798      	blx	r3
 80032a6:	4622      	mov	r2, r4
 80032a8:	4601      	mov	r1, r0
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <USB_SIL_Read+0x2c>)
 80032ac:	4630      	mov	r0, r6
 80032ae:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 80032b0:	4620      	mov	r0, r4
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	0800323d 	.word	0x0800323d
 80032b8:	080031bd 	.word	0x080031bd
 80032bc:	08002ff1 	.word	0x08002ff1

080032c0 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80032c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint16_t wEPVal = 0;
 80032c4:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80032c6:	b085      	sub	sp, #20
 80032c8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003428 <CTR_LP+0x168>
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80032cc:	4f51      	ldr	r7, [pc, #324]	; (8003414 <CTR_LP+0x154>)
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80032ce:	4d52      	ldr	r5, [pc, #328]	; (8003418 <CTR_LP+0x158>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80032d0:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80032d4:	683b      	ldr	r3, [r7, #0]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80032d6:	4c51      	ldr	r4, [pc, #324]	; (800341c <CTR_LP+0x15c>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80032d8:	b29a      	uxth	r2, r3
 80032da:	f413 4f00 	tst.w	r3, #32768	; 0x8000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 80032de:	4e50      	ldr	r6, [pc, #320]	; (8003420 <CTR_LP+0x160>)
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80032e0:	4850      	ldr	r0, [pc, #320]	; (8003424 <CTR_LP+0x164>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80032e2:	f8a8 2000 	strh.w	r2, [r8]
 80032e6:	4950      	ldr	r1, [pc, #320]	; (8003428 <CTR_LP+0x168>)
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80032e8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003418 <CTR_LP+0x158>
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80032ec:	f000 808a 	beq.w	8003404 <CTR_LP+0x144>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80032f0:	880b      	ldrh	r3, [r1, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80032fc:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003300:	7003      	strb	r3, [r0, #0]
    if (EPindex == 0)
 8003302:	bb63      	cbnz	r3, 800335e <CTR_LP+0x9e>
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8003304:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	b292      	uxth	r2, r2
 800330c:	802a      	strh	r2, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800330e:	882a      	ldrh	r2, [r5, #0]
 8003310:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003314:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8003316:	882a      	ldrh	r2, [r5, #0]
 8003318:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800331c:	802a      	strh	r2, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800331e:	6822      	ldr	r2, [r4, #0]
 8003320:	4013      	ands	r3, r2
 8003322:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003326:	f083 0320 	eor.w	r3, r3, #32
 800332a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003332:	6023      	str	r3, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8003334:	880b      	ldrh	r3, [r1, #0]
 8003336:	06da      	lsls	r2, r3, #27
 8003338:	d53c      	bpl.n	80033b4 <CTR_LP+0xf4>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f8ad 300e 	strh.w	r3, [sp, #14]
        
        if ((wEPVal &EP_SETUP) != 0)
 8003342:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003346:	051b      	lsls	r3, r3, #20
 8003348:	d45f      	bmi.n	800340a <CTR_LP+0x14a>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800334a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800334e:	b21b      	sxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	dabf      	bge.n	80032d4 <CTR_LP+0x14>
        {
          _ClearEP_CTR_RX(ENDP0);
 8003354:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003358:	6821      	ldr	r1, [r4, #0]
          Out0_Process();
 800335a:	4a34      	ldr	r2, [pc, #208]	; (800342c <CTR_LP+0x16c>)
 800335c:	e02e      	b.n	80033bc <CTR_LP+0xfc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800335e:	6811      	ldr	r1, [r2, #0]
 8003360:	b289      	uxth	r1, r1
 8003362:	f8ad 100e 	strh.w	r1, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 8003366:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800336a:	b209      	sxth	r1, r1
 800336c:	2900      	cmp	r1, #0
 800336e:	db14      	blt.n	800339a <CTR_LP+0xda>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8003370:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	d5ad      	bpl.n	80032d4 <CTR_LP+0x14>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8003378:	f648 710f 	movw	r1, #36623	; 0x8f0f
 800337c:	7802      	ldrb	r2, [r0, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800337e:	482c      	ldr	r0, [pc, #176]	; (8003430 <CTR_LP+0x170>)
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8003380:	0093      	lsls	r3, r2, #2
 8003382:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003386:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800338a:	681c      	ldr	r4, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800338c:	3a01      	subs	r2, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800338e:	4021      	ands	r1, r4
 8003390:	6019      	str	r1, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8003392:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8003396:	4798      	blx	r3
 8003398:	e79c      	b.n	80032d4 <CTR_LP+0x14>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800339a:	f640 718f 	movw	r1, #3983	; 0xf8f
 800339e:	6816      	ldr	r6, [r2, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80033a0:	4c24      	ldr	r4, [pc, #144]	; (8003434 <CTR_LP+0x174>)
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80033a2:	4031      	ands	r1, r6

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80033a4:	3b01      	subs	r3, #1
 80033a6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80033aa:	6011      	str	r1, [r2, #0]
 80033ac:	9001      	str	r0, [sp, #4]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80033ae:	4798      	blx	r3
 80033b0:	9801      	ldr	r0, [sp, #4]
 80033b2:	e7dd      	b.n	8003370 <CTR_LP+0xb0>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80033b4:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80033b8:	6821      	ldr	r1, [r4, #0]
        In0_Process();
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <CTR_LP+0x178>)
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
 80033bc:	400b      	ands	r3, r1
 80033be:	6023      	str	r3, [r4, #0]
          Out0_Process();
 80033c0:	4790      	blx	r2
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80033c2:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80033c6:	6821      	ldr	r1, [r4, #0]
 80033c8:	f8b9 2000 	ldrh.w	r2, [r9]
 80033cc:	400b      	ands	r3, r1
 80033ce:	04d4      	lsls	r4, r2, #19
 80033d0:	f8b9 2000 	ldrh.w	r2, [r9]
 80033d4:	bf48      	it	mi
 80033d6:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 80033da:	0490      	lsls	r0, r2, #18
 80033dc:	8832      	ldrh	r2, [r6, #0]
 80033de:	bf48      	it	mi
 80033e0:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 80033e4:	06d1      	lsls	r1, r2, #27
 80033e6:	8832      	ldrh	r2, [r6, #0]
 80033e8:	bf48      	it	mi
 80033ea:	f083 0310 	eormi.w	r3, r3, #16
 80033ee:	0692      	lsls	r2, r2, #26
 80033f0:	bf48      	it	mi
 80033f2:	f083 0320 	eormi.w	r3, r3, #32
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <CTR_LP+0x15c>)
 8003400:	b29b      	uxth	r3, r3
 8003402:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8003404:	b005      	add	sp, #20
 8003406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800340a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800340e:	6821      	ldr	r1, [r4, #0]
          Setup0_Process();
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <CTR_LP+0x17c>)
 8003412:	e7d3      	b.n	80033bc <CTR_LP+0xfc>
 8003414:	40005c44 	.word	0x40005c44
 8003418:	20001626 	.word	0x20001626
 800341c:	40005c00 	.word	0x40005c00
 8003420:	20001628 	.word	0x20001628
 8003424:	200015fc 	.word	0x200015fc
 8003428:	20000dc8 	.word	0x20000dc8
 800342c:	08002dd5 	.word	0x08002dd5
 8003430:	20000244 	.word	0x20000244
 8003434:	20000260 	.word	0x20000260
 8003438:	08002f09 	.word	0x08002f09
 800343c:	08002a35 	.word	0x08002a35
 8003440:	00000a0a 	.word	0x00000a0a
 8003444:	2a2a2a2a 	.word	0x2a2a2a2a
 8003448:	2a2a2a2a 	.word	0x2a2a2a2a
 800344c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003450:	2a2a2a2a 	.word	0x2a2a2a2a
 8003454:	2a2a2a2a 	.word	0x2a2a2a2a
 8003458:	2a2a2a2a 	.word	0x2a2a2a2a
 800345c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003460:	2a2a2a2a 	.word	0x2a2a2a2a
 8003464:	2a2a2a2a 	.word	0x2a2a2a2a
 8003468:	2a2a2a2a 	.word	0x2a2a2a2a
 800346c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003470:	2a2a2a2a 	.word	0x2a2a2a2a
 8003474:	2a2a2a2a 	.word	0x2a2a2a2a
 8003478:	0a2a2a2a 	.word	0x0a2a2a2a
 800347c:	00000000 	.word	0x00000000
 8003480:	20202020 	.word	0x20202020
 8003484:	20202020 	.word	0x20202020
 8003488:	20202020 	.word	0x20202020
 800348c:	20202020 	.word	0x20202020
 8003490:	20202020 	.word	0x20202020
 8003494:	504d2020 	.word	0x504d2020
 8003498:	35303655 	.word	0x35303655
 800349c:	20202030 	.word	0x20202030
 80034a0:	20202020 	.word	0x20202020
 80034a4:	20202020 	.word	0x20202020
 80034a8:	20202020 	.word	0x20202020
 80034ac:	20202020 	.word	0x20202020
 80034b0:	20202020 	.word	0x20202020
 80034b4:	0a202020 	.word	0x0a202020
 80034b8:	00000000 	.word	0x00000000
 80034bc:	2e31202a 	.word	0x2e31202a
 80034c0:	44434c20 	.word	0x44434c20
 80034c4:	656c4320 	.word	0x656c4320
 80034c8:	20207261 	.word	0x20207261
 80034cc:	20202020 	.word	0x20202020
 80034d0:	20202020 	.word	0x20202020
 80034d4:	20202020 	.word	0x20202020
 80034d8:	20202020 	.word	0x20202020
 80034dc:	20202020 	.word	0x20202020
 80034e0:	20202020 	.word	0x20202020
 80034e4:	20202020 	.word	0x20202020
 80034e8:	20202020 	.word	0x20202020
 80034ec:	20202020 	.word	0x20202020
 80034f0:	0a2a2020 	.word	0x0a2a2020
 80034f4:	00000000 	.word	0x00000000
 80034f8:	2e32202a 	.word	0x2e32202a
 80034fc:	6f685320 	.word	0x6f685320
 8003500:	63412077 	.word	0x63412077
 8003504:	20202063 	.word	0x20202063
 8003508:	20202020 	.word	0x20202020
 800350c:	20202020 	.word	0x20202020
 8003510:	20202020 	.word	0x20202020
 8003514:	20202020 	.word	0x20202020
 8003518:	20202020 	.word	0x20202020
 800351c:	20202020 	.word	0x20202020
 8003520:	20202020 	.word	0x20202020
 8003524:	20202020 	.word	0x20202020
 8003528:	20202020 	.word	0x20202020
 800352c:	0a2a2020 	.word	0x0a2a2020
 8003530:	00000000 	.word	0x00000000
 8003534:	2e33202a 	.word	0x2e33202a
 8003538:	6f685320 	.word	0x6f685320
 800353c:	504d2077 	.word	0x504d2077
 8003540:	35303655 	.word	0x35303655
 8003544:	65522030 	.word	0x65522030
 8003548:	20207367 	.word	0x20207367
 800354c:	20202020 	.word	0x20202020
 8003550:	20202020 	.word	0x20202020
 8003554:	20202020 	.word	0x20202020
 8003558:	20202020 	.word	0x20202020
 800355c:	20202020 	.word	0x20202020
 8003560:	20202020 	.word	0x20202020
 8003564:	20202020 	.word	0x20202020
 8003568:	0a2a2020 	.word	0x0a2a2020
 800356c:	00000000 	.word	0x00000000
 8003570:	2e34202a 	.word	0x2e34202a
 8003574:	20202020 	.word	0x20202020
 8003578:	20202020 	.word	0x20202020
 800357c:	20202020 	.word	0x20202020
 8003580:	20202020 	.word	0x20202020
 8003584:	20202020 	.word	0x20202020
 8003588:	20202020 	.word	0x20202020
 800358c:	20202020 	.word	0x20202020
 8003590:	20202020 	.word	0x20202020
 8003594:	20202020 	.word	0x20202020
 8003598:	20202020 	.word	0x20202020
 800359c:	20202020 	.word	0x20202020
 80035a0:	20202020 	.word	0x20202020
 80035a4:	0a2a2020 	.word	0x0a2a2020
 80035a8:	00000000 	.word	0x00000000
 80035ac:	2e35202a 	.word	0x2e35202a
 80035b0:	20202020 	.word	0x20202020
 80035b4:	20202020 	.word	0x20202020
 80035b8:	20202020 	.word	0x20202020
 80035bc:	20202020 	.word	0x20202020
 80035c0:	20202020 	.word	0x20202020
 80035c4:	20202020 	.word	0x20202020
 80035c8:	20202020 	.word	0x20202020
 80035cc:	20202020 	.word	0x20202020
 80035d0:	20202020 	.word	0x20202020
 80035d4:	20202020 	.word	0x20202020
 80035d8:	20202020 	.word	0x20202020
 80035dc:	20202020 	.word	0x20202020
 80035e0:	0a2a2020 	.word	0x0a2a2020
 80035e4:	00000000 	.word	0x00000000
 80035e8:	2e36202a 	.word	0x2e36202a
 80035ec:	20202020 	.word	0x20202020
 80035f0:	20202020 	.word	0x20202020
 80035f4:	20202020 	.word	0x20202020
 80035f8:	20202020 	.word	0x20202020
 80035fc:	20202020 	.word	0x20202020
 8003600:	20202020 	.word	0x20202020
 8003604:	20202020 	.word	0x20202020
 8003608:	20202020 	.word	0x20202020
 800360c:	20202020 	.word	0x20202020
 8003610:	20202020 	.word	0x20202020
 8003614:	20202020 	.word	0x20202020
 8003618:	20202020 	.word	0x20202020
 800361c:	0a2a2020 	.word	0x0a2a2020
 8003620:	00000000 	.word	0x00000000
 8003624:	2e37202a 	.word	0x2e37202a
 8003628:	20202020 	.word	0x20202020
 800362c:	20202020 	.word	0x20202020
 8003630:	20202020 	.word	0x20202020
 8003634:	20202020 	.word	0x20202020
 8003638:	20202020 	.word	0x20202020
 800363c:	20202020 	.word	0x20202020
 8003640:	20202020 	.word	0x20202020
 8003644:	20202020 	.word	0x20202020
 8003648:	20202020 	.word	0x20202020
 800364c:	20202020 	.word	0x20202020
 8003650:	20202020 	.word	0x20202020
 8003654:	20202020 	.word	0x20202020
 8003658:	0a2a2020 	.word	0x0a2a2020
 800365c:	00000000 	.word	0x00000000
 8003660:	2e38202a 	.word	0x2e38202a
 8003664:	20202020 	.word	0x20202020
 8003668:	20202020 	.word	0x20202020
 800366c:	20202020 	.word	0x20202020
 8003670:	20202020 	.word	0x20202020
 8003674:	20202020 	.word	0x20202020
 8003678:	20202020 	.word	0x20202020
 800367c:	20202020 	.word	0x20202020
 8003680:	20202020 	.word	0x20202020
 8003684:	20202020 	.word	0x20202020
 8003688:	20202020 	.word	0x20202020
 800368c:	20202020 	.word	0x20202020
 8003690:	20202020 	.word	0x20202020
 8003694:	0a2a2020 	.word	0x0a2a2020
 8003698:	00000000 	.word	0x00000000
 800369c:	2e39202a 	.word	0x2e39202a
 80036a0:	20202020 	.word	0x20202020
 80036a4:	20202020 	.word	0x20202020
 80036a8:	20202020 	.word	0x20202020
 80036ac:	20202020 	.word	0x20202020
 80036b0:	20202020 	.word	0x20202020
 80036b4:	20202020 	.word	0x20202020
 80036b8:	20202020 	.word	0x20202020
 80036bc:	20202020 	.word	0x20202020
 80036c0:	20202020 	.word	0x20202020
 80036c4:	20202020 	.word	0x20202020
 80036c8:	20202020 	.word	0x20202020
 80036cc:	20202020 	.word	0x20202020
 80036d0:	0a2a2020 	.word	0x0a2a2020
 80036d4:	00000000 	.word	0x00000000
 80036d8:	2e6d202a 	.word	0x2e6d202a
 80036dc:	654d2020 	.word	0x654d2020
 80036e0:	2020756e 	.word	0x2020756e
 80036e4:	20202020 	.word	0x20202020
 80036e8:	20202020 	.word	0x20202020
 80036ec:	20202020 	.word	0x20202020
 80036f0:	20202020 	.word	0x20202020
 80036f4:	20202020 	.word	0x20202020
 80036f8:	20202020 	.word	0x20202020
 80036fc:	20202020 	.word	0x20202020
 8003700:	20202020 	.word	0x20202020
 8003704:	20202020 	.word	0x20202020
 8003708:	20202020 	.word	0x20202020
 800370c:	0a2a2020 	.word	0x0a2a2020
 8003710:	00000000 	.word	0x00000000
 8003714:	00203e3e 	.word	0x00203e3e
 8003718:	72616d53 	.word	0x72616d53
 800371c:	626f5274 	.word	0x626f5274
 8003720:	4220746f 	.word	0x4220746f
 8003724:	00000044 	.word	0x00000044
 8003728:	2044434c 	.word	0x2044434c
 800372c:	61656c43 	.word	0x61656c43
 8003730:	000a2072 	.word	0x000a2072
 8003734:	25205841 	.word	0x25205841
 8003738:	00002064 	.word	0x00002064
 800373c:	25205941 	.word	0x25205941
 8003740:	00002064 	.word	0x00002064
 8003744:	25205a41 	.word	0x25205a41
 8003748:	00002064 	.word	0x00002064
 800374c:	64252054 	.word	0x64252054
 8003750:	00000a20 	.word	0x00000a20
 8003754:	7830200a 	.word	0x7830200a
 8003758:	78323025 	.word	0x78323025
 800375c:	0000203a 	.word	0x0000203a
 8003760:	78323025 	.word	0x78323025
 8003764:	00000020 	.word	0x00000020
 8003768:	276e6143 	.word	0x276e6143
 800376c:	69662074 	.word	0x69662074
 8003770:	4d20646e 	.word	0x4d20646e
 8003774:	30365550 	.word	0x30365550
 8003778:	0a203035 	.word	0x0a203035
 800377c:	00000000 	.word	0x00000000
 8003780:	20727245 	.word	0x20727245
 8003784:	74697277 	.word	0x74697277
 8003788:	504d2065 	.word	0x504d2065
 800378c:	35303655 	.word	0x35303655
 8003790:	41525f30 	.word	0x41525f30
 8003794:	5257505f 	.word	0x5257505f
 8003798:	4d474d5f 	.word	0x4d474d5f
 800379c:	20315f54 	.word	0x20315f54
 80037a0:	6425203a 	.word	0x6425203a
 80037a4:	0000000a 	.word	0x0000000a

080037a8 <Virtual_Com_Port_StringVendor>:
 80037a8:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 80037b8:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 80037c8:	00630069 00000073                       i.c.s...

080037d0 <Virtual_Com_Port_DeviceDescriptor>:
 80037d0:	02000112 40000002 57400483 02010200     .......@..@W....
 80037e0:	00000103                                ....

080037e4 <Virtual_Com_Port_StringLangID>:
 80037e4:	04090304                                ....

080037e8 <Virtual_Com_Port_StringProduct>:
 80037e8:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 80037f8:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8003808:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8003818:	00000020                                 ...

0800381c <Virtual_Com_Port_ConfigDescriptor>:
 800381c:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800382c:	24050001 05011000 01000124 02022404     ...$....$....$..
 800383c:	00062405 82050701 ff000803 00010409     .$..............
 800384c:	00000a02 03050700 00004002 02810507     .........@......
 800385c:	00000040                                @...

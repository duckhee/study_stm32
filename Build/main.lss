
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a90  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  20000000  08001a90  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  20000014  08001aa4  00010014  2**2
                  ALLOC
  3 ._usrstack    00000100  20000020  08001ab0  00010014  2**0
                  ALLOC
  4 .debug_info   0000338f  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001081  00000000  00000000  000133a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00001f30  00000000  00000000  00014424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000002d8  00000000  00000000  00016354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000380  00000000  00000000  0001662c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000146c  00000000  00000000  000169ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dd0  00000000  00000000  00017e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000070  00000000  00000000  00018be8  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  00018c58  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000067c  00000000  00000000  00018c8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 0d 01 00 08 00 00 00 00 00 00 00 00     .P. ............
 8000010:	09 01 00 08 09 01 00 08 09 01 00 08 00 00 00 00     ................
	...
 800002c:	09 01 00 08 09 01 00 08 00 00 00 00 09 01 00 08     ................
 800003c:	7d 10 00 08 09 01 00 08 09 01 00 08 09 01 00 08     }...............
 800004c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800005c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800006c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800007c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800008c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 800009c:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000ac:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000bc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000cc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
 80000dc:	09 01 00 08 09 01 00 08 09 01 00 08 09 01 00 08     ................
	...

08000108 <Default_Handler>:
void Default_Handler(void)
{
	/* Go into an infinite loop. */
	while (1)
	{
	}
 8000108:	e7fe      	b.n	8000108 <Default_Handler>
 800010a:	bf00      	nop

0800010c <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 800010c:	4668      	mov	r0, sp
 800010e:	f020 0107 	bic.w	r1, r0, #7
 8000112:	468d      	mov	sp, r1
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000114:	4a44      	ldr	r2, [pc, #272]	; (8000228 <zero_loop+0xe4>)
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 8000116:	e92d 41f9 	stmdb	sp!, {r0, r3, r4, r5, r6, r7, r8, lr}
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800011a:	4b44      	ldr	r3, [pc, #272]	; (800022c <zero_loop+0xe8>)
 800011c:	429a      	cmp	r2, r3
 800011e:	d20d      	bcs.n	800013c <Reset_Handler+0x30>
 8000120:	43d0      	mvns	r0, r2
 8000122:	4943      	ldr	r1, [pc, #268]	; (8000230 <zero_loop+0xec>)
 8000124:	4418      	add	r0, r3
 8000126:	460b      	mov	r3, r1
 8000128:	f020 0003 	bic.w	r0, r0, #3
 800012c:	3004      	adds	r0, #4
 800012e:	4408      	add	r0, r1
	{
		*(pulDest++) = *(pulSrc++);
 8000130:	f853 1b04 	ldr.w	r1, [r3], #4
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000134:	4283      	cmp	r3, r0
	{
		*(pulDest++) = *(pulSrc++);
 8000136:	f842 1b04 	str.w	r1, [r2], #4
		unsigned long *pulSrc, *pulDest;	
	
		// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800013a:	d1f9      	bne.n	8000130 <Reset_Handler+0x24>
	{
		*(pulDest++) = *(pulSrc++);
	}
		__asm("  ldr     r0, =_sbss\n"
 800013c:	4848      	ldr	r0, [pc, #288]	; (8000260 <zero_loop+0x11c>)
 800013e:	4949      	ldr	r1, [pc, #292]	; (8000264 <zero_loop+0x120>)
 8000140:	f04f 0200 	mov.w	r2, #0

08000144 <zero_loop>:
 8000144:	4288      	cmp	r0, r1
 8000146:	bfb8      	it	lt
 8000148:	f840 2b04 	strlt.w	r2, [r0], #4
 800014c:	dbfa      	blt.n	8000144 <zero_loop>
        	
	
	*/
	
    //HSI On 
    *(volatile unsigned long *)0x40021000 |= 0x1 << 0; 
 800014e:	4a39      	ldr	r2, [pc, #228]	; (8000234 <zero_loop+0xf0>)
 8000150:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000154:	6810      	ldr	r0, [r2, #0]
    
    //check HSI Or HSE READY
    do
    {
        //HSI check
        HSIStatus = (*(volatile unsigned long *)0x40021000 & 0x1 << 1); //HSI RDY check bit
 8000156:	4611      	mov	r1, r2
        	
	
	*/
	
    //HSI On 
    *(volatile unsigned long *)0x40021000 |= 0x1 << 0; 
 8000158:	f040 0001 	orr.w	r0, r0, #1
 800015c:	6010      	str	r0, [r2, #0]
 800015e:	e001      	b.n	8000164 <zero_loop+0x20>
        //HSI check
        HSIStatus = (*(volatile unsigned long *)0x40021000 & 0x1 << 1); //HSI RDY check bit
        //HSE check
        //HSEStatus = (*(volatile unsigned long *)0x40021000 & 0x1 << 17); //HSE RDY check bit
        StartUpCounter++;
    }while((HSIStatus == 0) && (StartUpCounter != 0x0500));
 8000160:	3b01      	subs	r3, #1
 8000162:	d002      	beq.n	800016a <zero_loop+0x26>
    
    //check HSI Or HSE READY
    do
    {
        //HSI check
        HSIStatus = (*(volatile unsigned long *)0x40021000 & 0x1 << 1); //HSI RDY check bit
 8000164:	680a      	ldr	r2, [r1, #0]
        //HSE check
        //HSEStatus = (*(volatile unsigned long *)0x40021000 & 0x1 << 17); //HSE RDY check bit
        StartUpCounter++;
    }while((HSIStatus == 0) && (StartUpCounter != 0x0500));
 8000166:	0792      	lsls	r2, r2, #30
 8000168:	d5fa      	bpl.n	8000160 <zero_loop+0x1c>
    // reset setting PLL 
    *(volatile unsigned long *)0x40021004 &= ~(0xF << 18 | 0x1 << 17 | 0x1 << 16); //18 bit set 0, 17 bit set 0, 16 bit set 0
    *(volatile unsigned long *)0x40021004 |= (0x7 << 18); //0111: PLL input clock x 9 4MHz ?? HSI = 8MHz
    // *(volatile unsigned long *)0x40021004 |= (0x7 << 18 | 0x1 << 16); //0111 : PLL input clock x 9 HSE Set 8MHz ??
    // *(volatile unsigned long *)0x40021004 |= (0x4 << 18 | 0x1 << 16); //0x100 : PLL input clock x 6 HSE set 12MHz
    *(volatile unsigned long *) 0x40021000 |= 0x01 << 24/*0x1000000*/;                       //PLLON
 800016a:	4832      	ldr	r0, [pc, #200]	; (8000234 <zero_loop+0xf0>)
        //HSEStatus = (*(volatile unsigned long *)0x40021000 & 0x1 << 17); //HSE RDY check bit
        StartUpCounter++;
    }while((HSIStatus == 0) && (StartUpCounter != 0x0500));
    
    ///////////////// FLASH Memory Latency move code RAM sections ////////////////////////////////////
	*(volatile unsigned long *)0x40022000 |= (1<<4);     //prefetch buffer enable
 800016c:	4b32      	ldr	r3, [pc, #200]	; (8000238 <zero_loop+0xf4>)
    *(volatile unsigned long *)0x40021004 &= ~(0xF << 18 | 0x1 << 17 | 0x1 << 16); //18 bit set 0, 17 bit set 0, 16 bit set 0
    *(volatile unsigned long *)0x40021004 |= (0x7 << 18); //0111: PLL input clock x 9 4MHz ?? HSI = 8MHz
    // *(volatile unsigned long *)0x40021004 |= (0x7 << 18 | 0x1 << 16); //0111 : PLL input clock x 9 HSE Set 8MHz ??
    // *(volatile unsigned long *)0x40021004 |= (0x4 << 18 | 0x1 << 16); //0x100 : PLL input clock x 6 HSE set 12MHz
    *(volatile unsigned long *) 0x40021000 |= 0x01 << 24/*0x1000000*/;                       //PLLON
    while( ((*(volatile unsigned long *) 0x40021000) & 0x01 << 25/*0x2000000*/) == 0);       //PLLRDY
 800016e:	4602      	mov	r2, r0
        //HSEStatus = (*(volatile unsigned long *)0x40021000 & 0x1 << 17); //HSE RDY check bit
        StartUpCounter++;
    }while((HSIStatus == 0) && (StartUpCounter != 0x0500));
    
    ///////////////// FLASH Memory Latency move code RAM sections ////////////////////////////////////
	*(volatile unsigned long *)0x40022000 |= (1<<4);     //prefetch buffer enable
 8000170:	681c      	ldr	r4, [r3, #0]
    *(volatile unsigned long *)0x40022000 &= ~(0x7); //bit 2, 1, 0 clear 0, 0, 0
    *(volatile unsigned long *)0x40022000 |= 0x2; //bit 2, 1, 0 = 0, 1, 0
    //////////////////////////////////////////////////////////////////////////////////////////////////
    
    // reset setting PLL 
    *(volatile unsigned long *)0x40021004 &= ~(0xF << 18 | 0x1 << 17 | 0x1 << 16); //18 bit set 0, 17 bit set 0, 16 bit set 0
 8000172:	4932      	ldr	r1, [pc, #200]	; (800023c <zero_loop+0xf8>)
        //HSEStatus = (*(volatile unsigned long *)0x40021000 & 0x1 << 17); //HSE RDY check bit
        StartUpCounter++;
    }while((HSIStatus == 0) && (StartUpCounter != 0x0500));
    
    ///////////////// FLASH Memory Latency move code RAM sections ////////////////////////////////////
	*(volatile unsigned long *)0x40022000 |= (1<<4);     //prefetch buffer enable
 8000174:	f044 0410 	orr.w	r4, r4, #16
 8000178:	601c      	str	r4, [r3, #0]
    *(volatile unsigned long *)0x40022000 |= 0x10; //bit PRETBE = 1 Set
 800017a:	681c      	ldr	r4, [r3, #0]
 800017c:	f044 0410 	orr.w	r4, r4, #16
 8000180:	601c      	str	r4, [r3, #0]
    *(volatile unsigned long *)0x40022000 &= ~(0x7); //bit 2, 1, 0 clear 0, 0, 0
 8000182:	681c      	ldr	r4, [r3, #0]
 8000184:	f024 0407 	bic.w	r4, r4, #7
 8000188:	601c      	str	r4, [r3, #0]
    *(volatile unsigned long *)0x40022000 |= 0x2; //bit 2, 1, 0 = 0, 1, 0
 800018a:	681c      	ldr	r4, [r3, #0]
 800018c:	f044 0402 	orr.w	r4, r4, #2
 8000190:	601c      	str	r4, [r3, #0]
    //////////////////////////////////////////////////////////////////////////////////////////////////
    
    // reset setting PLL 
    *(volatile unsigned long *)0x40021004 &= ~(0xF << 18 | 0x1 << 17 | 0x1 << 16); //18 bit set 0, 17 bit set 0, 16 bit set 0
 8000192:	680b      	ldr	r3, [r1, #0]
 8000194:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000198:	600b      	str	r3, [r1, #0]
    *(volatile unsigned long *)0x40021004 |= (0x7 << 18); //0111: PLL input clock x 9 4MHz ?? HSI = 8MHz
 800019a:	680b      	ldr	r3, [r1, #0]
 800019c:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80001a0:	600b      	str	r3, [r1, #0]
    // *(volatile unsigned long *)0x40021004 |= (0x7 << 18 | 0x1 << 16); //0111 : PLL input clock x 9 HSE Set 8MHz ??
    // *(volatile unsigned long *)0x40021004 |= (0x4 << 18 | 0x1 << 16); //0x100 : PLL input clock x 6 HSE set 12MHz
    *(volatile unsigned long *) 0x40021000 |= 0x01 << 24/*0x1000000*/;                       //PLLON
 80001a2:	6803      	ldr	r3, [r0, #0]
 80001a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001a8:	6003      	str	r3, [r0, #0]
    while( ((*(volatile unsigned long *) 0x40021000) & 0x01 << 25/*0x2000000*/) == 0);       //PLLRDY
 80001aa:	6813      	ldr	r3, [r2, #0]
 80001ac:	019b      	lsls	r3, r3, #6
 80001ae:	d5fc      	bpl.n	80001aa <zero_loop+0x66>
        00: HSI selected as system clock(PLL)
        01: HSE selected as system clock(PLL)
        10: PLL selected as system clock <------------- use this
        11: not allowed (not use system clock PLL)
    */
    *(volatile unsigned long *)0x40021004 &= ~(0x3); //reset PLL 
 80001b0:	4b22      	ldr	r3, [pc, #136]	; (800023c <zero_loop+0xf8>)
	//*(volatile unsigned long *)0x40021004 |= (0x4<<8);
	//APB2 PLCK2 72hz
	//*(volatile unsigned long *)0x40021004 &= ~(0x7<<11);
	//*(volatile unsigned long *)0x40021004 |= (0x0<<11);
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
 80001b2:	461a      	mov	r2, r3
        00: HSI selected as system clock(PLL)
        01: HSE selected as system clock(PLL)
        10: PLL selected as system clock <------------- use this
        11: not allowed (not use system clock PLL)
    */
    *(volatile unsigned long *)0x40021004 &= ~(0x3); //reset PLL 
 80001b4:	6819      	ldr	r1, [r3, #0]
 80001b6:	f021 0103 	bic.w	r1, r1, #3
 80001ba:	6019      	str	r1, [r3, #0]
    *(volatile unsigned long *)0x40021004 |= 0x2; //set system clcok PLL
 80001bc:	6819      	ldr	r1, [r3, #0]
 80001be:	f041 0102 	orr.w	r1, r1, #2
 80001c2:	6019      	str	r1, [r3, #0]
	//*(volatile unsigned long *)0x40021004 |= (0x4<<8);
	//APB2 PLCK2 72hz
	//*(volatile unsigned long *)0x40021004 &= ~(0x7<<11);
	//*(volatile unsigned long *)0x40021004 |= (0x0<<11);
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
 80001c4:	6813      	ldr	r3, [r2, #0]
 80001c6:	f003 030c 	and.w	r3, r3, #12
 80001ca:	2b08      	cmp	r3, #8
 80001cc:	d1fa      	bne.n	80001c4 <zero_loop+0x80>
    	 - No parity
    	 - Hardware flow control disabled (RTS and CTS signals)
    	 - Receive and transmit enabled
    	*/
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
    *(volatile unsigned long *) 0x4001380C = 0x200C;        // 8bit no parity
 80001ce:	f242 070c 	movw	r7, #8204	; 0x200c
	//*(volatile unsigned long *)0x40021004 &= ~(0x7<<11);
	//*(volatile unsigned long *)0x40021004 |= (0x0<<11);
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
	//AHBENR enable
	*(volatile unsigned long *)0x40021014 |= 0x1 << 0 | 0x1 << 1; //DMA1 clock enable
 80001d2:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <zero_loop+0xfc>)
    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0 | 0x1 << 9;            // uart/ IOPA EN / AFIO EN    APB2ENR
 80001d4:	481b      	ldr	r0, [pc, #108]	; (8000244 <zero_loop+0x100>)
	//*(volatile unsigned long *)0x40021004 &= ~(0x7<<11);
	//*(volatile unsigned long *)0x40021004 |= (0x0<<11);
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
	//AHBENR enable
	*(volatile unsigned long *)0x40021014 |= 0x1 << 0 | 0x1 << 1; //DMA1 clock enable
 80001d6:	6813      	ldr	r3, [r2, #0]
    	 - One Stop Bit
    	 - No parity
    	 - Hardware flow control disabled (RTS and CTS signals)
    	 - Receive and transmit enabled
    	*/
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
 80001d8:	f8df e078 	ldr.w	lr, [pc, #120]	; 8000254 <zero_loop+0x110>
	//*(volatile unsigned long *)0x40021004 &= ~(0x7<<11);
	//*(volatile unsigned long *)0x40021004 |= (0x0<<11);
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
	//AHBENR enable
	*(volatile unsigned long *)0x40021014 |= 0x1 << 0 | 0x1 << 1; //DMA1 clock enable
 80001dc:	f043 0303 	orr.w	r3, r3, #3
 80001e0:	6013      	str	r3, [r2, #0]
    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0 | 0x1 << 9;            // uart/ IOPA EN / AFIO EN    APB2ENR
 80001e2:	6803      	ldr	r3, [r0, #0]
    	 - No parity
    	 - Hardware flow control disabled (RTS and CTS signals)
    	 - Receive and transmit enabled
    	*/
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
    *(volatile unsigned long *) 0x4001380C = 0x200C;        // 8bit no parity
 80001e4:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
	//AHBENR enable
	*(volatile unsigned long *)0x40021014 |= 0x1 << 0 | 0x1 << 1; //DMA1 clock enable
    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0 | 0x1 << 9;            // uart/ IOPA EN / AFIO EN    APB2ENR
    *(volatile unsigned long *)0x40010804 = 0x888444B4; //GPIO A CRH bit
 80001e8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8000258 <zero_loop+0x114>
 80001ec:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800025c <zero_loop+0x118>
    	 - Hardware flow control disabled (RTS and CTS signals)
    	 - Receive and transmit enabled
    	*/
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
    *(volatile unsigned long *) 0x4001380C = 0x200C;        // 8bit no parity
    *(volatile unsigned long *) 0x40013814 = 0x0;
 80001f0:	4e15      	ldr	r6, [pc, #84]	; (8000248 <zero_loop+0x104>)
    *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8; //OSC 32MHz 115200bps Setting
 80001f2:	4c16      	ldr	r4, [pc, #88]	; (800024c <zero_loop+0x108>)
	//*(volatile unsigned long *)0x40021004 |= (0x0<<11);
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
	//AHBENR enable
	*(volatile unsigned long *)0x40021014 |= 0x1 << 0 | 0x1 << 1; //DMA1 clock enable
    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0 | 0x1 << 9;            // uart/ IOPA EN / AFIO EN    APB2ENR
 80001f4:	f443 4384 	orr.w	r3, r3, #16896	; 0x4200
    	 - No parity
    	 - Hardware flow control disabled (RTS and CTS signals)
    	 - Receive and transmit enabled
    	*/
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
    *(volatile unsigned long *) 0x4001380C = 0x200C;        // 8bit no parity
 80001f8:	3a08      	subs	r2, #8
    	 - One Stop Bit
    	 - No parity
    	 - Hardware flow control disabled (RTS and CTS signals)
    	 - Receive and transmit enabled
    	*/
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
 80001fa:	2100      	movs	r1, #0
	//*(volatile unsigned long *)0x40021004 |= (0x0<<11);
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
	//AHBENR enable
	*(volatile unsigned long *)0x40021014 |= 0x1 << 0 | 0x1 << 1; //DMA1 clock enable
    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0 | 0x1 << 9;            // uart/ IOPA EN / AFIO EN    APB2ENR
 80001fc:	f043 0305 	orr.w	r3, r3, #5
    	 - Receive and transmit enabled
    	*/
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
    *(volatile unsigned long *) 0x4001380C = 0x200C;        // 8bit no parity
    *(volatile unsigned long *) 0x40013814 = 0x0;
    *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8; //OSC 32MHz 115200bps Setting
 8000200:	f44f 759c 	mov.w	r5, #312	; 0x138
	//*(volatile unsigned long *)0x40021004 |= (0x0<<11);
	//////////////////////////////////////////////////////////////////
    while(((*(volatile unsigned long *)0x40021004) & 0xC) != 0x08); // CLOCK PLL check
	//AHBENR enable
	*(volatile unsigned long *)0x40021014 |= 0x1 << 0 | 0x1 << 1; //DMA1 clock enable
    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0 | 0x1 << 9;            // uart/ IOPA EN / AFIO EN    APB2ENR
 8000204:	6003      	str	r3, [r0, #0]
    *(volatile unsigned long *)0x40010804 = 0x888444B4; //GPIO A CRH bit
 8000206:	f8cc 8000 	str.w	r8, [ip]
    	 - One Stop Bit
    	 - No parity
    	 - Hardware flow control disabled (RTS and CTS signals)
    	 - Receive and transmit enabled
    	*/
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
 800020a:	f8ce 1000 	str.w	r1, [lr]
    *(volatile unsigned long *) 0x4001380C = 0x200C;        // 8bit no parity
 800020e:	6017      	str	r7, [r2, #0]
    *(volatile unsigned long *) 0x40013814 = 0x0;
 8000210:	6031      	str	r1, [r6, #0]
    *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8; //OSC 32MHz 115200bps Setting
 8000212:	6025      	str	r5, [r4, #0]
    //*(volatile unsigned long *)0x40013808 = 39 << 4 | 1; //OSC 72MHz 115200bps Setting
    *(volatile unsigned long *) 0x4001380C |= 0x2000;
 8000214:	6813      	ldr	r3, [r2, #0]

    main(); //jump main function
 8000216:	490e      	ldr	r1, [pc, #56]	; (8000250 <zero_loop+0x10c>)
    *(volatile unsigned long *) 0x40013810 = 0x0;           // 1 stop bit
    *(volatile unsigned long *) 0x4001380C = 0x200C;        // 8bit no parity
    *(volatile unsigned long *) 0x40013814 = 0x0;
    *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8; //OSC 32MHz 115200bps Setting
    //*(volatile unsigned long *)0x40013808 = 39 << 4 | 1; //OSC 72MHz 115200bps Setting
    *(volatile unsigned long *) 0x4001380C |= 0x2000;
 8000218:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800021c:	6013      	str	r3, [r2, #0]

    main(); //jump main function
 800021e:	4788      	blx	r1

        printf("failed load ..");

    #endif

}
 8000220:	e8bd 41f9 	ldmia.w	sp!, {r0, r3, r4, r5, r6, r7, r8, lr}
 8000224:	4685      	mov	sp, r0
 8000226:	4770      	bx	lr
 8000228:	20000000 	.word	0x20000000
 800022c:	20000014 	.word	0x20000014
 8000230:	08001a90 	.word	0x08001a90
 8000234:	40021000 	.word	0x40021000
 8000238:	40022000 	.word	0x40022000
 800023c:	40021004 	.word	0x40021004
 8000240:	40021014 	.word	0x40021014
 8000244:	40021018 	.word	0x40021018
 8000248:	40013814 	.word	0x40013814
 800024c:	40013808 	.word	0x40013808
 8000250:	080012a9 	.word	0x080012a9
 8000254:	40013810 	.word	0x40013810
 8000258:	40010804 	.word	0x40010804
 800025c:	888444b4 	.word	0x888444b4
 8000260:	20000014 	.word	0x20000014
 8000264:	20000020 	.word	0x20000020

08000268 <RCC_Configuration>:


__IO uint32_t StartUpCounter = 0;

HW_DEF void RCC_Configuration(void)
{
 8000268:	b410      	push	{r4}
    __IO uint32_t  HSEStatus = 0;

    /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
    /* Enable HSE */    
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800026a:	4b21      	ldr	r3, [pc, #132]	; (80002f0 <RCC_Configuration+0x88>)

__IO uint32_t StartUpCounter = 0;

HW_DEF void RCC_Configuration(void)
{
    __IO uint32_t  HSEStatus = 0;
 800026c:	2400      	movs	r4, #0


__IO uint32_t StartUpCounter = 0;

HW_DEF void RCC_Configuration(void)
{
 800026e:	b083      	sub	sp, #12
    __IO uint32_t  HSEStatus = 0;
 8000270:	9401      	str	r4, [sp, #4]

    /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
    /* Enable HSE */    
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000272:	681c      	ldr	r4, [r3, #0]
 8000274:	4a1f      	ldr	r2, [pc, #124]	; (80002f4 <RCC_Configuration+0x8c>)
 8000276:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000

    /* Wait till HSE is ready and if Time out is reached exit */
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800027a:	4619      	mov	r1, r3
        StartUpCounter++;  
 800027c:	4610      	mov	r0, r2
{
    __IO uint32_t  HSEStatus = 0;

    /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
    /* Enable HSE */    
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800027e:	601c      	str	r4, [r3, #0]
 8000280:	e003      	b.n	800028a <RCC_Configuration+0x22>
    /* Wait till HSE is ready and if Time out is reached exit */
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;  
    } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8000282:	6803      	ldr	r3, [r0, #0]
 8000284:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000288:	d009      	beq.n	800029e <RCC_Configuration+0x36>
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);

    /* Wait till HSE is ready and if Time out is reached exit */
    do
    {
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800028a:	680b      	ldr	r3, [r1, #0]
 800028c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000290:	9301      	str	r3, [sp, #4]
        StartUpCounter++;  
 8000292:	6813      	ldr	r3, [r2, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	6013      	str	r3, [r2, #0]
    } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8000298:	9b01      	ldr	r3, [sp, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f1      	beq.n	8000282 <RCC_Configuration+0x1a>

    /* Flash 2 wait state */
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <RCC_Configuration+0x88>)
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;  
    } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));

    /* Flash 2 wait state */
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80002a0:	4815      	ldr	r0, [pc, #84]	; (80002f8 <RCC_Configuration+0x90>)

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0){;}
 80002a2:	4619      	mov	r1, r3
        HSEStatus = RCC->CR & RCC_CR_HSERDY;
        StartUpCounter++;  
    } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));

    /* Flash 2 wait state */
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80002a4:	6802      	ldr	r2, [r0, #0]
 80002a6:	f042 0202 	orr.w	r2, r2, #2
 80002aa:	6002      	str	r2, [r0, #0]

    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002b4:	685a      	ldr	r2, [r3, #4]
 80002b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002ba:	605a      	str	r2, [r3, #4]

    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 80002bc:	685a      	ldr	r2, [r3, #4]
 80002be:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 80002c2:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002ca:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0){;}
 80002cc:	680b      	ldr	r3, [r1, #0]
 80002ce:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <RCC_Configuration+0x88>)
 80002d0:	019b      	lsls	r3, r3, #6
 80002d2:	d5fb      	bpl.n	80002cc <RCC_Configuration+0x64>

    /* Select PLL as system clock source */
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08){;}
 80002d4:	4611      	mov	r1, r2

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0){;}

    /* Select PLL as system clock source */
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80002d6:	6853      	ldr	r3, [r2, #4]
 80002d8:	f043 0302 	orr.w	r3, r3, #2
 80002dc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08){;}
 80002de:	684b      	ldr	r3, [r1, #4]
 80002e0:	f003 030c 	and.w	r3, r3, #12
 80002e4:	2b08      	cmp	r3, #8
 80002e6:	d1fa      	bne.n	80002de <RCC_Configuration+0x76>
}
 80002e8:	b003      	add	sp, #12
 80002ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000
 80002f4:	20000014 	.word	0x20000014
 80002f8:	40022000 	.word	0x40022000

080002fc <Hw_Init>:

HW_DEF void Hw_Init()
{
 80002fc:	b508      	push	{r3, lr}
    RCC_Configuration();
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <Hw_Init+0x30>)
 8000300:	4798      	blx	r3
    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <Hw_Init+0x34>)
    RCC->APB2ENR |= RCC_APB2Periph_GPIOB;
    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
    RCC->APB2ENR |= RCC_APB2Periph_USART1;
    GPIO_Configuration();
 8000304:	490b      	ldr	r1, [pc, #44]	; (8000334 <Hw_Init+0x38>)
}

HW_DEF void Hw_Init()
{
    RCC_Configuration();
    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
 8000306:	699a      	ldr	r2, [r3, #24]
 8000308:	f042 0204 	orr.w	r2, r2, #4
 800030c:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2Periph_GPIOB;
 800030e:	699a      	ldr	r2, [r3, #24]
 8000310:	f042 0208 	orr.w	r2, r2, #8
 8000314:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
 8000316:	699a      	ldr	r2, [r3, #24]
 8000318:	f042 0210 	orr.w	r2, r2, #16
 800031c:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2Periph_USART1;
 800031e:	699a      	ldr	r2, [r3, #24]
 8000320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000324:	619a      	str	r2, [r3, #24]
    GPIO_Configuration();
 8000326:	4788      	blx	r1
 8000328:	bd08      	pop	{r3, pc}
 800032a:	bf00      	nop
 800032c:	08000269 	.word	0x08000269
 8000330:	40021000 	.word	0x40021000
 8000334:	080003f5 	.word	0x080003f5

08000338 <GPIO_Init>:

#include "Hw_Gpio.h"


GPIO_DEF void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    uint32_t tmpreg = 0x00, pinmask = 0x00;
    /*--------------- GPIO Mode Configuration -----------------*/
    //gpio mode 찾기 아웃풋인지 아닌지 abcd 중 ab가 모드를 결정한다. 연산시에 모드가 설정이 된다.
    //이중 포인터로 모드의 값을 참조한다.??
    currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800033c:	78cd      	ldrb	r5, [r1, #3]
    //구조체에 저장된 gpio_mode가 output이면 speed를 설정을 해주어야한다.
    if((((uint32_t)GPIO_InitStruct->GPIO_Mode)&((uint32_t)0x10)) != 0x00)
 800033e:	06eb      	lsls	r3, r5, #27
    {
        //output시시에 전체 모드와 속도를 결정을 해주는 것
        currentmode |= GPIO_InitStruct->GPIO_Speed;
 8000340:	bf48      	it	mi
 8000342:	788b      	ldrbmi	r3, [r1, #2]
    }
    /*--------------- GPIO CRL Configuration -----------------*/
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin &((uint32_t)0x00FF)) != 0x00)
 8000344:	8809      	ldrh	r1, [r1, #0]
    uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    uint32_t tmpreg = 0x00, pinmask = 0x00;
    /*--------------- GPIO Mode Configuration -----------------*/
    //gpio mode 찾기 아웃풋인지 아닌지 abcd 중 ab가 모드를 결정한다. 연산시에 모드가 설정이 된다.
    //이중 포인터로 모드의 값을 참조한다.??
    currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000346:	f005 0e0f 	and.w	lr, r5, #15
    //구조체에 저장된 gpio_mode가 output이면 speed를 설정을 해주어야한다.
    if((((uint32_t)GPIO_InitStruct->GPIO_Mode)&((uint32_t)0x10)) != 0x00)
    {
        //output시시에 전체 모드와 속도를 결정을 해주는 것
        currentmode |= GPIO_InitStruct->GPIO_Speed;
 800034a:	bf48      	it	mi
 800034c:	ea4e 0e03 	orrmi.w	lr, lr, r3
    }
    /*--------------- GPIO CRL Configuration -----------------*/
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin &((uint32_t)0x00FF)) != 0x00)
 8000350:	f011 0fff 	tst.w	r1, #255	; 0xff
 8000354:	d021      	beq.n	800039a <GPIO_Init+0x62>
    {
        tmpreg = GPIOx->CRL;
 8000356:	6806      	ldr	r6, [r0, #0]
        for(pinpos = 0x00; pinpos < 0x08;pinpos++)
 8000358:	2300      	movs	r3, #0
        {
            //shift연산으로 설정한 핀을 지정
            pos = ((uint32_t)0x01) << pinpos;
 800035a:	2701      	movs	r7, #1
            currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
            if(currentpin == pos)
            {
                pos = pinpos << 2;
                /* Clear the corresponding low control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
 800035c:	f04f 080f 	mov.w	r8, #15
 8000360:	e002      	b.n	8000368 <GPIO_Init+0x30>
    }
    /*--------------- GPIO CRL Configuration -----------------*/
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin &((uint32_t)0x00FF)) != 0x00)
    {
        tmpreg = GPIOx->CRL;
        for(pinpos = 0x00; pinpos < 0x08;pinpos++)
 8000362:	3301      	adds	r3, #1
 8000364:	2b08      	cmp	r3, #8
 8000366:	d017      	beq.n	8000398 <GPIO_Init+0x60>
        {
            //shift연산으로 설정한 핀을 지정
            pos = ((uint32_t)0x01) << pinpos;
 8000368:	fa07 f203 	lsl.w	r2, r7, r3
            /* Get the port pin position */
            currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800036c:	ea02 0401 	and.w	r4, r2, r1
            if(currentpin == pos)
 8000370:	4294      	cmp	r4, r2
 8000372:	d1f6      	bne.n	8000362 <GPIO_Init+0x2a>
            {
                pos = pinpos << 2;
 8000374:	009a      	lsls	r2, r3, #2
                /* Clear the corresponding low control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
 8000376:	fa08 fc02 	lsl.w	ip, r8, r2
                tmpreg &= ~pinmask;
 800037a:	ea26 060c 	bic.w	r6, r6, ip
                /* Write the mmode configuratuin in the corresponding bits */ 
                tmpreg |= (currentmode << pos);
 800037e:	fa0e f202 	lsl.w	r2, lr, r2
                /* Reset the corresponding ODR bit */
                //Input mode set
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000382:	2d28      	cmp	r5, #40	; 0x28
                pos = pinpos << 2;
                /* Clear the corresponding low control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
                tmpreg &= ~pinmask;
                /* Write the mmode configuratuin in the corresponding bits */ 
                tmpreg |= (currentmode << pos);
 8000384:	ea46 0602 	orr.w	r6, r6, r2
                /* Reset the corresponding ODR bit */
                //Input mode set
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000388:	d031      	beq.n	80003ee <GPIO_Init+0xb6>
                {
                    GPIOx->BRR = (((uint32_t)0x01) << pinpos);
                }else
                {
                    /* Set the corresponding ODR bit */
                    if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800038a:	2d48      	cmp	r5, #72	; 0x48
    }
    /*--------------- GPIO CRL Configuration -----------------*/
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin &((uint32_t)0x00FF)) != 0x00)
    {
        tmpreg = GPIOx->CRL;
        for(pinpos = 0x00; pinpos < 0x08;pinpos++)
 800038c:	f103 0301 	add.w	r3, r3, #1
                }else
                {
                    /* Set the corresponding ODR bit */
                    if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
                    {
                        GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000390:	bf08      	it	eq
 8000392:	6104      	streq	r4, [r0, #16]
    }
    /*--------------- GPIO CRL Configuration -----------------*/
    if(((uint32_t)GPIO_InitStruct->GPIO_Pin &((uint32_t)0x00FF)) != 0x00)
    {
        tmpreg = GPIOx->CRL;
        for(pinpos = 0x00; pinpos < 0x08;pinpos++)
 8000394:	2b08      	cmp	r3, #8
 8000396:	d1e7      	bne.n	8000368 <GPIO_Init+0x30>
                        GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
                    }
                }
            }
        }
        GPIOx->CRL = tmpreg;
 8000398:	6006      	str	r6, [r0, #0]
    }
    /*--------------- GPIO CRH Configuration -----------------*/

    /* Configure the eight high port pins */
    if(GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800039a:	29ff      	cmp	r1, #255	; 0xff
 800039c:	d923      	bls.n	80003e6 <GPIO_Init+0xae>
    {
        tmpreg = GPIOx->CRH;
 800039e:	6846      	ldr	r6, [r0, #4]
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003a0:	2300      	movs	r3, #0
        {
            pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80003a2:	2701      	movs	r7, #1
            currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
            if(currentpin == pos)
            {
                pos = pinpos << 2;
                /* Clear the corresponding high control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
 80003a4:	f04f 0c0f 	mov.w	ip, #15
 80003a8:	e002      	b.n	80003b0 <GPIO_Init+0x78>

    /* Configure the eight high port pins */
    if(GPIO_InitStruct->GPIO_Pin > 0x00FF)
    {
        tmpreg = GPIOx->CRH;
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003aa:	3301      	adds	r3, #1
 80003ac:	2b08      	cmp	r3, #8
 80003ae:	d019      	beq.n	80003e4 <GPIO_Init+0xac>
 80003b0:	f103 0208 	add.w	r2, r3, #8
        {
            pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80003b4:	fa07 f202 	lsl.w	r2, r7, r2
            /* Get the port pins position */
            currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80003b8:	ea02 0401 	and.w	r4, r2, r1
            if(currentpin == pos)
 80003bc:	4294      	cmp	r4, r2
 80003be:	d1f4      	bne.n	80003aa <GPIO_Init+0x72>
            {
                pos = pinpos << 2;
 80003c0:	009a      	lsls	r2, r3, #2
                /* Clear the corresponding high control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
 80003c2:	fa0c f802 	lsl.w	r8, ip, r2
                tmpreg &= ~pinmask;
 80003c6:	ea26 0608 	bic.w	r6, r6, r8
                /* Write the mode configuration in the corresponding bits */
                tmpreg |= (currentmode << pos);
 80003ca:	fa0e f202 	lsl.w	r2, lr, r2
                /* Reset the corresponding ODR bit */
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003ce:	2d28      	cmp	r5, #40	; 0x28
                pos = pinpos << 2;
                /* Clear the corresponding high control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
                tmpreg &= ~pinmask;
                /* Write the mode configuration in the corresponding bits */
                tmpreg |= (currentmode << pos);
 80003d0:	ea46 0602 	orr.w	r6, r6, r2
                /* Reset the corresponding ODR bit */
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003d4:	d009      	beq.n	80003ea <GPIO_Init+0xb2>
                {
                    GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
                }
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003d6:	2d48      	cmp	r5, #72	; 0x48

    /* Configure the eight high port pins */
    if(GPIO_InitStruct->GPIO_Pin > 0x00FF)
    {
        tmpreg = GPIOx->CRH;
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003d8:	f103 0301 	add.w	r3, r3, #1
                {
                    GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
                }
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
                {
                    GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003dc:	bf08      	it	eq
 80003de:	6104      	streq	r4, [r0, #16]

    /* Configure the eight high port pins */
    if(GPIO_InitStruct->GPIO_Pin > 0x00FF)
    {
        tmpreg = GPIOx->CRH;
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003e0:	2b08      	cmp	r3, #8
 80003e2:	d1e5      	bne.n	80003b0 <GPIO_Init+0x78>
                {
                    GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
                }
            }
        }
        GPIOx->CRH = tmpreg;
 80003e4:	6046      	str	r6, [r0, #4]
 80003e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                /* Write the mode configuration in the corresponding bits */
                tmpreg |= (currentmode << pos);
                /* Reset the corresponding ODR bit */
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
                {
                    GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003ea:	6144      	str	r4, [r0, #20]
 80003ec:	e7dd      	b.n	80003aa <GPIO_Init+0x72>
                tmpreg |= (currentmode << pos);
                /* Reset the corresponding ODR bit */
                //Input mode set
                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
                {
                    GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80003ee:	6144      	str	r4, [r0, #20]
 80003f0:	e7b7      	b.n	8000362 <GPIO_Init+0x2a>
 80003f2:	bf00      	nop

080003f4 <GPIO_Configuration>:
}



GPIO_DEF void GPIO_Configuration(void)
{
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    //USART configuration
    //여기서 .으로 멤버를 접근을 한다. 궁금한 것은 왜 여기서는 이중 포인터를 사용하지 않고 멤버의 값을 접근을 해서 사용을 하는지 ?
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
 80003f6:	4e21      	ldr	r6, [pc, #132]	; (800047c <GPIO_Configuration+0x88>)
}



GPIO_DEF void GPIO_Configuration(void)
{
 80003f8:	b083      	sub	sp, #12
    GPIO_InitTypeDef GPIO_InitStructure;

    //USART configuration
    //여기서 .으로 멤버를 접근을 한다. 궁금한 것은 왜 여기서는 이중 포인터를 사용하지 않고 멤버의 값을 접근을 해서 사용을 하는지 ?
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
 80003fa:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Rx_Pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80003fe:	2704      	movs	r7, #4
    //USART configuration
    //여기서 .으로 멤버를 접근을 한다. 궁금한 것은 왜 여기서는 이중 포인터를 사용하지 않고 멤버의 값을 접근을 해서 사용을 하는지 ?
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
 8000400:	4c1f      	ldr	r4, [pc, #124]	; (8000480 <GPIO_Configuration+0x8c>)
    GPIO_InitTypeDef GPIO_InitStructure;

    //USART configuration
    //여기서 .으로 멤버를 접근을 한다. 궁금한 것은 왜 여기서는 이중 포인터를 사용하지 않고 멤버의 값을 접근을 해서 사용을 하는지 ?
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000402:	2503      	movs	r5, #3
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
 8000404:	4630      	mov	r0, r6
 8000406:	a901      	add	r1, sp, #4

    //USART configuration
    //여기서 .으로 멤버를 접근을 한다. 궁금한 것은 왜 여기서는 이중 포인터를 사용하지 않고 멤버의 값을 접근을 해서 사용을 하는지 ?
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000408:	2318      	movs	r3, #24
{
    GPIO_InitTypeDef GPIO_InitStructure;

    //USART configuration
    //여기서 .으로 멤버를 접근을 한다. 궁금한 것은 왜 여기서는 이중 포인터를 사용하지 않고 멤버의 값을 접근을 해서 사용을 하는지 ?
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
 800040a:	f8ad 2004 	strh.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800040e:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_InitTypeDef GPIO_InitStructure;

    //USART configuration
    //여기서 .으로 멤버를 접근을 한다. 궁금한 것은 왜 여기서는 이중 포인터를 사용하지 않고 멤버의 값을 접근을 해서 사용을 하는지 ?
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000412:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
 8000416:	47a0      	blx	r4
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Rx_Pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
 8000418:	4630      	mov	r0, r6
 800041a:	eb0d 0107 	add.w	r1, sp, r7
    //여기서 .으로 멤버를 접근을 한다. 궁금한 것은 왜 여기서는 이중 포인터를 사용하지 않고 멤버의 값을 접근을 해서 사용을 하는지 ?
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Rx_Pin;
 800041e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000422:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000426:	f88d 7007 	strb.w	r7, [sp, #7]
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
 800042a:	47a0      	blx	r4


    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
 800042c:	4630      	mov	r0, r6
 800042e:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Rx_Pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);


    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
 8000432:	2301      	movs	r3, #1
 8000434:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000438:	2610      	movs	r6, #16
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);


    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800043a:	f88d 7007 	strb.w	r7, [sp, #7]
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
 800043e:	47a0      	blx	r4

    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 8000440:	eb0d 0107 	add.w	r1, sp, r7

    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN;
 8000444:	f44f 7348 	mov.w	r3, #800	; 0x320
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 8000448:	480e      	ldr	r0, [pc, #56]	; (8000484 <GPIO_Configuration+0x90>)

    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN;
 800044a:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800044e:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000452:	f88d 6007 	strb.w	r6, [sp, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 8000456:	47a0      	blx	r4
    //led all off setting
    Led_All_Off();
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <GPIO_Configuration+0x94>)
 800045a:	4798      	blx	r3

    GPIO_InitStructure.GPIO_Pin
    = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
 800045c:	f240 13ff 	movw	r3, #511	; 0x1ff
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 8000460:	eb0d 0107 	add.w	r1, sp, r7
 8000464:	4809      	ldr	r0, [pc, #36]	; (800048c <GPIO_Configuration+0x98>)
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
    //led all off setting
    Led_All_Off();

    GPIO_InitStructure.GPIO_Pin
    = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
 8000466:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800046a:	f88d 5006 	strb.w	r5, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800046e:	f88d 6007 	strb.w	r6, [sp, #7]
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 8000472:	47a0      	blx	r4
    //segment all off setting
    Off_7_SEG_AllPin();
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <GPIO_Configuration+0x9c>)
 8000476:	4798      	blx	r3

 8000478:	b003      	add	sp, #12
 800047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800047c:	40010800 	.word	0x40010800
 8000480:	08000339 	.word	0x08000339
 8000484:	40010c00 	.word	0x40010c00
 8000488:	0800059d 	.word	0x0800059d
 800048c:	40011000 	.word	0x40011000
 8000490:	08000681 	.word	0x08000681

08000494 <NVIC_Init.part.0>:
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <NVIC_Init.part.0+0x44>)
{
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
}

NVIC_DEF void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
 8000496:	b430      	push	{r4, r5}
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000498:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800049a:	7881      	ldrb	r1, [r0, #2]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800049c:	43d2      	mvns	r2, r2
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800049e:	7843      	ldrb	r3, [r0, #1]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004a0:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80004a4:	240f      	movs	r4, #15
 80004a6:	40d4      	lsrs	r4, r2
  
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 80004a8:	f1c2 0504 	rsb	r5, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004ac:	fa03 f205 	lsl.w	r2, r3, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80004b0:	ea04 0301 	and.w	r3, r4, r1
 80004b4:	4313      	orrs	r3, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004b6:	4909      	ldr	r1, [pc, #36]	; (80004dc <NVIC_Init.part.0+0x48>)
 80004b8:	7802      	ldrb	r2, [r0, #0]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
 80004ba:	011b      	lsls	r3, r3, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	440a      	add	r2, r1
 80004c0:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004c4:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f003 001f 	and.w	r0, r3, #31
 80004cc:	4082      	lsls	r2, r0
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004ce:	095b      	lsrs	r3, r3, #5
 80004d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80004d4:	bc30      	pop	{r4, r5}
 80004d6:	4770      	bx	lr
 80004d8:	e000ed00 	.word	0xe000ed00
 80004dc:	e000e100 	.word	0xe000e100

080004e0 <NVIC_Configuration>:
{
    SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
}

NVIC_DEF void NVIC_Configuration(void)
{   
 80004e0:	b570      	push	{r4, r5, r6, lr}
    printf("NVIC function start");
 80004e2:	4812      	ldr	r0, [pc, #72]	; (800052c <NVIC_Configuration+0x4c>)
{
    SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
}

NVIC_DEF void NVIC_Configuration(void)
{   
 80004e4:	b082      	sub	sp, #8
    printf("NVIC function start");
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <NVIC_Configuration+0x50>)
 80004e8:	4798      	blx	r3


NVIC_DEF void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <NVIC_Configuration+0x54>)
NVIC_DEF void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);


NVIC_DEF void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <NVIC_Configuration+0x58>)
 80004ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80004f2:	6099      	str	r1, [r3, #8]
        /* Configure one bit for preemption priority */
        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
    
        /* Enable the EXTI0 Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80004f4:	2500      	movs	r5, #0


NVIC_DEF void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80004f6:	60da      	str	r2, [r3, #12]
    
        /* Enable the EXTI0 Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80004f8:	2401      	movs	r4, #1
 80004fa:	a801      	add	r0, sp, #4
    
        /* Configure one bit for preemption priority */
        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
    
        /* Enable the EXTI0 Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 80004fc:	2306      	movs	r3, #6
 80004fe:	4e0f      	ldr	r6, [pc, #60]	; (800053c <NVIC_Configuration+0x5c>)
 8000500:	f88d 3004 	strb.w	r3, [sp, #4]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000504:	f88d 5005 	strb.w	r5, [sp, #5]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000508:	f88d 5006 	strb.w	r5, [sp, #6]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800050c:	f88d 4007 	strb.w	r4, [sp, #7]
 8000510:	47b0      	blx	r6
        NVIC_Init(&NVIC_InitStructure);
    
        /* Enable the EXTI1 Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8000512:	2307      	movs	r3, #7
 8000514:	a801      	add	r0, sp, #4
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000516:	f88d 5005 	strb.w	r5, [sp, #5]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800051a:	f88d 4006 	strb.w	r4, [sp, #6]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800051e:	f88d 4007 	strb.w	r4, [sp, #7]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStructure);
    
        /* Enable the EXTI1 Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8000522:	f88d 3004 	strb.w	r3, [sp, #4]
 8000526:	47b0      	blx	r6
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStructure);
}
 8000528:	b002      	add	sp, #8
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	08001300 	.word	0x08001300
 8000530:	0800087d 	.word	0x0800087d
 8000534:	05fa0700 	.word	0x05fa0700
 8000538:	e000ed00 	.word	0xe000ed00
 800053c:	08000495 	.word	0x08000495

08000540 <NVIC_SetPriority>:

NVIC_DEF void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8000540:	2800      	cmp	r0, #0
 8000542:	db08      	blt.n	8000556 <NVIC_SetPriority+0x16>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts      */
 8000544:	0109      	lsls	r1, r1, #4
 8000546:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800054a:	b2c9      	uxtb	r1, r1
 800054c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000550:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8000554:	4770      	bx	lr
}

NVIC_DEF void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <NVIC_SetPriority+0x28>)
 8000558:	f000 000f 	and.w	r0, r0, #15
 800055c:	0109      	lsls	r1, r1, #4
 800055e:	b2c9      	uxtb	r1, r1
 8000560:	4403      	add	r3, r0
 8000562:	7619      	strb	r1, [r3, #24]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ecfc 	.word	0xe000ecfc

0800056c <SysTick_Config>:



HW_SYSTICK_DEF uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */
 800056c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000570:	d301      	bcc.n	8000576 <SysTick_Config+0xa>
 8000572:	2001      	movs	r0, #1
 8000574:	4770      	bx	lr
#include "Hw_Systick.h"



HW_SYSTICK_DEF uint32_t SysTick_Config(uint32_t ticks)
{ 
 8000576:	b510      	push	{r4, lr}
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
 8000578:	4c06      	ldr	r4, [pc, #24]	; (8000594 <SysTick_Config+0x28>)
 800057a:	3801      	subs	r0, #1
 800057c:	6060      	str	r0, [r4, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);                            /* set Priority for Cortex-M0 System Interrupts */
 800057e:	210f      	movs	r1, #15
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SysTick_Config+0x2c>)
 8000586:	4798      	blx	r3
  SysTick->VAL   =  (0x00);                                                              /* Load the SysTick Counter Value */
 8000588:	2000      	movs	r0, #0
  SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_ENABLE) | (1<<SYSTICK_TICKINT); /* Enable SysTick IRQ and SysTick Timer */
 800058a:	2307      	movs	r3, #7
{ 
  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */

  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);                            /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   =  (0x00);                                                              /* Load the SysTick Counter Value */
 800058c:	60a0      	str	r0, [r4, #8]
  SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_ENABLE) | (1<<SYSTICK_TICKINT); /* Enable SysTick IRQ and SysTick Timer */
 800058e:	6023      	str	r3, [r4, #0]
  return (0);                                                                            /* Function successful */
 8000590:	bd10      	pop	{r4, pc}
 8000592:	bf00      	nop
 8000594:	e000e010 	.word	0xe000e010
 8000598:	08000541 	.word	0x08000541

0800059c <Led_All_Off>:
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
}
LED_DEF void Led_Red_Off()
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <Led_All_Off+0x1c>)
 800059e:	691a      	ldr	r2, [r3, #16]
 80005a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005a4:	611a      	str	r2, [r3, #16]
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
}
LED_DEF void Led_Yellow_Off()
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 80005a6:	691a      	ldr	r2, [r3, #16]
 80005a8:	f042 0220 	orr.w	r2, r2, #32
 80005ac:	611a      	str	r2, [r3, #16]
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
}
LED_DEF void Led_Blue_Off()
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 80005ae:	691a      	ldr	r2, [r3, #16]
 80005b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005b4:	611a      	str	r2, [r3, #16]
 80005b6:	4770      	bx	lr
 80005b8:	40010c00 	.word	0x40010c00

080005bc <Led_Mult>:
{
    Led_Red_Off();
    Led_Yellow_Off();
    Led_Blue_Off();
}
LED_DEF void Led_Mult(uint32_t counting){
 80005bc:	b570      	push	{r4, r5, r6, lr}
    for(; counting > 0; counting --)
 80005be:	4606      	mov	r6, r0
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d02a      	beq.n	800061a <Led_Mult+0x5e>
 80005c4:	4d15      	ldr	r5, [pc, #84]	; (800061c <Led_Mult+0x60>)
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
}
LED_DEF void Led_Red_Off()
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 80005c6:	4c16      	ldr	r4, [pc, #88]	; (8000620 <Led_Mult+0x64>)
 80005c8:	6923      	ldr	r3, [r4, #16]
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6123      	str	r3, [r4, #16]
}
LED_DEF void Led_Yellow_On()
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 80005d0:	6963      	ldr	r3, [r4, #20]
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
}
LED_DEF void Led_Blue_On()
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 80005d8:	6963      	ldr	r3, [r4, #20]
 80005da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005de:	6163      	str	r3, [r4, #20]
    for(; counting > 0; counting --)
    {
        Led_Red_Off();
        Led_Yellow_On();
        Led_Blue_On();
        Hw_1_second();
 80005e0:	47a8      	blx	r5
#include "Hw_Led.h"


LED_DEF void Led_Red_On()
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 80005e2:	6963      	ldr	r3, [r4, #20]
 80005e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e8:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
}
LED_DEF void Led_Yellow_Off()
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 80005ea:	6923      	ldr	r3, [r4, #16]
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	6123      	str	r3, [r4, #16]
}
LED_DEF void Led_Blue_On()
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 80005f2:	6963      	ldr	r3, [r4, #20]
 80005f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f8:	6163      	str	r3, [r4, #20]
        Hw_1_second();

        Led_Red_On();
        Led_Yellow_Off();
        Led_Blue_On();
        Hw_1_second();
 80005fa:	47a8      	blx	r5
#include "Hw_Led.h"


LED_DEF void Led_Red_On()
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 80005fc:	6963      	ldr	r3, [r4, #20]
 80005fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000602:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
}
LED_DEF void Led_Yellow_On()
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 8000604:	6963      	ldr	r3, [r4, #20]
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
}
LED_DEF void Led_Blue_Off()
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 800060c:	6923      	ldr	r3, [r4, #16]
 800060e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000612:	6123      	str	r3, [r4, #16]
        Hw_1_second();

        Led_Red_On();
        Led_Yellow_On();
        Led_Blue_Off();
        Hw_1_second();
 8000614:	47a8      	blx	r5
    Led_Red_Off();
    Led_Yellow_Off();
    Led_Blue_Off();
}
LED_DEF void Led_Mult(uint32_t counting){
    for(; counting > 0; counting --)
 8000616:	3e01      	subs	r6, #1
 8000618:	d1d6      	bne.n	80005c8 <Led_Mult+0xc>
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	08000cd5 	.word	0x08000cd5
 8000620:	40010c00 	.word	0x40010c00

08000624 <Led_Test>:
        Led_Blue_Off();
        Hw_1_second();
    }
}
LED_DEF void Led_Test()
{
 8000624:	b508      	push	{r3, lr}
    Hw_1_second();
    Led_All_Off();
    Hw_1_second();
    Led_All_On();
    #else
    Led_Mult(30);
 8000626:	201e      	movs	r0, #30
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <Led_Test+0x24>)
 800062a:	4798      	blx	r3
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
}
LED_DEF void Led_Red_Off()
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <Led_Test+0x28>)
 800062e:	691a      	ldr	r2, [r3, #16]
 8000630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000634:	611a      	str	r2, [r3, #16]
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
}
LED_DEF void Led_Yellow_Off()
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 8000636:	691a      	ldr	r2, [r3, #16]
 8000638:	f042 0220 	orr.w	r2, r2, #32
 800063c:	611a      	str	r2, [r3, #16]
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
}
LED_DEF void Led_Blue_Off()
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 800063e:	691a      	ldr	r2, [r3, #16]
 8000640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	bd08      	pop	{r3, pc}
 8000648:	080005bd 	.word	0x080005bd
 800064c:	40010c00 	.word	0x40010c00

08000650 <PowerOn_7_SEG>:



SEG_DEF void PowerOn_7_SEG(void)
{
    GPIO_7_SEG->BRR |= GPIO_7_SEG_POWER_PIN;
 8000650:	4a02      	ldr	r2, [pc, #8]	; (800065c <PowerOn_7_SEG+0xc>)
 8000652:	6953      	ldr	r3, [r2, #20]
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4770      	bx	lr
 800065c:	40011000 	.word	0x40011000

08000660 <PowerOff_7_SEG>:
}

SEG_DEF void PowerOff_7_SEG(void)
{
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
 8000660:	4a02      	ldr	r2, [pc, #8]	; (800066c <PowerOff_7_SEG+0xc>)
 8000662:	6913      	ldr	r3, [r2, #16]
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6113      	str	r3, [r2, #16]
 800066a:	4770      	bx	lr
 800066c:	40011000 	.word	0x40011000

08000670 <On_7_SEG_AllPin>:
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 8000670:	4a02      	ldr	r2, [pc, #8]	; (800067c <On_7_SEG_AllPin+0xc>)
 8000672:	6953      	ldr	r3, [r2, #20]
 8000674:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4770      	bx	lr
 800067c:	40011000 	.word	0x40011000

08000680 <Off_7_SEG_AllPin>:
}

SEG_DEF void Off_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BSRR |= pinNum;
 8000680:	4a02      	ldr	r2, [pc, #8]	; (800068c <Off_7_SEG_AllPin+0xc>)
 8000682:	6913      	ldr	r3, [r2, #16]
 8000684:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000688:	6113      	str	r3, [r2, #16]
 800068a:	4770      	bx	lr
 800068c:	40011000 	.word	0x40011000

08000690 <OutPut_7_SEG_Number>:
 8000690:	4a24      	ldr	r2, [pc, #144]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 8000692:	6913      	ldr	r3, [r2, #16]
 8000694:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000698:	6113      	str	r3, [r2, #16]

SEG_DEF void OutPut_7_SEG_Number(unsigned int num)
{
    Off_7_SEG_AllPin();

    switch(num)
 800069a:	2809      	cmp	r0, #9
 800069c:	d80b      	bhi.n	80006b6 <OutPut_7_SEG_Number+0x26>
 800069e:	e8df f000 	tbb	[pc, r0]
 80006a2:	110b      	.short	0x110b
 80006a4:	29231d17 	.word	0x29231d17
 80006a8:	053b352f 	.word	0x053b352f
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 80006ae:	6953      	ldr	r3, [r2, #20]
 80006b0:	f043 03af 	orr.w	r3, r3, #175	; 0xaf
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4770      	bx	lr
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 80006ba:	6953      	ldr	r3, [r2, #20]
 80006bc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4770      	bx	lr
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 80006c6:	6953      	ldr	r3, [r2, #20]
 80006c8:	f043 0306 	orr.w	r3, r3, #6
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4770      	bx	lr
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 80006d2:	6953      	ldr	r3, [r2, #20]
 80006d4:	f043 039b 	orr.w	r3, r3, #155	; 0x9b
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4770      	bx	lr
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 80006de:	6953      	ldr	r3, [r2, #20]
 80006e0:	f043 038f 	orr.w	r3, r3, #143	; 0x8f
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4770      	bx	lr
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 80006ea:	6953      	ldr	r3, [r2, #20]
 80006ec:	f043 03a6 	orr.w	r3, r3, #166	; 0xa6
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4770      	bx	lr
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 80006f6:	6953      	ldr	r3, [r2, #20]
 80006f8:	f043 03ad 	orr.w	r3, r3, #173	; 0xad
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4770      	bx	lr
 8000700:	4a08      	ldr	r2, [pc, #32]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 8000702:	6953      	ldr	r3, [r2, #20]
 8000704:	f043 03bd 	orr.w	r3, r3, #189	; 0xbd
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4770      	bx	lr
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 800070e:	6953      	ldr	r3, [r2, #20]
 8000710:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4770      	bx	lr
 8000718:	4a02      	ldr	r2, [pc, #8]	; (8000724 <OutPut_7_SEG_Number+0x94>)
 800071a:	6953      	ldr	r3, [r2, #20]
 800071c:	f043 03bf 	orr.w	r3, r3, #191	; 0xbf
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4770      	bx	lr
 8000724:	40011000 	.word	0x40011000

08000728 <Seven_Segment_Test>:
        break;
    }
}

SEG_DEF void Seven_Segment_Test(void)
{
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}

    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;

    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin
        = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN
 800072a:	f240 16ff 	movw	r6, #511	; 0x1ff
        break;
    }
}

SEG_DEF void Seven_Segment_Test(void)
{
 800072e:	b083      	sub	sp, #12
    GPIO_InitTypeDef GPIO_InitStructure;
    int i;
    
    printf("Seven_Segment_Test\n");
 8000730:	4828      	ldr	r0, [pc, #160]	; (80007d4 <Seven_Segment_Test+0xac>)
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <Seven_Segment_Test+0xb0>)
 8000734:	4798      	blx	r3

    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
 8000736:	4a29      	ldr	r2, [pc, #164]	; (80007dc <Seven_Segment_Test+0xb4>)
        = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN
          | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN
          | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 8000738:	4d29      	ldr	r5, [pc, #164]	; (80007e0 <Seven_Segment_Test+0xb8>)
    GPIO_InitTypeDef GPIO_InitStructure;
    int i;
    
    printf("Seven_Segment_Test\n");

    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
 800073a:	6993      	ldr	r3, [r2, #24]
        = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN
          | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN
          | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 800073c:	4628      	mov	r0, r5
    GPIO_InitTypeDef GPIO_InitStructure;
    int i;
    
    printf("Seven_Segment_Test\n");

    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
 800073e:	f043 0310 	orr.w	r3, r3, #16
        = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN
          | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN
          | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 8000742:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef GPIO_InitStructure;
    int i;
    
    printf("Seven_Segment_Test\n");

    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
 8000744:	6193      	str	r3, [r2, #24]
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin
        = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN
          | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN
          | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000746:	2403      	movs	r4, #3
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000748:	2210      	movs	r2, #16
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <Seven_Segment_Test+0xbc>)
    GPIO_InitStructure.GPIO_Pin
        = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN
          | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN
          | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800074c:	f88d 2007 	strb.w	r2, [sp, #7]

    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;

    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin
        = GPIO_7_SEG_POWER_PIN | GPIO_7_SEG_A_PIN | GPIO_7_SEG_B_PIN
 8000750:	f8ad 6004 	strh.w	r6, [sp, #4]
          | GPIO_7_SEG_C_PIN | GPIO_7_SEG_D_PIN | GPIO_7_SEG_E_PIN
          | GPIO_7_SEG_F_PIN | GPIO_7_SEG_G_PIN | GPIO_7_SEG_DP_PIN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000754:	f88d 4006 	strb.w	r4, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);
 8000758:	4798      	blx	r3



SEG_DEF void PowerOn_7_SEG(void)
{
    GPIO_7_SEG->BRR |= GPIO_7_SEG_POWER_PIN;
 800075a:	696b      	ldr	r3, [r5, #20]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);

    PowerOn_7_SEG();

    Hw_1_second();
 800075c:	4e22      	ldr	r6, [pc, #136]	; (80007e8 <Seven_Segment_Test+0xc0>)



SEG_DEF void PowerOn_7_SEG(void)
{
    GPIO_7_SEG->BRR |= GPIO_7_SEG_POWER_PIN;
 800075e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000762:	616b      	str	r3, [r5, #20]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_7_SEG, &GPIO_InitStructure);

    PowerOn_7_SEG();

    Hw_1_second();
 8000764:	47b0      	blx	r6
    GPIO_7_SEG->BRR |= pinNum;
}

SEG_DEF void Off_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BSRR |= pinNum;
 8000766:	692b      	ldr	r3, [r5, #16]
 8000768:	4f20      	ldr	r7, [pc, #128]	; (80007ec <Seven_Segment_Test+0xc4>)
 800076a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800076e:	612b      	str	r3, [r5, #16]
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 8000770:	696b      	ldr	r3, [r5, #20]
    On_7_SEG_OnePin(GPIO_7_SEG_G_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_DP_PIN);
    Hw_1_second();

    for(i=0; i<10; i++)
 8000772:	2400      	movs	r4, #0
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	616b      	str	r3, [r5, #20]

    Hw_1_second();
    Off_7_SEG_AllPin();

    On_7_SEG_OnePin(GPIO_7_SEG_A_PIN);
    Hw_1_second();
 800077a:	47b0      	blx	r6
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 800077c:	696b      	ldr	r3, [r5, #20]
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	616b      	str	r3, [r5, #20]
    Off_7_SEG_AllPin();

    On_7_SEG_OnePin(GPIO_7_SEG_A_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_B_PIN);
    Hw_1_second();
 8000784:	47b0      	blx	r6
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 8000786:	696b      	ldr	r3, [r5, #20]
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	616b      	str	r3, [r5, #20]
    On_7_SEG_OnePin(GPIO_7_SEG_A_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_B_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_C_PIN);
    Hw_1_second();
 800078e:	47b0      	blx	r6
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 8000790:	696b      	ldr	r3, [r5, #20]
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	616b      	str	r3, [r5, #20]
    On_7_SEG_OnePin(GPIO_7_SEG_B_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_C_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_D_PIN);
    Hw_1_second();
 8000798:	47b0      	blx	r6
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 800079a:	696b      	ldr	r3, [r5, #20]
 800079c:	f043 0310 	orr.w	r3, r3, #16
 80007a0:	616b      	str	r3, [r5, #20]
    On_7_SEG_OnePin(GPIO_7_SEG_C_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_D_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_E_PIN);
    Hw_1_second();
 80007a2:	47b0      	blx	r6
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 80007a4:	696b      	ldr	r3, [r5, #20]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	616b      	str	r3, [r5, #20]
    On_7_SEG_OnePin(GPIO_7_SEG_D_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_E_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_F_PIN);
    Hw_1_second();
 80007ac:	47b0      	blx	r6
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 80007ae:	696b      	ldr	r3, [r5, #20]
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	616b      	str	r3, [r5, #20]
    On_7_SEG_OnePin(GPIO_7_SEG_E_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_F_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_G_PIN);
    Hw_1_second();
 80007b6:	47b0      	blx	r6
    GPIO_7_SEG->BSRR |= GPIO_7_SEG_POWER_PIN;
}

SEG_DEF void On_7_SEG_OnePin(uint16_t pinNum)
{
    GPIO_7_SEG->BRR |= pinNum;
 80007b8:	696b      	ldr	r3, [r5, #20]
 80007ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007be:	616b      	str	r3, [r5, #20]
    On_7_SEG_OnePin(GPIO_7_SEG_F_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_G_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_DP_PIN);
    Hw_1_second();
 80007c0:	47b0      	blx	r6

    for(i=0; i<10; i++)
    {
        OutPut_7_SEG_Number(i);
 80007c2:	4620      	mov	r0, r4
    On_7_SEG_OnePin(GPIO_7_SEG_G_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_DP_PIN);
    Hw_1_second();

    for(i=0; i<10; i++)
 80007c4:	3401      	adds	r4, #1
    {
        OutPut_7_SEG_Number(i);
 80007c6:	47b8      	blx	r7
        Hw_1_second();
 80007c8:	47b0      	blx	r6
    On_7_SEG_OnePin(GPIO_7_SEG_G_PIN);
    Hw_1_second();
    On_7_SEG_OnePin(GPIO_7_SEG_DP_PIN);
    Hw_1_second();

    for(i=0; i<10; i++)
 80007ca:	2c0a      	cmp	r4, #10
 80007cc:	d1f9      	bne.n	80007c2 <Seven_Segment_Test+0x9a>
    {
        OutPut_7_SEG_Number(i);
        Hw_1_second();
    }
}
 80007ce:	b003      	add	sp, #12
 80007d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08001314 	.word	0x08001314
 80007d8:	0800087d 	.word	0x0800087d
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40011000 	.word	0x40011000
 80007e4:	08000339 	.word	0x08000339
 80007e8:	08000cd5 	.word	0x08000cd5
 80007ec:	08000691 	.word	0x08000691

080007f0 <print_byte>:
 *******************************************************************************/
#include "Ld_Printf.h"

void print_byte(unsigned int c)
{
    if (c == '\n') print_byte('\r');
 80007f0:	280a      	cmp	r0, #10
 * @date      04/15/2013
 *******************************************************************************/
#include "Ld_Printf.h"

void print_byte(unsigned int c)
{
 80007f2:	b510      	push	{r4, lr}
 80007f4:	4604      	mov	r4, r0
    if (c == '\n') print_byte('\r');
 80007f6:	d006      	beq.n	8000806 <print_byte+0x16>
    while( !((*(volatile unsigned long *) 0x40013800) & 0x80) ) ;
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <print_byte+0x20>)
 80007fa:	6813      	ldr	r3, [r2, #0]
 80007fc:	061b      	lsls	r3, r3, #24
 80007fe:	d5fc      	bpl.n	80007fa <print_byte+0xa>
    *(volatile unsigned long *) 0x40013804 = c;
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <print_byte+0x24>)
 8000802:	601c      	str	r4, [r3, #0]
 8000804:	bd10      	pop	{r4, pc}
 *******************************************************************************/
#include "Ld_Printf.h"

void print_byte(unsigned int c)
{
    if (c == '\n') print_byte('\r');
 8000806:	200d      	movs	r0, #13
 8000808:	f7ff fff2 	bl	80007f0 <print_byte>
 800080c:	e7f4      	b.n	80007f8 <print_byte+0x8>
 800080e:	bf00      	nop
 8000810:	40013800 	.word	0x40013800
 8000814:	40013804 	.word	0x40013804

08000818 <get_byte>:
    *(volatile unsigned long *) 0x40013804 = c;
}

LDSTRING_DEF char get_byte(void)
{
    while( !((*(volatile unsigned long *) 0x40013800) & 0x20) ) ;
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <get_byte+0x10>)
 800081a:	6813      	ldr	r3, [r2, #0]
 800081c:	069b      	lsls	r3, r3, #26
 800081e:	d5fc      	bpl.n	800081a <get_byte+0x2>
    return (char) *(volatile unsigned long *) 0x40013804;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <get_byte+0x14>)
 8000822:	6818      	ldr	r0, [r3, #0]
    
}
 8000824:	b2c0      	uxtb	r0, r0
 8000826:	4770      	bx	lr
 8000828:	40013800 	.word	0x40013800
 800082c:	40013804 	.word	0x40013804

08000830 <DecToLong>:
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000830:	b1e8      	cbz	r0, 800086e <DecToLong+0x3e>
 8000832:	7803      	ldrb	r3, [r0, #0]
 8000834:	b1db      	cbz	r3, 800086e <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 8000836:	2300      	movs	r3, #0
 8000838:	600b      	str	r3, [r1, #0]
 800083a:	7802      	ldrb	r2, [r0, #0]
 800083c:	b1e2      	cbz	r2, 8000878 <DecToLong+0x48>
// ���� : 10���� ���ڿ� s���� ������ ����� retval�� ����Ű�� ��ġ�� ���.
// �Ű� : s      : ��ȯ�� ���ڿ��� �ּ�.
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
 800083e:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8000840:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000844:	b2e2      	uxtb	r2, r4
 8000846:	2a09      	cmp	r2, #9
 8000848:	d902      	bls.n	8000850 <DecToLong+0x20>
 800084a:	e012      	b.n	8000872 <DecToLong+0x42>
 800084c:	2d09      	cmp	r5, #9
 800084e:	d810      	bhi.n	8000872 <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8000850:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000854:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000858:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800085a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 800085e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000862:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000864:	2a00      	cmp	r2, #0
 8000866:	d1f1      	bne.n	800084c <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000868:	2001      	movs	r0, #1
}        // DecToLong.
 800086a:	bc30      	pop	{r4, r5}
 800086c:	4770      	bx	lr
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 800086e:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 8000870:	4770      	bx	lr
//        retval : ��ȯ�� ���� ��ϵ� �ּ�.
// ��ȯ : return : 1 : success                0 : failure.
// ���� :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000872:	2000      	movs	r0, #0
                *retval = *retval * 10 + remainder;
        }


        return true;
}        // DecToLong.
 8000874:	bc30      	pop	{r4, r5}
 8000876:	4770      	bx	lr
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000878:	2001      	movs	r0, #1
}        // DecToLong.
 800087a:	4770      	bx	lr

0800087c <printf>:
// �Ű� : fmt : printf()�� �����ϳ� "%s", "%c", "%d", "%x" ��� ����.
//              %d, %x�� ��쿡�� "%08x", "%8x"�� ���� ��Ÿ�� ���̿� �� ������ 0���� ä���� ���� ����.
// ��ȯ : ����.
// ���� : ����.
LDSTRING_DEF void printf(char *fmt, ...)
{
 800087c:	b40f      	push	{r0, r1, r2, r3}
 800087e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000882:	b089      	sub	sp, #36	; 0x24
        int                i;
        va_list args;
        char        *s=fmt;
 8000884:	f10d 0848 	add.w	r8, sp, #72	; 0x48
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000888:	4ec6      	ldr	r6, [pc, #792]	; (8000ba4 <printf+0x328>)
// ���� : ����.
LDSTRING_DEF void printf(char *fmt, ...)
{
        int                i;
        va_list args;
        char        *s=fmt;
 800088a:	f858 5b04 	ldr.w	r5, [r8], #4
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 800088e:	7828      	ldrb	r0, [r5, #0]
 8000890:	b3a0      	cbz	r0, 80008fc <printf+0x80>
                if (*s=='%'){
 8000892:	2825      	cmp	r0, #37	; 0x25
 8000894:	d137      	bne.n	8000906 <printf+0x8a>
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
 8000896:	ac08      	add	r4, sp, #32
 8000898:	f804 0d18 	strb.w	r0, [r4, #-24]!
 800089c:	4621      	mov	r1, r4
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
                if (*s=='%'){
                        s++;
 800089e:	1c6b      	adds	r3, r5, #1
 80008a0:	f105 0c0a 	add.w	ip, r5, #10
 80008a4:	1b5f      	subs	r7, r3, r5
 80008a6:	469e      	mov	lr, r3
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80008a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80008ac:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 80008b0:	2a01      	cmp	r2, #1
 80008b2:	f240 8095 	bls.w	80009e0 <printf+0x164>
 80008b6:	2878      	cmp	r0, #120	; 0x78
 80008b8:	f000 8092 	beq.w	80009e0 <printf+0x164>
 80008bc:	2873      	cmp	r0, #115	; 0x73
 80008be:	f000 808f 	beq.w	80009e0 <printf+0x164>
 80008c2:	2825      	cmp	r0, #37	; 0x25
 80008c4:	f000 808c 	beq.w	80009e0 <printf+0x164>
        while (*s){
                if (*s=='%'){
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
 80008c8:	4563      	cmp	r3, ip
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 80008ca:	461a      	mov	r2, r3
 80008cc:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (*s){
                if (*s=='%'){
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
 80008d0:	d1e8      	bne.n	80008a4 <printf+0x28>
 80008d2:	f89e 0001 	ldrb.w	r0, [lr, #1]
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 80008d6:	1c55      	adds	r5, r2, #1
 80008d8:	2864      	cmp	r0, #100	; 0x64
 80008da:	f000 808f 	beq.w	80009fc <printf+0x180>
 80008de:	d815      	bhi.n	800090c <printf+0x90>
 80008e0:	2825      	cmp	r0, #37	; 0x25
 80008e2:	f000 810c 	beq.w	8000afe <printf+0x282>
 80008e6:	2863      	cmp	r0, #99	; 0x63
 80008e8:	d1d1      	bne.n	800088e <printf+0x12>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 80008ea:	f898 0000 	ldrb.w	r0, [r8]
 80008ee:	47b0      	blx	r6
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 80008f0:	7828      	ldrb	r0, [r5, #0]
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
 80008f2:	f108 0404 	add.w	r4, r8, #4
 80008f6:	46a0      	mov	r8, r4
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt�� ���ڰ� "%08lx"���, "08l"�� �ӽ÷� ���.
        
        va_start(args, fmt);
        while (*s){
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d1ca      	bne.n	8000892 <printf+0x16>
                        s++;
                }
        }
        va_end(args);
        return;
}
 80008fc:	b009      	add	sp, #36	; 0x24
 80008fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000902:	b004      	add	sp, #16
 8000904:	4770      	bx	lr

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000906:	47b0      	blx	r6
                                        break;
                        }
                }
                else {
                        PrintChar("%c", *s);
                        s++;
 8000908:	3501      	adds	r5, #1
 800090a:	e7c0      	b.n	800088e <printf+0x12>
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 800090c:	2873      	cmp	r0, #115	; 0x73
 800090e:	f000 80f8 	beq.w	8000b02 <printf+0x286>
 8000912:	2878      	cmp	r0, #120	; 0x78
 8000914:	d1bb      	bne.n	800088e <printf+0x12>
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 8000916:	f8d8 a000 	ldr.w	sl, [r8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 800091a:	f89d 3008 	ldrb.w	r3, [sp, #8]

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800091e:	2700      	movs	r7, #0
 8000920:	f8cd a000 	str.w	sl, [sp]
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 8000924:	f108 0804 	add.w	r8, r8, #4

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000928:	9701      	str	r7, [sp, #4]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 80ff 	beq.w	8000b2e <printf+0x2b2>
                if (c=='x') break;
 8000930:	2b78      	cmp	r3, #120	; 0x78
 8000932:	f000 80fc 	beq.w	8000b2e <printf+0x2b2>
 8000936:	46bb      	mov	fp, r7
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000938:	46b9      	mov	r9, r7


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 800093a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800093e:	2a08      	cmp	r2, #8
 8000940:	d84a      	bhi.n	80009d8 <printf+0x15c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000942:	f814 300b 	ldrb.w	r3, [r4, fp]
 8000946:	eb04 010b 	add.w	r1, r4, fp
 800094a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800094e:	2a09      	cmp	r2, #9
 8000950:	f200 814f 	bhi.w	8000bf2 <printf+0x376>
 8000954:	a805      	add	r0, sp, #20
 8000956:	4686      	mov	lr, r0
 8000958:	2200      	movs	r2, #0
                                tol[j] = s[i++];
 800095a:	f80e 3b01 	strb.w	r3, [lr], #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800095e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                                tol[j] = s[i++];
 8000962:	f10b 0b01 	add.w	fp, fp, #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000966:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800096a:	f1bc 0f09 	cmp.w	ip, #9
 800096e:	f102 0201 	add.w	r2, r2, #1
 8000972:	d9f2      	bls.n	800095a <printf+0xde>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000974:	ab08      	add	r3, sp, #32
 8000976:	441a      	add	r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8000978:	a901      	add	r1, sp, #4
 800097a:	4b8b      	ldr	r3, [pc, #556]	; (8000ba8 <printf+0x32c>)
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800097c:	f802 9c0c 	strb.w	r9, [r2, #-12]
                        i--;
 8000980:	f10b 3bff 	add.w	fp, fp, #4294967295
                        DecToLong(tol, &flagcnt);
 8000984:	4798      	blx	r3
        char        uHex, lHex;
        int                cnt;                                                // "%5x"�� ��� 5���� ����ϵ��� ����� ����.


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 8000986:	f10b 0b01 	add.w	fp, fp, #1
 800098a:	ab08      	add	r3, sp, #32
 800098c:	445b      	add	r3, fp
 800098e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000992:	b10b      	cbz	r3, 8000998 <printf+0x11c>
                if (c=='x') break;
 8000994:	2b78      	cmp	r3, #120	; 0x78
 8000996:	d1d0      	bne.n	800093a <printf+0xbe>
 8000998:	9b01      	ldr	r3, [sp, #4]
 800099a:	fa9a f28a 	rev.w	r2, sl
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian�� ����.(big�� ����ϱ� ���� ������ �ٲ�)
 800099e:	9200      	str	r2, [sp, #0]
        
        // ���� flag�� ���� ���.
        if (flagcnt){
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 80c7 	beq.w	8000b34 <printf+0x2b8>
                if (flagcnt&0x01){        // flagcnt�� Ȧ�� �϶�, upper�� ����, lower�� ���.
 80009a6:	07da      	lsls	r2, r3, #31
 80009a8:	f140 812c 	bpl.w	8000c04 <printf+0x388>
                        c = s[(8-(flagcnt+1))/2]; // Ȧ�� �϶� �� ��ġ�� �����ϴ� ���� ���� ���� �ɴϴ�.
 80009ac:	f1c3 0307 	rsb	r3, r3, #7
 80009b0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80009b4:	aa08      	add	r2, sp, #32
 80009b6:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits�� �����ͼ� ascii code��.
                        lHex = ((c>>0)&0x0f);
 80009ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
                        if (lHex!=0) leading_zero=false;
 80009be:	f013 030f 	ands.w	r3, r3, #15
 80009c2:	f000 815a 	beq.w	8000c7a <printf+0x3fe>
                        if (lHex<10) lHex+='0';
 80009c6:	2b09      	cmp	r3, #9
 80009c8:	f240 8175 	bls.w	8000cb6 <printf+0x43a>
                        else         lHex+='A'-10;
 80009cc:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 80009d0:	47b0      	blx	r6
 80009d2:	f04f 0900 	mov.w	r9, #0
 80009d6:	e155      	b.n	8000c84 <printf+0x408>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 80009d8:	2b30      	cmp	r3, #48	; 0x30
 80009da:	bf08      	it	eq
 80009dc:	2701      	moveq	r7, #1
 80009de:	e7d2      	b.n	8000986 <printf+0x10a>
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
 80009e0:	4672      	mov	r2, lr
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 80009e2:	ab08      	add	r3, sp, #32
 80009e4:	441f      	add	r7, r3
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 80009e6:	2864      	cmp	r0, #100	; 0x64
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
                                        format[i] = '\0';
 80009e8:	f04f 0300 	mov.w	r3, #0
                        s++;
                        // s���� "%08lx"������ ������ format�� ���. ���߿� ����Լ��� �Ѱ���.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 80009ec:	f807 0c18 	strb.w	r0, [r7, #-24]
                                        format[i] = '\0';
 80009f0:	f807 3c17 	strb.w	r3, [r7, #-23]
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"�� ã�� ����� �Լ� ȣ��.
                        switch (*s++){
 80009f4:	f102 0501 	add.w	r5, r2, #1
 80009f8:	f47f af71 	bne.w	80008de <printf+0x62>
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 80009fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // "%08lx"���� '0', 'l'�� ���� ����.
        long        flagcnt=0;                                        // "%08lx"���� "8"�� ã�Ƽ� long������.
 8000a00:	2200      	movs	r2, #0
 8000a02:	9201      	str	r2, [sp, #4]
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 8000a04:	f108 0a04 	add.w	sl, r8, #4
 8000a08:	f8d8 b000 	ldr.w	fp, [r8]
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f000 80c4 	beq.w	8000b9a <printf+0x31e>
                if (c=='d') break;
 8000a12:	2b64      	cmp	r3, #100	; 0x64
 8000a14:	f000 80c1 	beq.w	8000b9a <printf+0x31e>
 8000a18:	4690      	mov	r8, r2
 8000a1a:	4617      	mov	r7, r2
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a1c:	4691      	mov	r9, r2


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
 8000a1e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000a22:	2a08      	cmp	r2, #8
 8000a24:	d87e      	bhi.n	8000b24 <printf+0x2a8>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a26:	5de3      	ldrb	r3, [r4, r7]
 8000a28:	19e1      	adds	r1, r4, r7
 8000a2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a2e:	2a09      	cmp	r2, #9
 8000a30:	f200 80dc 	bhi.w	8000bec <printf+0x370>
 8000a34:	a805      	add	r0, sp, #20
 8000a36:	4686      	mov	lr, r0
 8000a38:	2200      	movs	r2, #0
                                tol[j] = s[i++];
 8000a3a:	f80e 3b01 	strb.w	r3, [lr], #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                                tol[j] = s[i++];
 8000a42:	3701      	adds	r7, #1

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000a44:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8000a48:	f1bc 0f09 	cmp.w	ip, #9
 8000a4c:	f102 0201 	add.w	r2, r2, #1
 8000a50:	d9f3      	bls.n	8000a3a <printf+0x1be>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a52:	ab08      	add	r3, sp, #32
 8000a54:	441a      	add	r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8000a56:	a901      	add	r1, sp, #4
 8000a58:	4b53      	ldr	r3, [pc, #332]	; (8000ba8 <printf+0x32c>)
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000a5a:	f802 9c0c 	strb.w	r9, [r2, #-12]
                        i--;
 8000a5e:	3f01      	subs	r7, #1
                        DecToLong(tol, &flagcnt);
 8000a60:	4798      	blx	r3
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
        long        divisor, result, remainder;


        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
 8000a62:	3701      	adds	r7, #1
 8000a64:	ab08      	add	r3, sp, #32
 8000a66:	443b      	add	r3, r7
 8000a68:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a6c:	b10b      	cbz	r3, 8000a72 <printf+0x1f6>
                if (c=='d') break;
 8000a6e:	2b64      	cmp	r3, #100	; 0x64
 8000a70:	d1d5      	bne.n	8000a1e <printf+0x1a2>
                else continue;
        }


        // ���� flag�� ���� ���.
        if (flagcnt){
 8000a72:	9801      	ldr	r0, [sp, #4]
 8000a74:	2800      	cmp	r0, #0
 8000a76:	f000 8090 	beq.w	8000b9a <printf+0x31e>
                if (flagcnt>9) flagcnt=9;
 8000a7a:	2809      	cmp	r0, #9
 8000a7c:	f340 80bc 	ble.w	8000bf8 <printf+0x37c>
 8000a80:	2009      	movs	r0, #9
 8000a82:	9001      	str	r0, [sp, #4]
 8000a84:	2206      	movs	r2, #6
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000a86:	2107      	movs	r1, #7


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000a88:	230a      	movs	r3, #10
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000a8a:	3901      	subs	r1, #1
                retval *= num;
 8000a8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000a90:	1c4c      	adds	r4, r1, #1
                retval *= num;
 8000a92:	ea4f 0343 	mov.w	r3, r3, lsl #1
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000a96:	d1f8      	bne.n	8000a8a <printf+0x20e>


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000a98:	fb9b f7f3 	sdiv	r7, fp, r3
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000a9c:	2802      	cmp	r0, #2


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000a9e:	fb03 b717 	mls	r7, r3, r7, fp
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000aa2:	f000 8106 	beq.w	8000cb2 <printf+0x436>
 8000aa6:	4613      	mov	r3, r2


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000aa8:	240a      	movs	r4, #10
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000aaa:	3b01      	subs	r3, #1
                retval *= num;
 8000aac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000ab0:	1c59      	adds	r1, r3, #1
                retval *= num;
 8000ab2:	ea4f 0444 	mov.w	r4, r4, lsl #1
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000ab6:	d1f8      	bne.n	8000aaa <printf+0x22e>
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // "%08lx"���� '0', 'l'�� ���� ����.
        long        flagcnt=0;                                        // "%08lx"���� "8"�� ã�Ƽ� long������.
        bool        leading_zero=true;                        // long���� data�� ����ϱ� ���� ����.
 8000ab8:	4643      	mov	r3, r8
 8000aba:	f04f 0901 	mov.w	r9, #1
 8000abe:	46a8      	mov	r8, r5
 8000ac0:	461d      	mov	r5, r3
 8000ac2:	e010      	b.n	8000ae6 <printf+0x26a>
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000ac4:	2c01      	cmp	r4, #1
 8000ac6:	d016      	beq.n	8000af6 <printf+0x27a>


                        if (leading_zero==true){
 8000ac8:	f1b9 0f00 	cmp.w	r9, #0
 8000acc:	d013      	beq.n	8000af6 <printf+0x27a>
                                if (flag0)        print_byte('0');
 8000ace:	2030      	movs	r0, #48	; 0x30
 8000ad0:	b905      	cbnz	r5, 8000ad4 <printf+0x258>
                                else                print_byte(' ');
 8000ad2:	2020      	movs	r0, #32
 8000ad4:	47b0      	blx	r6
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000ad6:	4b35      	ldr	r3, [pc, #212]	; (8000bac <printf+0x330>)
 8000ad8:	fb83 2304 	smull	r2, r3, r3, r4
 8000adc:	17e4      	asrs	r4, r4, #31
 8000ade:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000ae2:	2c00      	cmp	r4, #0
 8000ae4:	dd7f      	ble.n	8000be6 <printf+0x36a>
                        result = remainder/divisor;
 8000ae6:	fb97 f3f4 	sdiv	r3, r7, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000aea:	b2d8      	uxtb	r0, r3
 8000aec:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000aee:	fb04 7713 	mls	r7, r4, r3, r7


                        if (result!=0 || divisor==1) leading_zero = false;
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0e6      	beq.n	8000ac4 <printf+0x248>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000af6:	47b0      	blx	r6
 8000af8:	f04f 0900 	mov.w	r9, #0
 8000afc:	e7eb      	b.n	8000ad6 <printf+0x25a>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000afe:	47b0      	blx	r6
 8000b00:	e6c5      	b.n	800088e <printf+0x12>
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
                                        break;
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
 8000b02:	f8d8 4000 	ldr.w	r4, [r8]
 8000b06:	f108 0804 	add.w	r8, r8, #4
        }
        return;
}

void PrintString(char *fmt, char *s){
        if (!fmt || !s) return;
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	f43f aebf 	beq.w	800088e <printf+0x12>
        while (*s) print_byte(*s++);
 8000b10:	7820      	ldrb	r0, [r4, #0]
 8000b12:	2800      	cmp	r0, #0
 8000b14:	f43f aebb 	beq.w	800088e <printf+0x12>
 8000b18:	47b0      	blx	r6
 8000b1a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d1fa      	bne.n	8000b18 <printf+0x29c>
 8000b22:	e6b4      	b.n	800088e <printf+0x12>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000b24:	2b30      	cmp	r3, #48	; 0x30
 8000b26:	bf08      	it	eq
 8000b28:	f04f 0801 	moveq.w	r8, #1
 8000b2c:	e799      	b.n	8000a62 <printf+0x1e6>
 8000b2e:	fa9a f38a 	rev.w	r3, sl
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian�� ����.(big�� ����ϱ� ���� ������ �ٲ�)
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	46e9      	mov	r9, sp
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000b36:	f819 3b01 	ldrb.w	r3, [r9], #1
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000b3a:	2201      	movs	r2, #1
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b3c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b40:	091b      	lsrs	r3, r3, #4
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000b42:	f04f 0700 	mov.w	r7, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b46:	d019      	beq.n	8000b7c <printf+0x300>
                        if (uHex<10) uHex+='0';
 8000b48:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 8000b4a:	bf88      	it	hi
 8000b4c:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000b50:	f240 80b7 	bls.w	8000cc2 <printf+0x446>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000b54:	47b0      	blx	r6
 8000b56:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000b58:	b9b4      	cbnz	r4, 8000b88 <printf+0x30c>
 8000b5a:	2f03      	cmp	r7, #3
 8000b5c:	f000 80b4 	beq.w	8000cc8 <printf+0x44c>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80b0 	beq.w	8000cc8 <printf+0x44c>
                        }
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 8000b68:	3701      	adds	r7, #1
 8000b6a:	2f04      	cmp	r7, #4
 8000b6c:	f43f ae8f 	beq.w	800088e <printf+0x12>
                        c = s[i];
 8000b70:	f819 3b01 	ldrb.w	r3, [r9], #1
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000b74:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000b78:	091b      	lsrs	r3, r3, #4
 8000b7a:	d1e5      	bne.n	8000b48 <printf+0x2cc>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f000 80a0 	beq.w	8000cc2 <printf+0x446>
 8000b82:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000b84:	2c00      	cmp	r4, #0
 8000b86:	d0e8      	beq.n	8000b5a <printf+0x2de>
                        if (lHex<10) lHex+='0';
 8000b88:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 8000b8a:	bf88      	it	hi
 8000b8c:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000b90:	f240 809a 	bls.w	8000cc8 <printf+0x44c>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000b94:	47b0      	blx	r6
 8000b96:	2200      	movs	r2, #0
 8000b98:	e7e6      	b.n	8000b68 <printf+0x2ec>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000b9a:	270a      	movs	r7, #10
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4c04      	ldr	r4, [pc, #16]	; (8000bb0 <printf+0x334>)
 8000ba0:	e013      	b.n	8000bca <printf+0x34e>
 8000ba2:	bf00      	nop
 8000ba4:	080007f1 	.word	0x080007f1
 8000ba8:	08000831 	.word	0x08000831
 8000bac:	66666667 	.word	0x66666667
 8000bb0:	3b9aca00 	.word	0x3b9aca00
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000bb4:	47b0      	blx	r6
 8000bb6:	2200      	movs	r2, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 8000bb8:	4b45      	ldr	r3, [pc, #276]	; (8000cd0 <printf+0x454>)
 8000bba:	3f01      	subs	r7, #1
 8000bbc:	fb83 1304 	smull	r1, r3, r3, r4
 8000bc0:	ea4f 74e4 	mov.w	r4, r4, asr #31
 8000bc4:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000bc8:	d00e      	beq.n	8000be8 <printf+0x36c>
                        result = remainder/divisor;
 8000bca:	fb9b f3f4 	sdiv	r3, fp, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000bce:	b2d8      	uxtb	r0, r3
 8000bd0:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000bd2:	fb04 bb13 	mls	fp, r4, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1ec      	bne.n	8000bb4 <printf+0x338>
 8000bda:	2c01      	cmp	r4, #1
 8000bdc:	d0ea      	beq.n	8000bb4 <printf+0x338>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d0e8      	beq.n	8000bb4 <printf+0x338>
 8000be2:	2201      	movs	r2, #1
 8000be4:	e7e8      	b.n	8000bb8 <printf+0x33c>
 8000be6:	4645      	mov	r5, r8
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 8000be8:	46d0      	mov	r8, sl
 8000bea:	e650      	b.n	800088e <printf+0x12>

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000bec:	2200      	movs	r2, #0
 8000bee:	a805      	add	r0, sp, #20
 8000bf0:	e72f      	b.n	8000a52 <printf+0x1d6>

        // fmt�� "%08lx"���� '0', '8', 'l'�� �ؼ�.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	a805      	add	r0, sp, #20
 8000bf6:	e6bd      	b.n	8000974 <printf+0xf8>
int Power(int num, int cnt){
        long retval=num;
        cnt--;


        while (cnt--){
 8000bf8:	2801      	cmp	r0, #1
 8000bfa:	f1a0 0102 	sub.w	r1, r0, #2
 8000bfe:	d04a      	beq.n	8000c96 <printf+0x41a>
 8000c00:	1ec2      	subs	r2, r0, #3
 8000c02:	e741      	b.n	8000a88 <printf+0x20c>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000c04:	f04f 0901 	mov.w	r9, #1
                        flagcnt--;
                }


                // byte������ data�� Hex�� ���.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000c08:	f1c3 0308 	rsb	r3, r3, #8
 8000c0c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000c10:	ea4f 0a63 	mov.w	sl, r3, asr #1
 8000c14:	f1ba 0f03 	cmp.w	sl, #3
 8000c18:	f73f ae39 	bgt.w	800088e <printf+0x12>
 8000c1c:	46ab      	mov	fp, r5
 8000c1e:	44ea      	add	sl, sp
 8000c20:	ac01      	add	r4, sp, #4
                        c = s[i];
 8000c22:	f81a 3b01 	ldrb.w	r3, [sl], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000c26:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	d009      	beq.n	8000c42 <printf+0x3c6>
                        if (uHex<10) uHex+='0';
 8000c2e:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 8000c30:	bf88      	it	hi
 8000c32:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000c36:	d941      	bls.n	8000cbc <printf+0x440>
                        // upper 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 8000c38:	47b0      	blx	r6
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 8000c3a:	b97d      	cbnz	r5, 8000c5c <printf+0x3e0>
                        if (lHex<10) lHex+='0';
 8000c3c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000c40:	e010      	b.n	8000c64 <printf+0x3e8>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits ���.
                        if (leading_zero){
 8000c42:	f1b9 0f00 	cmp.w	r9, #0
 8000c46:	d039      	beq.n	8000cbc <printf+0x440>
                                if (flag0) print_byte('0');
 8000c48:	b187      	cbz	r7, 8000c6c <printf+0x3f0>
 8000c4a:	2030      	movs	r0, #48	; 0x30
 8000c4c:	47b0      	blx	r6
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 8000c4e:	b92d      	cbnz	r5, 8000c5c <printf+0x3e0>
                        else         lHex+='A'-10;


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000c50:	2030      	movs	r0, #48	; 0x30
 8000c52:	47b0      	blx	r6
                        flagcnt--;
                }


                // byte������ data�� Hex�� ���.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000c54:	45a2      	cmp	sl, r4
 8000c56:	d1e4      	bne.n	8000c22 <printf+0x3a6>
 8000c58:	465d      	mov	r5, fp
 8000c5a:	e618      	b.n	800088e <printf+0x12>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000c5c:	2d09      	cmp	r5, #9
 8000c5e:	d9ed      	bls.n	8000c3c <printf+0x3c0>
                        else         lHex+='A'-10;
 8000c60:	f105 0037 	add.w	r0, r5, #55	; 0x37
                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000c64:	47b0      	blx	r6
 8000c66:	f04f 0900 	mov.w	r9, #0
 8000c6a:	e7f3      	b.n	8000c54 <printf+0x3d8>


                        // upper 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 8000c6c:	2020      	movs	r0, #32
 8000c6e:	47b0      	blx	r6
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits�� ascii code��.
                        if (lHex!=0) leading_zero = false;
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d1f3      	bne.n	8000c5c <printf+0x3e0>


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 8000c74:	2020      	movs	r0, #32
 8000c76:	47b0      	blx	r6
 8000c78:	e7ec      	b.n	8000c54 <printf+0x3d8>
                        else         lHex+='A'-10;


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8000c7a:	b13f      	cbz	r7, 8000c8c <printf+0x410>
 8000c7c:	2030      	movs	r0, #48	; 0x30
 8000c7e:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000c80:	f04f 0901 	mov.w	r9, #1
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
                        
                        flagcnt--;
 8000c84:	9b01      	ldr	r3, [sp, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	e7bd      	b.n	8000c08 <printf+0x38c>


                        // lower 4 bits ���.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 8000c8c:	2020      	movs	r0, #32
 8000c8e:	47b0      	blx	r6
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000c90:	f04f 0901 	mov.w	r9, #1
 8000c94:	e7f6      	b.n	8000c84 <printf+0x408>


        // ���� flag�� ���� ���.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt���� ���ڸ��� ���� �ɷ���. 199�� flagcnt==2�̸�, 99��.
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <printf+0x454>)
 8000c98:	fb83 370b 	smull	r3, r7, r3, fp
 8000c9c:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8000ca0:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
 8000ca4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8000ca8:	ebab 0743 	sub.w	r7, fp, r3, lsl #1
 8000cac:	f06f 0301 	mvn.w	r3, #1
 8000cb0:	e6fa      	b.n	8000aa8 <printf+0x22c>
        while (*s) print_byte(*s++);
        return;
}

int Power(int num, int cnt){
        long retval=num;
 8000cb2:	240a      	movs	r4, #10
 8000cb4:	e700      	b.n	8000ab8 <printf+0x23c>
                        c = s[(8-(flagcnt+1))/2]; // Ȧ�� �϶� �� ��ġ�� �����ϴ� ���� ���� ���� �ɴϴ�.
                        
                        // lower 4 bits�� �����ͼ� ascii code��.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8000cb6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000cba:	e689      	b.n	80009d0 <printf+0x154>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits�� ascii code��.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000cbc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000cc0:	e7ba      	b.n	8000c38 <printf+0x3bc>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000cc2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000cc6:	e745      	b.n	8000b54 <printf+0x2d8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000cc8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000ccc:	e762      	b.n	8000b94 <printf+0x318>
 8000cce:	bf00      	nop
 8000cd0:	66666667 	.word	0x66666667

08000cd4 <Hw_1_second>:
{
    for(;time >0;time--);
}

UTIL_DEF void Hw_1_second()
{
 8000cd4:	4b01      	ldr	r3, [pc, #4]	; (8000cdc <Hw_1_second+0x8>)
#include "Util.h"


UTIL_DEF void Hw_second(volatile unsigned int time)
{
    for(;time >0;time--);
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	d1fd      	bne.n	8000cd6 <Hw_1_second+0x2>
}

UTIL_DEF void Hw_1_second()
{
    Hw_second(8065960);
 8000cda:	4770      	bx	lr
 8000cdc:	007b13a8 	.word	0x007b13a8

08000ce0 <DELAY_Test>:

  while(TimingDelay != 0);
}

void DELAY_Test(void)
{
 8000ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce4:	4c09      	ldr	r4, [pc, #36]	; (8000d0c <DELAY_Test+0x2c>)
 8000ce6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8000d14 <DELAY_Test+0x34>
 8000cea:	2532      	movs	r5, #50	; 0x32
 8000cec:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  }
}

void Delay(__IO uint32_t nTime)
{ 
  TimingDelay = nTime;
 8000cf0:	6027      	str	r7, [r4, #0]

  while(TimingDelay != 0);
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1fc      	bne.n	8000cf2 <DELAY_Test+0x12>
    uint32_t i;

    for(i=0; i<50; i++)
    {
        delay_1_second();
        printf("DELAY_Test ... !!\n");
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <DELAY_Test+0x30>)
 8000cfa:	47c0      	blx	r8

void DELAY_Test(void)
{
    uint32_t i;

    for(i=0; i<50; i++)
 8000cfc:	3d01      	subs	r5, #1
    {
        delay_1_second();
        printf("DELAY_Test ... !!\n");
 8000cfe:	4e05      	ldr	r6, [pc, #20]	; (8000d14 <DELAY_Test+0x34>)

void DELAY_Test(void)
{
    uint32_t i;

    for(i=0; i<50; i++)
 8000d00:	d1f6      	bne.n	8000cf0 <DELAY_Test+0x10>
    {
        delay_1_second();
        printf("DELAY_Test ... !!\n");
    }

    printf("DELAY_Test done !!\n");
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <DELAY_Test+0x38>)
 8000d04:	47b0      	blx	r6
 8000d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000001c 	.word	0x2000001c
 8000d10:	08001328 	.word	0x08001328
 8000d14:	0800087d 	.word	0x0800087d
 8000d18:	0800133c 	.word	0x0800133c

08000d1c <Seg_main_menu>:
            }
    }
    return 0;
}
SEG_MENU_DEF int Seg_main_menu(void)
{
 8000d1c:	b570      	push	{r4, r5, r6, lr}
    int key;
    
        printf("\n\n");
 8000d1e:	4e1a      	ldr	r6, [pc, #104]	; (8000d88 <Seg_main_menu+0x6c>)
        printf("-------------------------------------------------\n");
 8000d20:	4d1a      	ldr	r5, [pc, #104]	; (8000d8c <Seg_main_menu+0x70>)
}
SEG_MENU_DEF int Seg_main_menu(void)
{
    int key;
    
        printf("\n\n");
 8000d22:	4c1b      	ldr	r4, [pc, #108]	; (8000d90 <Seg_main_menu+0x74>)
 8000d24:	4630      	mov	r0, r6
 8000d26:	47a0      	blx	r4
        printf("-------------------------------------------------\n");
 8000d28:	4628      	mov	r0, r5
 8000d2a:	47a0      	blx	r4
        printf("                 SEH MAIN MENU\n");
 8000d2c:	4819      	ldr	r0, [pc, #100]	; (8000d94 <Seg_main_menu+0x78>)
 8000d2e:	47a0      	blx	r4
        printf("-------------------------------------------------\n");
 8000d30:	4628      	mov	r0, r5
 8000d32:	47a0      	blx	r4
        printf(" 1. PowerOn_7_SEG                                         \n");
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <Seg_main_menu+0x7c>)
 8000d36:	47a0      	blx	r4
        printf(" 2. PowerOff_7_SEG                                         \n");
 8000d38:	4818      	ldr	r0, [pc, #96]	; (8000d9c <Seg_main_menu+0x80>)
 8000d3a:	47a0      	blx	r4
        printf(" 3. SEG 1                                         \n");
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <Seg_main_menu+0x84>)
 8000d3e:	47a0      	blx	r4
        printf(" 4. SEG 2                                        \n");
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <Seg_main_menu+0x88>)
 8000d42:	47a0      	blx	r4
        printf(" 5. SEG 3                                        \n");
 8000d44:	4818      	ldr	r0, [pc, #96]	; (8000da8 <Seg_main_menu+0x8c>)
 8000d46:	47a0      	blx	r4
        printf(" 6. SEG 4                                        \n");
 8000d48:	4818      	ldr	r0, [pc, #96]	; (8000dac <Seg_main_menu+0x90>)
 8000d4a:	47a0      	blx	r4
        printf(" 7. SEG 5                                        \n");
 8000d4c:	4818      	ldr	r0, [pc, #96]	; (8000db0 <Seg_main_menu+0x94>)
 8000d4e:	47a0      	blx	r4
        printf(" 8. SEG 6                                        \n");
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <Seg_main_menu+0x98>)
 8000d52:	47a0      	blx	r4
        printf(" 9. SEG 7                                        \n");
 8000d54:	4818      	ldr	r0, [pc, #96]	; (8000db8 <Seg_main_menu+0x9c>)
 8000d56:	47a0      	blx	r4
        printf(" 0. SEG 8                                        \n");
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <Seg_main_menu+0xa0>)
 8000d5a:	47a0      	blx	r4
        printf(" a. SEG 9                                        \n");
 8000d5c:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <Seg_main_menu+0xa4>)
 8000d5e:	47a0      	blx	r4
        printf(" b. SEG 0                                        \n");
 8000d60:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <Seg_main_menu+0xa8>)
 8000d62:	47a0      	blx	r4
        printf(" c. On_7_SEG_AllPin                                        \n");
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <Seg_main_menu+0xac>)
 8000d66:	47a0      	blx	r4
        printf(" d. Off_7_SEG_AllPin                                        \n");
 8000d68:	4818      	ldr	r0, [pc, #96]	; (8000dcc <Seg_main_menu+0xb0>)
 8000d6a:	47a0      	blx	r4
        printf("-------------------------------------------------\n");
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	47a0      	blx	r4
        printf(" q. LED Menu QUIT\n");
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <Seg_main_menu+0xb4>)
 8000d72:	47a0      	blx	r4
        printf("-------------------------------------------------\n");
 8000d74:	4628      	mov	r0, r5
 8000d76:	47a0      	blx	r4
        printf("\n\n");
 8000d78:	4630      	mov	r0, r6
 8000d7a:	47a0      	blx	r4
        char a = '1';
        printf("SELECT THE COMMAND NUMBER : \n");
 8000d7c:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <Seg_main_menu+0xb8>)
 8000d7e:	47a0      	blx	r4
        key=get_byte();
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <Seg_main_menu+0xbc>)
 8000d82:	4798      	blx	r3

        return key;
}
 8000d84:	bd70      	pop	{r4, r5, r6, pc}
 8000d86:	bf00      	nop
 8000d88:	08001350 	.word	0x08001350
 8000d8c:	08001354 	.word	0x08001354
 8000d90:	0800087d 	.word	0x0800087d
 8000d94:	08001388 	.word	0x08001388
 8000d98:	080013a8 	.word	0x080013a8
 8000d9c:	080013e4 	.word	0x080013e4
 8000da0:	08001424 	.word	0x08001424
 8000da4:	08001458 	.word	0x08001458
 8000da8:	0800148c 	.word	0x0800148c
 8000dac:	080014c0 	.word	0x080014c0
 8000db0:	080014f4 	.word	0x080014f4
 8000db4:	08001528 	.word	0x08001528
 8000db8:	0800155c 	.word	0x0800155c
 8000dbc:	08001590 	.word	0x08001590
 8000dc0:	080015c4 	.word	0x080015c4
 8000dc4:	080015f8 	.word	0x080015f8
 8000dc8:	0800162c 	.word	0x0800162c
 8000dcc:	0800166c 	.word	0x0800166c
 8000dd0:	080016ac 	.word	0x080016ac
 8000dd4:	080016c0 	.word	0x080016c0
 8000dd8:	08000819 	.word	0x08000819

08000ddc <Seg_Main>:




SEG_MENU_DEF int Seg_Main(void)
{
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int key;

    while((key = Seg_main_menu()) != 0)
    {
        printf("key : %d\n", key);
 8000dde:	4d84      	ldr	r5, [pc, #528]	; (8000ff0 <Seg_Main+0x214>)
 8000de0:	4e84      	ldr	r6, [pc, #528]	; (8000ff4 <Seg_Main+0x218>)
 8000de2:	462f      	mov	r7, r5

SEG_MENU_DEF int Seg_Main(void)
{
    int key;

    while((key = Seg_main_menu()) != 0)
 8000de4:	47b0      	blx	r6
 8000de6:	4604      	mov	r4, r0
 8000de8:	2800      	cmp	r0, #0
 8000dea:	f000 808d 	beq.w	8000f08 <Seg_Main+0x12c>
    {
        printf("key : %d\n", key);
 8000dee:	4621      	mov	r1, r4
 8000df0:	4881      	ldr	r0, [pc, #516]	; (8000ff8 <Seg_Main+0x21c>)
            switch(key)
 8000df2:	3c30      	subs	r4, #48	; 0x30
{
    int key;

    while((key = Seg_main_menu()) != 0)
    {
        printf("key : %d\n", key);
 8000df4:	47a8      	blx	r5
            switch(key)
 8000df6:	2c41      	cmp	r4, #65	; 0x41
 8000df8:	d8f4      	bhi.n	8000de4 <Seg_Main+0x8>
 8000dfa:	a301      	add	r3, pc, #4	; (adr r3, 8000e00 <Seg_Main+0x24>)
 8000dfc:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8000e00:	08000fe3 	.word	0x08000fe3
 8000e04:	08000fd5 	.word	0x08000fd5
 8000e08:	08000fc7 	.word	0x08000fc7
 8000e0c:	08000fbb 	.word	0x08000fbb
 8000e10:	08000faf 	.word	0x08000faf
 8000e14:	08000fa3 	.word	0x08000fa3
 8000e18:	08000f97 	.word	0x08000f97
 8000e1c:	08000f8b 	.word	0x08000f8b
 8000e20:	08000f7f 	.word	0x08000f7f
 8000e24:	08000f73 	.word	0x08000f73
 8000e28:	08000de5 	.word	0x08000de5
 8000e2c:	08000de5 	.word	0x08000de5
 8000e30:	08000de5 	.word	0x08000de5
 8000e34:	08000de5 	.word	0x08000de5
 8000e38:	08000de5 	.word	0x08000de5
 8000e3c:	08000de5 	.word	0x08000de5
 8000e40:	08000de5 	.word	0x08000de5
 8000e44:	08000de5 	.word	0x08000de5
 8000e48:	08000de5 	.word	0x08000de5
 8000e4c:	08000de5 	.word	0x08000de5
 8000e50:	08000de5 	.word	0x08000de5
 8000e54:	08000de5 	.word	0x08000de5
 8000e58:	08000de5 	.word	0x08000de5
 8000e5c:	08000de5 	.word	0x08000de5
 8000e60:	08000de5 	.word	0x08000de5
 8000e64:	08000de5 	.word	0x08000de5
 8000e68:	08000de5 	.word	0x08000de5
 8000e6c:	08000de5 	.word	0x08000de5
 8000e70:	08000de5 	.word	0x08000de5
 8000e74:	08000de5 	.word	0x08000de5
 8000e78:	08000de5 	.word	0x08000de5
 8000e7c:	08000de5 	.word	0x08000de5
 8000e80:	08000de5 	.word	0x08000de5
 8000e84:	08000de5 	.word	0x08000de5
 8000e88:	08000de5 	.word	0x08000de5
 8000e8c:	08000de5 	.word	0x08000de5
 8000e90:	08000de5 	.word	0x08000de5
 8000e94:	08000de5 	.word	0x08000de5
 8000e98:	08000de5 	.word	0x08000de5
 8000e9c:	08000de5 	.word	0x08000de5
 8000ea0:	08000de5 	.word	0x08000de5
 8000ea4:	08000de5 	.word	0x08000de5
 8000ea8:	08000de5 	.word	0x08000de5
 8000eac:	08000de5 	.word	0x08000de5
 8000eb0:	08000de5 	.word	0x08000de5
 8000eb4:	08000de5 	.word	0x08000de5
 8000eb8:	08000de5 	.word	0x08000de5
 8000ebc:	08000de5 	.word	0x08000de5
 8000ec0:	08000de5 	.word	0x08000de5
 8000ec4:	08000f67 	.word	0x08000f67
 8000ec8:	08000f5b 	.word	0x08000f5b
 8000ecc:	08000f51 	.word	0x08000f51
 8000ed0:	08000f47 	.word	0x08000f47
 8000ed4:	08000f3d 	.word	0x08000f3d
 8000ed8:	08000f33 	.word	0x08000f33
 8000edc:	08000f29 	.word	0x08000f29
 8000ee0:	08000f1f 	.word	0x08000f1f
 8000ee4:	08000f19 	.word	0x08000f19
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	08000f0d 	.word	0x08000f0d
 8000ef0:	08000de5 	.word	0x08000de5
 8000ef4:	08000de5 	.word	0x08000de5
 8000ef8:	08000de5 	.word	0x08000de5
 8000efc:	08000de5 	.word	0x08000de5
 8000f00:	08000de5 	.word	0x08000de5
 8000f04:	08000f09 	.word	0x08000f09
                case 'q':
                    return 0;
            }
    }
    return 0;
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    printf("No.j\n");
    
                break;
    
                case 'k':
                    printf("No.k\n");
 8000f0c:	483b      	ldr	r0, [pc, #236]	; (8000ffc <Seg_Main+0x220>)
 8000f0e:	47b8      	blx	r7
    
                break;
 8000f10:	e768      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.i\n");
    
                break;
    
                case 'j':
                    printf("No.j\n");
 8000f12:	483b      	ldr	r0, [pc, #236]	; (8001000 <Seg_Main+0x224>)
 8000f14:	47b8      	blx	r7
    
                break;
 8000f16:	e765      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.h\n");
                    DELAY_Test();
                break;
    
                case 'i':
                    printf("No.i\n");
 8000f18:	483a      	ldr	r0, [pc, #232]	; (8001004 <Seg_Main+0x228>)
 8000f1a:	47b8      	blx	r7
    
                break;
 8000f1c:	e762      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.g\n");
                    Led_Test();
                break;
    
                case 'h':
                    printf("No.h\n");
 8000f1e:	483a      	ldr	r0, [pc, #232]	; (8001008 <Seg_Main+0x22c>)
 8000f20:	47b8      	blx	r7
                    DELAY_Test();
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <Seg_Main+0x230>)
 8000f24:	4798      	blx	r3
                break;
 8000f26:	e75d      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.f\n");
                    System_Information();
                break;
    
                case 'g':
                    printf("No.g\n");
 8000f28:	4839      	ldr	r0, [pc, #228]	; (8001010 <Seg_Main+0x234>)
 8000f2a:	47b8      	blx	r7
                    Led_Test();
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <Seg_Main+0x238>)
 8000f2e:	4798      	blx	r3
                break;
 8000f30:	e758      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.e\n");
                     Seven_Segment_Test();
                break;
    
                case 'f':
                    printf("No.f\n");
 8000f32:	4839      	ldr	r0, [pc, #228]	; (8001018 <Seg_Main+0x23c>)
 8000f34:	47b8      	blx	r7
                    System_Information();
 8000f36:	4b39      	ldr	r3, [pc, #228]	; (800101c <Seg_Main+0x240>)
 8000f38:	4798      	blx	r3
                break;
 8000f3a:	e753      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.d\n");
                     Off_7_SEG_AllPin();
                break;
    
                case 'e':
                    printf("No.e\n");
 8000f3c:	4838      	ldr	r0, [pc, #224]	; (8001020 <Seg_Main+0x244>)
 8000f3e:	47b8      	blx	r7
                     Seven_Segment_Test();
 8000f40:	4b38      	ldr	r3, [pc, #224]	; (8001024 <Seg_Main+0x248>)
 8000f42:	4798      	blx	r3
                break;
 8000f44:	e74e      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.c\n");
                     On_7_SEG_AllPin();
                break;
    
                case 'd':
                    printf("No.d\n");
 8000f46:	4838      	ldr	r0, [pc, #224]	; (8001028 <Seg_Main+0x24c>)
 8000f48:	47b8      	blx	r7
                     Off_7_SEG_AllPin();
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <Seg_Main+0x250>)
 8000f4c:	4798      	blx	r3
                break;
 8000f4e:	e749      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.b\n");
                     OutPut_7_SEG_Number(0);
                break;
    
                case 'c':
                    printf("No.c\n");
 8000f50:	4837      	ldr	r0, [pc, #220]	; (8001030 <Seg_Main+0x254>)
 8000f52:	47b8      	blx	r7
                     On_7_SEG_AllPin();
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <Seg_Main+0x258>)
 8000f56:	4798      	blx	r3
                break;
 8000f58:	e744      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.a\n");
                     OutPut_7_SEG_Number(9);
                break;
    
                case 'b':
                    printf("No.b\n");
 8000f5a:	4837      	ldr	r0, [pc, #220]	; (8001038 <Seg_Main+0x25c>)
 8000f5c:	47b8      	blx	r7
                     OutPut_7_SEG_Number(0);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	4b36      	ldr	r3, [pc, #216]	; (800103c <Seg_Main+0x260>)
 8000f62:	4798      	blx	r3
                break;
 8000f64:	e73e      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.0\n");
                     OutPut_7_SEG_Number(8);
                break;
    
                case 'a':
                    printf("No.a\n");
 8000f66:	4836      	ldr	r0, [pc, #216]	; (8001040 <Seg_Main+0x264>)
 8000f68:	47b8      	blx	r7
                     OutPut_7_SEG_Number(9);
 8000f6a:	2009      	movs	r0, #9
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <Seg_Main+0x260>)
 8000f6e:	4798      	blx	r3
                break;
 8000f70:	e738      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.8\n");
                     OutPut_7_SEG_Number(6);
                break;
    
                case '9':
                    printf("No.9\n");
 8000f72:	4834      	ldr	r0, [pc, #208]	; (8001044 <Seg_Main+0x268>)
 8000f74:	47b8      	blx	r7
                     OutPut_7_SEG_Number(7);
 8000f76:	2007      	movs	r0, #7
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <Seg_Main+0x260>)
 8000f7a:	4798      	blx	r3
                break;
 8000f7c:	e732      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.7\n");
                     OutPut_7_SEG_Number(5);
                break;
    
                case '8':
                    printf("No.8\n");
 8000f7e:	4832      	ldr	r0, [pc, #200]	; (8001048 <Seg_Main+0x26c>)
 8000f80:	47b8      	blx	r7
                     OutPut_7_SEG_Number(6);
 8000f82:	2006      	movs	r0, #6
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <Seg_Main+0x260>)
 8000f86:	4798      	blx	r3
                break;
 8000f88:	e72c      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.6\n");
                     OutPut_7_SEG_Number(4);
                break;
    
                case '7':
                    printf("No.7\n");
 8000f8a:	4830      	ldr	r0, [pc, #192]	; (800104c <Seg_Main+0x270>)
 8000f8c:	47b8      	blx	r7
                     OutPut_7_SEG_Number(5);
 8000f8e:	2005      	movs	r0, #5
 8000f90:	4b2a      	ldr	r3, [pc, #168]	; (800103c <Seg_Main+0x260>)
 8000f92:	4798      	blx	r3
                break;
 8000f94:	e726      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.5\n");
                     OutPut_7_SEG_Number(3);
                break;
    
                case '6':
                    printf("No.6\n");
 8000f96:	482e      	ldr	r0, [pc, #184]	; (8001050 <Seg_Main+0x274>)
 8000f98:	47b8      	blx	r7
                     OutPut_7_SEG_Number(4);
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <Seg_Main+0x260>)
 8000f9e:	4798      	blx	r3
                break;
 8000fa0:	e720      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.4\n");
                     OutPut_7_SEG_Number(2);
                break;
                  
                case '5':
                    printf("No.5\n");
 8000fa2:	482c      	ldr	r0, [pc, #176]	; (8001054 <Seg_Main+0x278>)
 8000fa4:	47b8      	blx	r7
                     OutPut_7_SEG_Number(3);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <Seg_Main+0x260>)
 8000faa:	4798      	blx	r3
                break;
 8000fac:	e71a      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.3\n");
                     OutPut_7_SEG_Number(1);
                break;
    
                case '4':
                    printf("No.4\n");
 8000fae:	482a      	ldr	r0, [pc, #168]	; (8001058 <Seg_Main+0x27c>)
 8000fb0:	47b8      	blx	r7
                     OutPut_7_SEG_Number(2);
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <Seg_Main+0x260>)
 8000fb6:	4798      	blx	r3
                break;
 8000fb8:	e714      	b.n	8000de4 <Seg_Main+0x8>
                    printf("PowerOff_7_SEG");
                     PowerOff_7_SEG();
                break;
                
                case '3':
                    printf("No.3\n");
 8000fba:	4828      	ldr	r0, [pc, #160]	; (800105c <Seg_Main+0x280>)
 8000fbc:	47b8      	blx	r7
                     OutPut_7_SEG_Number(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <Seg_Main+0x260>)
 8000fc2:	4798      	blx	r3
                break;
 8000fc4:	e70e      	b.n	8000de4 <Seg_Main+0x8>
                    printf("PowerOn_7_SEG");
                    PowerOn_7_SEG();
                break;
    
                case '2':
                    printf("No.2\n");
 8000fc6:	4826      	ldr	r0, [pc, #152]	; (8001060 <Seg_Main+0x284>)
 8000fc8:	47b8      	blx	r7
                    printf("PowerOff_7_SEG");
 8000fca:	4826      	ldr	r0, [pc, #152]	; (8001064 <Seg_Main+0x288>)
 8000fcc:	47b8      	blx	r7
                     PowerOff_7_SEG();
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <Seg_Main+0x28c>)
 8000fd0:	4798      	blx	r3
                break;
 8000fd2:	e707      	b.n	8000de4 <Seg_Main+0x8>
    {
        printf("key : %d\n", key);
            switch(key)
            {
                case '1':
                    printf("No.1\n");
 8000fd4:	4825      	ldr	r0, [pc, #148]	; (800106c <Seg_Main+0x290>)
 8000fd6:	47b8      	blx	r7
                    printf("PowerOn_7_SEG");
 8000fd8:	4825      	ldr	r0, [pc, #148]	; (8001070 <Seg_Main+0x294>)
 8000fda:	47b8      	blx	r7
                    PowerOn_7_SEG();
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <Seg_Main+0x298>)
 8000fde:	4798      	blx	r3
                break;
 8000fe0:	e700      	b.n	8000de4 <Seg_Main+0x8>
                    printf("No.9\n");
                     OutPut_7_SEG_Number(7);
                break;
    
                case '0':
                    printf("No.0\n");
 8000fe2:	4825      	ldr	r0, [pc, #148]	; (8001078 <Seg_Main+0x29c>)
 8000fe4:	47b8      	blx	r7
                     OutPut_7_SEG_Number(8);
 8000fe6:	2008      	movs	r0, #8
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <Seg_Main+0x260>)
 8000fea:	4798      	blx	r3
                break;
 8000fec:	e6fa      	b.n	8000de4 <Seg_Main+0x8>
 8000fee:	bf00      	nop
 8000ff0:	0800087d 	.word	0x0800087d
 8000ff4:	08000d1d 	.word	0x08000d1d
 8000ff8:	080016e0 	.word	0x080016e0
 8000ffc:	080017ac 	.word	0x080017ac
 8001000:	080017a4 	.word	0x080017a4
 8001004:	0800179c 	.word	0x0800179c
 8001008:	08001794 	.word	0x08001794
 800100c:	08000ce1 	.word	0x08000ce1
 8001010:	0800178c 	.word	0x0800178c
 8001014:	08000625 	.word	0x08000625
 8001018:	08001784 	.word	0x08001784
 800101c:	0800124d 	.word	0x0800124d
 8001020:	0800177c 	.word	0x0800177c
 8001024:	08000729 	.word	0x08000729
 8001028:	08001774 	.word	0x08001774
 800102c:	08000681 	.word	0x08000681
 8001030:	0800176c 	.word	0x0800176c
 8001034:	08000671 	.word	0x08000671
 8001038:	08001764 	.word	0x08001764
 800103c:	08000691 	.word	0x08000691
 8001040:	0800175c 	.word	0x0800175c
 8001044:	0800174c 	.word	0x0800174c
 8001048:	08001744 	.word	0x08001744
 800104c:	0800173c 	.word	0x0800173c
 8001050:	08001734 	.word	0x08001734
 8001054:	0800172c 	.word	0x0800172c
 8001058:	08001724 	.word	0x08001724
 800105c:	0800171c 	.word	0x0800171c
 8001060:	08001704 	.word	0x08001704
 8001064:	0800170c 	.word	0x0800170c
 8001068:	08000661 	.word	0x08000661
 800106c:	080016ec 	.word	0x080016ec
 8001070:	080016f4 	.word	0x080016f4
 8001074:	08000651 	.word	0x08000651
 8001078:	08001754 	.word	0x08001754

0800107c <SysTick_Handler>:
}


void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <SysTick_Handler+0x10>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	b112      	cbz	r2, 8001088 <SysTick_Handler+0xc>
  { 
    TimingDelay--;
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	3a01      	subs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000001c 	.word	0x2000001c

08001090 <Rcc_GetClocksFreq>:

CLOCK_DEF void Rcc_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks);
CLOCK_DEF void System_Information();

CLOCK_DEF void Rcc_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

    
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001094:	4f4f      	ldr	r7, [pc, #316]	; (80011d4 <Rcc_GetClocksFreq+0x144>)

CLOCK_DEF void Rcc_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks);
CLOCK_DEF void System_Information();

CLOCK_DEF void Rcc_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001096:	4605      	mov	r5, r0
    uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

    
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001098:	687e      	ldr	r6, [r7, #4]
  printf("tmp :::: %d\n", tmp);
 800109a:	484f      	ldr	r0, [pc, #316]	; (80011d8 <Rcc_GetClocksFreq+0x148>)
    uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

    
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800109c:	f006 060c 	and.w	r6, r6, #12
  printf("tmp :::: %d\n", tmp);
 80010a0:	4631      	mov	r1, r6
 80010a2:	4c4e      	ldr	r4, [pc, #312]	; (80011dc <Rcc_GetClocksFreq+0x14c>)
 80010a4:	47a0      	blx	r4
  switch (tmp)
 80010a6:	2e04      	cmp	r6, #4
 80010a8:	f000 8088 	beq.w	80011bc <Rcc_GetClocksFreq+0x12c>
 80010ac:	2e08      	cmp	r6, #8
 80010ae:	d066      	beq.n	800117e <Rcc_GetClocksFreq+0xee>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80010b0:	494b      	ldr	r1, [pc, #300]	; (80011e0 <Rcc_GetClocksFreq+0x150>)
    
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
  printf("tmp :::: %d\n", tmp);
  switch (tmp)
 80010b2:	2e00      	cmp	r6, #0
 80010b4:	d05f      	beq.n	8001176 <Rcc_GetClocksFreq+0xe6>
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      printf("HSI_Value : %d\n", HSI_Value);
 80010b6:	484b      	ldr	r0, [pc, #300]	; (80011e4 <Rcc_GetClocksFreq+0x154>)
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80010b8:	6029      	str	r1, [r5, #0]
      printf("HSI_Value : %d\n", HSI_Value);
 80010ba:	47a0      	blx	r4
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80010bc:	4f45      	ldr	r7, [pc, #276]	; (80011d4 <Rcc_GetClocksFreq+0x144>)
  printf("tmp HCLK : %d\n", tmp);
 80010be:	484a      	ldr	r0, [pc, #296]	; (80011e8 <Rcc_GetClocksFreq+0x158>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80010c0:	6879      	ldr	r1, [r7, #4]
  printf("tmp HCLK : %d\n", tmp);
  tmp = tmp >> 4;
  printf("HCLK tmp  : %d\n", tmp);
  printf("HCLK_Frequency tmp : %08x\n", tmp);
  presc = APBAHBPrescTable[tmp];
 80010c2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001248 <Rcc_GetClocksFreq+0x1b8>
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80010c6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
  printf("tmp HCLK : %d\n", tmp);
  tmp = tmp >> 4;
 80010ca:	090e      	lsrs	r6, r1, #4
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  printf("tmp HCLK : %d\n", tmp);
 80010cc:	47a0      	blx	r4
  tmp = tmp >> 4;
  printf("HCLK tmp  : %d\n", tmp);
 80010ce:	4631      	mov	r1, r6
 80010d0:	4846      	ldr	r0, [pc, #280]	; (80011ec <Rcc_GetClocksFreq+0x15c>)
 80010d2:	47a0      	blx	r4
  printf("HCLK_Frequency tmp : %08x\n", tmp);
 80010d4:	4631      	mov	r1, r6
 80010d6:	4846      	ldr	r0, [pc, #280]	; (80011f0 <Rcc_GetClocksFreq+0x160>)
 80010d8:	47a0      	blx	r4
  presc = APBAHBPrescTable[tmp];
 80010da:	f818 6006 	ldrb.w	r6, [r8, r6]
  printf("HCLK_Frequency presc : %08x\n", presc);
 80010de:	4845      	ldr	r0, [pc, #276]	; (80011f4 <Rcc_GetClocksFreq+0x164>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  printf("tmp HCLK : %d\n", tmp);
  tmp = tmp >> 4;
  printf("HCLK tmp  : %d\n", tmp);
  printf("HCLK_Frequency tmp : %08x\n", tmp);
  presc = APBAHBPrescTable[tmp];
 80010e0:	b2f6      	uxtb	r6, r6
  printf("HCLK_Frequency presc : %08x\n", presc);
 80010e2:	4631      	mov	r1, r6
 80010e4:	47a0      	blx	r4
  printf("HCLK_Frequency presc : %d\n",presc);
 80010e6:	4631      	mov	r1, r6
 80010e8:	4843      	ldr	r0, [pc, #268]	; (80011f8 <Rcc_GetClocksFreq+0x168>)
 80010ea:	47a0      	blx	r4
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80010ec:	682b      	ldr	r3, [r5, #0]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
  printf(" tmp PCLK1_Frequency : %d\n", tmp);
 80010ee:	4843      	ldr	r0, [pc, #268]	; (80011fc <Rcc_GetClocksFreq+0x16c>)
  printf("HCLK_Frequency tmp : %08x\n", tmp);
  presc = APBAHBPrescTable[tmp];
  printf("HCLK_Frequency presc : %08x\n", presc);
  printf("HCLK_Frequency presc : %d\n",presc);
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80010f0:	40f3      	lsrs	r3, r6
 80010f2:	606b      	str	r3, [r5, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  printf(" tmp PCLK1_Frequency : %d\n", tmp);
  tmp = tmp >> 8;
 80010fa:	0a0e      	lsrs	r6, r1, #8
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
  printf(" tmp PCLK1_Frequency : %d\n", tmp);
 80010fc:	47a0      	blx	r4
  tmp = tmp >> 8;
  printf("PCLK1_Frequency tmp  : %d\n", tmp);
 80010fe:	4631      	mov	r1, r6
 8001100:	483f      	ldr	r0, [pc, #252]	; (8001200 <Rcc_GetClocksFreq+0x170>)
 8001102:	47a0      	blx	r4
  presc = APBAHBPrescTable[tmp];
 8001104:	f818 6006 	ldrb.w	r6, [r8, r6]
  printf("PCLK1_Frequency presc : %08x\n", presc);
 8001108:	483e      	ldr	r0, [pc, #248]	; (8001204 <Rcc_GetClocksFreq+0x174>)
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
  printf(" tmp PCLK1_Frequency : %d\n", tmp);
  tmp = tmp >> 8;
  printf("PCLK1_Frequency tmp  : %d\n", tmp);
  presc = APBAHBPrescTable[tmp];
 800110a:	b2f6      	uxtb	r6, r6
  printf("PCLK1_Frequency presc : %08x\n", presc);
 800110c:	4631      	mov	r1, r6
 800110e:	47a0      	blx	r4
  printf("PCLK1_Frequency presc : %d\n", presc);
 8001110:	4631      	mov	r1, r6
 8001112:	483d      	ldr	r0, [pc, #244]	; (8001208 <Rcc_GetClocksFreq+0x178>)
 8001114:	47a0      	blx	r4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001116:	686b      	ldr	r3, [r5, #4]
  

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  printf(" tmp PCLK1_Frequency : %\d\n", tmp);
 8001118:	4838      	ldr	r0, [pc, #224]	; (80011fc <Rcc_GetClocksFreq+0x16c>)
  printf("PCLK1_Frequency tmp  : %d\n", tmp);
  presc = APBAHBPrescTable[tmp];
  printf("PCLK1_Frequency presc : %08x\n", presc);
  printf("PCLK1_Frequency presc : %d\n", presc);
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800111a:	40f3      	lsrs	r3, r6
 800111c:	60ab      	str	r3, [r5, #8]
  

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f401 5160 	and.w	r1, r1, #14336	; 0x3800
  printf(" tmp PCLK1_Frequency : %\d\n", tmp);
  tmp = tmp >> 11;
 8001124:	0ace      	lsrs	r6, r1, #11
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  printf(" tmp PCLK1_Frequency : %\d\n", tmp);
 8001126:	47a0      	blx	r4
  tmp = tmp >> 11;
  printf("PCLK1_Frequency tmp  : %\d\n", tmp);
 8001128:	4631      	mov	r1, r6
 800112a:	4835      	ldr	r0, [pc, #212]	; (8001200 <Rcc_GetClocksFreq+0x170>)
 800112c:	47a0      	blx	r4
  presc = APBAHBPrescTable[tmp];
 800112e:	f818 6006 	ldrb.w	r6, [r8, r6]
  printf("PCLK2_Frequency presc : %08x\n", presc);
 8001132:	4836      	ldr	r0, [pc, #216]	; (800120c <Rcc_GetClocksFreq+0x17c>)
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  printf(" tmp PCLK1_Frequency : %\d\n", tmp);
  tmp = tmp >> 11;
  printf("PCLK1_Frequency tmp  : %\d\n", tmp);
  presc = APBAHBPrescTable[tmp];
 8001134:	b2f6      	uxtb	r6, r6
  printf("PCLK2_Frequency presc : %08x\n", presc);
 8001136:	4631      	mov	r1, r6
 8001138:	47a0      	blx	r4
  printf("PCLK2_Frequency presc : %d\n", presc);
 800113a:	4631      	mov	r1, r6
 800113c:	4834      	ldr	r0, [pc, #208]	; (8001210 <Rcc_GetClocksFreq+0x180>)
 800113e:	47a0      	blx	r4
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001140:	686b      	ldr	r3, [r5, #4]
  

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  printf(" tmp ADCCLK_Frequency : %d\n", tmp);
 8001142:	4834      	ldr	r0, [pc, #208]	; (8001214 <Rcc_GetClocksFreq+0x184>)
  printf("PCLK1_Frequency tmp  : %\d\n", tmp);
  presc = APBAHBPrescTable[tmp];
  printf("PCLK2_Frequency presc : %08x\n", presc);
  printf("PCLK2_Frequency presc : %d\n", presc);
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001144:	40f3      	lsrs	r3, r6
 8001146:	60eb      	str	r3, [r5, #12]
  

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
  printf(" tmp ADCCLK_Frequency : %d\n", tmp);
  tmp = tmp >> 14;
 800114e:	0b8e      	lsrs	r6, r1, #14
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  printf(" tmp ADCCLK_Frequency : %d\n", tmp);
 8001150:	47a0      	blx	r4
  tmp = tmp >> 14;
  printf("ADCCLK_Frequency tmp : %d\n", tmp);
 8001152:	4631      	mov	r1, r6
 8001154:	4830      	ldr	r0, [pc, #192]	; (8001218 <Rcc_GetClocksFreq+0x188>)
 8001156:	47a0      	blx	r4
  presc = ADCPrescTable[tmp];
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <Rcc_GetClocksFreq+0x18c>)
  printf("ADCCLK_Frequency presc : %08x\n", presc);
 800115a:	4831      	ldr	r0, [pc, #196]	; (8001220 <Rcc_GetClocksFreq+0x190>)
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  printf(" tmp ADCCLK_Frequency : %d\n", tmp);
  tmp = tmp >> 14;
  printf("ADCCLK_Frequency tmp : %d\n", tmp);
  presc = ADCPrescTable[tmp];
 800115c:	5d9e      	ldrb	r6, [r3, r6]
 800115e:	b2f6      	uxtb	r6, r6
  printf("ADCCLK_Frequency presc : %08x\n", presc);
 8001160:	4631      	mov	r1, r6
 8001162:	47a0      	blx	r4
  printf("ADCCLK_Frequency presc : %d\n", presc);
 8001164:	4631      	mov	r1, r6
 8001166:	482f      	ldr	r0, [pc, #188]	; (8001224 <Rcc_GetClocksFreq+0x194>)
 8001168:	47a0      	blx	r4
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800116a:	68eb      	ldr	r3, [r5, #12]
 800116c:	fbb3 f6f6 	udiv	r6, r3, r6
 8001170:	612e      	str	r6, [r5, #16]
 8001172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  printf("tmp :::: %d\n", tmp);
  switch (tmp)
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      printf("HSI_Value :::: %d\n",HSI_Value);
 8001176:	482c      	ldr	r0, [pc, #176]	; (8001228 <Rcc_GetClocksFreq+0x198>)
  tmp = RCC->CFGR & CFGR_SWS_Mask;
  printf("tmp :::: %d\n", tmp);
  switch (tmp)
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8001178:	6029      	str	r1, [r5, #0]
      printf("HSI_Value :::: %d\n",HSI_Value);
 800117a:	47a0      	blx	r4
      break;
 800117c:	e79e      	b.n	80010bc <Rcc_GetClocksFreq+0x2c>
      printf("HSE_VLAUE :::: %d\n",HSE_Value);
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800117e:	687e      	ldr	r6, [r7, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001180:	687b      	ldr	r3, [r7, #4]
      printf("HSE_VLAUE :::: %d\n",HSE_Value);
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001182:	f406 1670 	and.w	r6, r6, #3932160	; 0x3c0000
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001186:	f403 3880 	and.w	r8, r3, #65536	; 0x10000
      printf("pllmull :::: %d\n", pllmull);
 800118a:	4631      	mov	r1, r6
 800118c:	4827      	ldr	r0, [pc, #156]	; (800122c <Rcc_GetClocksFreq+0x19c>)
      printf("pllsource :::: %d\n", pllsource);
      pllmull = ( pllmull >> 18) + 2;
 800118e:	0cb6      	lsrs	r6, r6, #18

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      printf("pllmull :::: %d\n", pllmull);
 8001190:	47a0      	blx	r4
      printf("pllsource :::: %d\n", pllsource);
      pllmull = ( pllmull >> 18) + 2;
 8001192:	3602      	adds	r6, #2
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      printf("pllmull :::: %d\n", pllmull);
      printf("pllsource :::: %d\n", pllsource);
 8001194:	4641      	mov	r1, r8
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <Rcc_GetClocksFreq+0x1a0>)
 8001198:	47a0      	blx	r4
      pllmull = ( pllmull >> 18) + 2;
      printf("pllmull :::: %d\n", pllmull);
 800119a:	4631      	mov	r1, r6
 800119c:	4823      	ldr	r0, [pc, #140]	; (800122c <Rcc_GetClocksFreq+0x19c>)
 800119e:	47a0      	blx	r4
      if (pllsource == 0x00)
 80011a0:	f1b8 0f00 	cmp.w	r8, #0
 80011a4:	d00f      	beq.n	80011c6 <Rcc_GetClocksFreq+0x136>
        printf("SYSCLK_Frequency : %d\n", (HSI_Value >> 1) * pllmull);
        
      }
      else
      {/* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
          printf("SYSCLK_Frequency : %d\n", (HSE_Value >> 1) * pllmull);
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
          printf("SYSCLK_Frequency : %d\n", HSE_Value * pllmull);
 80011a8:	4822      	ldr	r0, [pc, #136]	; (8001234 <Rcc_GetClocksFreq+0x1a4>)
        printf("SYSCLK_Frequency : %d\n", (HSI_Value >> 1) * pllmull);
        
      }
      else
      {/* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80011aa:	039b      	lsls	r3, r3, #14
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 80011ac:	bf4c      	ite	mi
 80011ae:	4922      	ldrmi	r1, [pc, #136]	; (8001238 <Rcc_GetClocksFreq+0x1a8>)
          printf("SYSCLK_Frequency : %d\n", (HSE_Value >> 1) * pllmull);
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 80011b0:	4922      	ldrpl	r1, [pc, #136]	; (800123c <Rcc_GetClocksFreq+0x1ac>)
 80011b2:	fb01 f106 	mul.w	r1, r1, r6
 80011b6:	6029      	str	r1, [r5, #0]
          printf("SYSCLK_Frequency : %d\n", HSE_Value * pllmull);
 80011b8:	47a0      	blx	r4
 80011ba:	e77f      	b.n	80010bc <Rcc_GetClocksFreq+0x2c>
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      printf("HSI_Value :::: %d\n",HSI_Value);
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 80011bc:	491f      	ldr	r1, [pc, #124]	; (800123c <Rcc_GetClocksFreq+0x1ac>)
      printf("HSE_VLAUE :::: %d\n",HSE_Value);
 80011be:	4820      	ldr	r0, [pc, #128]	; (8001240 <Rcc_GetClocksFreq+0x1b0>)
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      printf("HSI_Value :::: %d\n",HSI_Value);
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 80011c0:	6029      	str	r1, [r5, #0]
      printf("HSE_VLAUE :::: %d\n",HSE_Value);
 80011c2:	47a0      	blx	r4
      break;
 80011c4:	e77a      	b.n	80010bc <Rcc_GetClocksFreq+0x2c>
      printf("pllsource :::: %d\n", pllsource);
      pllmull = ( pllmull >> 18) + 2;
      printf("pllmull :::: %d\n", pllmull);
      if (pllsource == 0x00)
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 80011c6:	491f      	ldr	r1, [pc, #124]	; (8001244 <Rcc_GetClocksFreq+0x1b4>)
        printf("SYSCLK_Frequency : %d\n", (HSI_Value >> 1) * pllmull);
 80011c8:	481a      	ldr	r0, [pc, #104]	; (8001234 <Rcc_GetClocksFreq+0x1a4>)
      printf("pllsource :::: %d\n", pllsource);
      pllmull = ( pllmull >> 18) + 2;
      printf("pllmull :::: %d\n", pllmull);
      if (pllsource == 0x00)
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 80011ca:	fb01 f106 	mul.w	r1, r1, r6
 80011ce:	6029      	str	r1, [r5, #0]
        printf("SYSCLK_Frequency : %d\n", (HSI_Value >> 1) * pllmull);
 80011d0:	47a0      	blx	r4
 80011d2:	e773      	b.n	80010bc <Rcc_GetClocksFreq+0x2c>
 80011d4:	40021000 	.word	0x40021000
 80011d8:	080017b4 	.word	0x080017b4
 80011dc:	0800087d 	.word	0x0800087d
 80011e0:	007a1200 	.word	0x007a1200
 80011e4:	0800182c 	.word	0x0800182c
 80011e8:	0800183c 	.word	0x0800183c
 80011ec:	0800184c 	.word	0x0800184c
 80011f0:	0800185c 	.word	0x0800185c
 80011f4:	08001878 	.word	0x08001878
 80011f8:	08001898 	.word	0x08001898
 80011fc:	080018b4 	.word	0x080018b4
 8001200:	080018d0 	.word	0x080018d0
 8001204:	080018ec 	.word	0x080018ec
 8001208:	0800190c 	.word	0x0800190c
 800120c:	08001928 	.word	0x08001928
 8001210:	08001948 	.word	0x08001948
 8001214:	08001964 	.word	0x08001964
 8001218:	08001980 	.word	0x08001980
 800121c:	20000000 	.word	0x20000000
 8001220:	0800199c 	.word	0x0800199c
 8001224:	080019bc 	.word	0x080019bc
 8001228:	080017c4 	.word	0x080017c4
 800122c:	080017ec 	.word	0x080017ec
 8001230:	08001800 	.word	0x08001800
 8001234:	08001814 	.word	0x08001814
 8001238:	005b8d80 	.word	0x005b8d80
 800123c:	00b71b00 	.word	0x00b71b00
 8001240:	080017d8 	.word	0x080017d8
 8001244:	003d0900 	.word	0x003d0900
 8001248:	20000004 	.word	0x20000004

0800124c <System_Information>:
}

extern __IO uint32_t StartUpCouter;

CLOCK_DEF void System_Information()
{
 800124c:	b510      	push	{r4, lr}

    RCC_ClocksTypeDef rcc_clock;
    printf("StartupCounter : %d\n", StartUpCouter);
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <System_Information+0x38>)
}

extern __IO uint32_t StartUpCouter;

CLOCK_DEF void System_Information()
{
 8001250:	b086      	sub	sp, #24

    RCC_ClocksTypeDef rcc_clock;
    printf("StartupCounter : %d\n", StartUpCouter);
 8001252:	4c0d      	ldr	r4, [pc, #52]	; (8001288 <System_Information+0x3c>)
 8001254:	6819      	ldr	r1, [r3, #0]
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <System_Information+0x40>)
 8001258:	47a0      	blx	r4
    Rcc_GetClocksFreq(&rcc_clock);
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <System_Information+0x44>)
 800125c:	a801      	add	r0, sp, #4
 800125e:	4798      	blx	r3
    printf("System clock frequency = %d\n", rcc_clock.SYSCLK_Frequency);
 8001260:	9901      	ldr	r1, [sp, #4]
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <System_Information+0x48>)
 8001264:	47a0      	blx	r4
    printf("HCLK_Freqeuncy : %d\n", rcc_clock.HCLK_Frequency);
 8001266:	9902      	ldr	r1, [sp, #8]
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <System_Information+0x4c>)
 800126a:	47a0      	blx	r4
    printf("PCLK1_Frequency : %d\n", rcc_clock.PCLK1_Frequency);
 800126c:	9903      	ldr	r1, [sp, #12]
 800126e:	480b      	ldr	r0, [pc, #44]	; (800129c <System_Information+0x50>)
 8001270:	47a0      	blx	r4
    printf("PCLK2_Frequency : %d\n", rcc_clock.PCLK2_Frequency);
 8001272:	9904      	ldr	r1, [sp, #16]
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <System_Information+0x54>)
 8001276:	47a0      	blx	r4
    printf("ADCCLK_Frequency : %d\n", rcc_clock.ADCCLK_Frequency);
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <System_Information+0x58>)
 800127a:	9905      	ldr	r1, [sp, #20]
 800127c:	47a0      	blx	r4
 800127e:	b006      	add	sp, #24
 8001280:	bd10      	pop	{r4, pc}
 8001282:	bf00      	nop
 8001284:	20000018 	.word	0x20000018
 8001288:	0800087d 	.word	0x0800087d
 800128c:	080019dc 	.word	0x080019dc
 8001290:	08001091 	.word	0x08001091
 8001294:	080019f4 	.word	0x080019f4
 8001298:	08001a14 	.word	0x08001a14
 800129c:	08001a2c 	.word	0x08001a2c
 80012a0:	08001a44 	.word	0x08001a44
 80012a4:	08001a5c 	.word	0x08001a5c

080012a8 <main>:
#include "main.h"



int main()
{
 80012a8:	b510      	push	{r4, lr}
    
    RCC_ClocksTypeDef  rcc_clocks;

    NVIC_Configuration();
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <main+0x38>)
#include "main.h"



int main()
{
 80012ac:	b086      	sub	sp, #24
    
    RCC_ClocksTypeDef  rcc_clocks;

    NVIC_Configuration();
 80012ae:	4798      	blx	r3
    Hw_Init();
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <main+0x3c>)
 80012b2:	4798      	blx	r3

    /* Setup SysTick Timer for 1 msec interrupts  */
    if (SysTick_Config(rcc_clocks.SYSCLK_Frequency / 1000))
 80012b4:	9b01      	ldr	r3, [sp, #4]
 80012b6:	490c      	ldr	r1, [pc, #48]	; (80012e8 <main+0x40>)
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <main+0x44>)
 80012ba:	fba1 3003 	umull	r3, r0, r1, r3
 80012be:	0980      	lsrs	r0, r0, #6
 80012c0:	4790      	blx	r2
 80012c2:	4604      	mov	r4, r0
 80012c4:	b130      	cbz	r0, 80012d4 <main+0x2c>
    {   
        Rcc_GetClocksFreq(&rcc_clocks);
 80012c6:	a801      	add	r0, sp, #4
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <main+0x48>)
 80012ca:	4798      	blx	r3
        printf("systick config error !!\n");
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <main+0x4c>)
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <main+0x50>)
 80012d0:	4798      	blx	r3
        /* Capture error */ 
        while (1);
 80012d2:	e7fe      	b.n	80012d2 <main+0x2a>
    }
    Seg_Main();
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <main+0x54>)
 80012d6:	4798      	blx	r3
    
 80012d8:	4620      	mov	r0, r4
 80012da:	b006      	add	sp, #24
 80012dc:	bd10      	pop	{r4, pc}
 80012de:	bf00      	nop
 80012e0:	080004e1 	.word	0x080004e1
 80012e4:	080002fd 	.word	0x080002fd
 80012e8:	10624dd3 	.word	0x10624dd3
 80012ec:	0800056d 	.word	0x0800056d
 80012f0:	08001091 	.word	0x08001091
 80012f4:	08001a74 	.word	0x08001a74
 80012f8:	0800087d 	.word	0x0800087d
 80012fc:	08000ddd 	.word	0x08000ddd
 8001300:	4349564e 	.word	0x4349564e
 8001304:	6e756620 	.word	0x6e756620
 8001308:	6f697463 	.word	0x6f697463
 800130c:	7473206e 	.word	0x7473206e
 8001310:	00747261 	.word	0x00747261
 8001314:	65766553 	.word	0x65766553
 8001318:	65535f6e 	.word	0x65535f6e
 800131c:	6e656d67 	.word	0x6e656d67
 8001320:	65545f74 	.word	0x65545f74
 8001324:	000a7473 	.word	0x000a7473
 8001328:	414c4544 	.word	0x414c4544
 800132c:	65545f59 	.word	0x65545f59
 8001330:	2e207473 	.word	0x2e207473
 8001334:	21202e2e 	.word	0x21202e2e
 8001338:	00000a21 	.word	0x00000a21
 800133c:	414c4544 	.word	0x414c4544
 8001340:	65545f59 	.word	0x65545f59
 8001344:	64207473 	.word	0x64207473
 8001348:	20656e6f 	.word	0x20656e6f
 800134c:	000a2121 	.word	0x000a2121
 8001350:	00000a0a 	.word	0x00000a0a
 8001354:	2d2d2d2d 	.word	0x2d2d2d2d
 8001358:	2d2d2d2d 	.word	0x2d2d2d2d
 800135c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001360:	2d2d2d2d 	.word	0x2d2d2d2d
 8001364:	2d2d2d2d 	.word	0x2d2d2d2d
 8001368:	2d2d2d2d 	.word	0x2d2d2d2d
 800136c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001370:	2d2d2d2d 	.word	0x2d2d2d2d
 8001374:	2d2d2d2d 	.word	0x2d2d2d2d
 8001378:	2d2d2d2d 	.word	0x2d2d2d2d
 800137c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001380:	2d2d2d2d 	.word	0x2d2d2d2d
 8001384:	00000a2d 	.word	0x00000a2d
 8001388:	20202020 	.word	0x20202020
 800138c:	20202020 	.word	0x20202020
 8001390:	20202020 	.word	0x20202020
 8001394:	20202020 	.word	0x20202020
 8001398:	48455320 	.word	0x48455320
 800139c:	49414d20 	.word	0x49414d20
 80013a0:	454d204e 	.word	0x454d204e
 80013a4:	000a554e 	.word	0x000a554e
 80013a8:	202e3120 	.word	0x202e3120
 80013ac:	65776f50 	.word	0x65776f50
 80013b0:	5f6e4f72 	.word	0x5f6e4f72
 80013b4:	45535f37 	.word	0x45535f37
 80013b8:	20202047 	.word	0x20202047
 80013bc:	20202020 	.word	0x20202020
 80013c0:	20202020 	.word	0x20202020
 80013c4:	20202020 	.word	0x20202020
 80013c8:	20202020 	.word	0x20202020
 80013cc:	20202020 	.word	0x20202020
 80013d0:	20202020 	.word	0x20202020
 80013d4:	20202020 	.word	0x20202020
 80013d8:	20202020 	.word	0x20202020
 80013dc:	20202020 	.word	0x20202020
 80013e0:	000a2020 	.word	0x000a2020
 80013e4:	202e3220 	.word	0x202e3220
 80013e8:	65776f50 	.word	0x65776f50
 80013ec:	66664f72 	.word	0x66664f72
 80013f0:	535f375f 	.word	0x535f375f
 80013f4:	20204745 	.word	0x20204745
 80013f8:	20202020 	.word	0x20202020
 80013fc:	20202020 	.word	0x20202020
 8001400:	20202020 	.word	0x20202020
 8001404:	20202020 	.word	0x20202020
 8001408:	20202020 	.word	0x20202020
 800140c:	20202020 	.word	0x20202020
 8001410:	20202020 	.word	0x20202020
 8001414:	20202020 	.word	0x20202020
 8001418:	20202020 	.word	0x20202020
 800141c:	0a202020 	.word	0x0a202020
 8001420:	00000000 	.word	0x00000000
 8001424:	202e3320 	.word	0x202e3320
 8001428:	20474553 	.word	0x20474553
 800142c:	20202031 	.word	0x20202031
 8001430:	20202020 	.word	0x20202020
 8001434:	20202020 	.word	0x20202020
 8001438:	20202020 	.word	0x20202020
 800143c:	20202020 	.word	0x20202020
 8001440:	20202020 	.word	0x20202020
 8001444:	20202020 	.word	0x20202020
 8001448:	20202020 	.word	0x20202020
 800144c:	20202020 	.word	0x20202020
 8001450:	20202020 	.word	0x20202020
 8001454:	000a2020 	.word	0x000a2020
 8001458:	202e3420 	.word	0x202e3420
 800145c:	20474553 	.word	0x20474553
 8001460:	20202032 	.word	0x20202032
 8001464:	20202020 	.word	0x20202020
 8001468:	20202020 	.word	0x20202020
 800146c:	20202020 	.word	0x20202020
 8001470:	20202020 	.word	0x20202020
 8001474:	20202020 	.word	0x20202020
 8001478:	20202020 	.word	0x20202020
 800147c:	20202020 	.word	0x20202020
 8001480:	20202020 	.word	0x20202020
 8001484:	20202020 	.word	0x20202020
 8001488:	00000a20 	.word	0x00000a20
 800148c:	202e3520 	.word	0x202e3520
 8001490:	20474553 	.word	0x20474553
 8001494:	20202033 	.word	0x20202033
 8001498:	20202020 	.word	0x20202020
 800149c:	20202020 	.word	0x20202020
 80014a0:	20202020 	.word	0x20202020
 80014a4:	20202020 	.word	0x20202020
 80014a8:	20202020 	.word	0x20202020
 80014ac:	20202020 	.word	0x20202020
 80014b0:	20202020 	.word	0x20202020
 80014b4:	20202020 	.word	0x20202020
 80014b8:	20202020 	.word	0x20202020
 80014bc:	00000a20 	.word	0x00000a20
 80014c0:	202e3620 	.word	0x202e3620
 80014c4:	20474553 	.word	0x20474553
 80014c8:	20202034 	.word	0x20202034
 80014cc:	20202020 	.word	0x20202020
 80014d0:	20202020 	.word	0x20202020
 80014d4:	20202020 	.word	0x20202020
 80014d8:	20202020 	.word	0x20202020
 80014dc:	20202020 	.word	0x20202020
 80014e0:	20202020 	.word	0x20202020
 80014e4:	20202020 	.word	0x20202020
 80014e8:	20202020 	.word	0x20202020
 80014ec:	20202020 	.word	0x20202020
 80014f0:	00000a20 	.word	0x00000a20
 80014f4:	202e3720 	.word	0x202e3720
 80014f8:	20474553 	.word	0x20474553
 80014fc:	20202035 	.word	0x20202035
 8001500:	20202020 	.word	0x20202020
 8001504:	20202020 	.word	0x20202020
 8001508:	20202020 	.word	0x20202020
 800150c:	20202020 	.word	0x20202020
 8001510:	20202020 	.word	0x20202020
 8001514:	20202020 	.word	0x20202020
 8001518:	20202020 	.word	0x20202020
 800151c:	20202020 	.word	0x20202020
 8001520:	20202020 	.word	0x20202020
 8001524:	00000a20 	.word	0x00000a20
 8001528:	202e3820 	.word	0x202e3820
 800152c:	20474553 	.word	0x20474553
 8001530:	20202036 	.word	0x20202036
 8001534:	20202020 	.word	0x20202020
 8001538:	20202020 	.word	0x20202020
 800153c:	20202020 	.word	0x20202020
 8001540:	20202020 	.word	0x20202020
 8001544:	20202020 	.word	0x20202020
 8001548:	20202020 	.word	0x20202020
 800154c:	20202020 	.word	0x20202020
 8001550:	20202020 	.word	0x20202020
 8001554:	20202020 	.word	0x20202020
 8001558:	00000a20 	.word	0x00000a20
 800155c:	202e3920 	.word	0x202e3920
 8001560:	20474553 	.word	0x20474553
 8001564:	20202037 	.word	0x20202037
 8001568:	20202020 	.word	0x20202020
 800156c:	20202020 	.word	0x20202020
 8001570:	20202020 	.word	0x20202020
 8001574:	20202020 	.word	0x20202020
 8001578:	20202020 	.word	0x20202020
 800157c:	20202020 	.word	0x20202020
 8001580:	20202020 	.word	0x20202020
 8001584:	20202020 	.word	0x20202020
 8001588:	20202020 	.word	0x20202020
 800158c:	00000a20 	.word	0x00000a20
 8001590:	202e3020 	.word	0x202e3020
 8001594:	20474553 	.word	0x20474553
 8001598:	20202038 	.word	0x20202038
 800159c:	20202020 	.word	0x20202020
 80015a0:	20202020 	.word	0x20202020
 80015a4:	20202020 	.word	0x20202020
 80015a8:	20202020 	.word	0x20202020
 80015ac:	20202020 	.word	0x20202020
 80015b0:	20202020 	.word	0x20202020
 80015b4:	20202020 	.word	0x20202020
 80015b8:	20202020 	.word	0x20202020
 80015bc:	20202020 	.word	0x20202020
 80015c0:	00000a20 	.word	0x00000a20
 80015c4:	202e6120 	.word	0x202e6120
 80015c8:	20474553 	.word	0x20474553
 80015cc:	20202039 	.word	0x20202039
 80015d0:	20202020 	.word	0x20202020
 80015d4:	20202020 	.word	0x20202020
 80015d8:	20202020 	.word	0x20202020
 80015dc:	20202020 	.word	0x20202020
 80015e0:	20202020 	.word	0x20202020
 80015e4:	20202020 	.word	0x20202020
 80015e8:	20202020 	.word	0x20202020
 80015ec:	20202020 	.word	0x20202020
 80015f0:	20202020 	.word	0x20202020
 80015f4:	00000a20 	.word	0x00000a20
 80015f8:	202e6220 	.word	0x202e6220
 80015fc:	20474553 	.word	0x20474553
 8001600:	20202030 	.word	0x20202030
 8001604:	20202020 	.word	0x20202020
 8001608:	20202020 	.word	0x20202020
 800160c:	20202020 	.word	0x20202020
 8001610:	20202020 	.word	0x20202020
 8001614:	20202020 	.word	0x20202020
 8001618:	20202020 	.word	0x20202020
 800161c:	20202020 	.word	0x20202020
 8001620:	20202020 	.word	0x20202020
 8001624:	20202020 	.word	0x20202020
 8001628:	00000a20 	.word	0x00000a20
 800162c:	202e6320 	.word	0x202e6320
 8001630:	375f6e4f 	.word	0x375f6e4f
 8001634:	4745535f 	.word	0x4745535f
 8001638:	6c6c415f 	.word	0x6c6c415f
 800163c:	206e6950 	.word	0x206e6950
 8001640:	20202020 	.word	0x20202020
 8001644:	20202020 	.word	0x20202020
 8001648:	20202020 	.word	0x20202020
 800164c:	20202020 	.word	0x20202020
 8001650:	20202020 	.word	0x20202020
 8001654:	20202020 	.word	0x20202020
 8001658:	20202020 	.word	0x20202020
 800165c:	20202020 	.word	0x20202020
 8001660:	20202020 	.word	0x20202020
 8001664:	0a202020 	.word	0x0a202020
 8001668:	00000000 	.word	0x00000000
 800166c:	202e6420 	.word	0x202e6420
 8001670:	5f66664f 	.word	0x5f66664f
 8001674:	45535f37 	.word	0x45535f37
 8001678:	6c415f47 	.word	0x6c415f47
 800167c:	6e69506c 	.word	0x6e69506c
 8001680:	20202020 	.word	0x20202020
 8001684:	20202020 	.word	0x20202020
 8001688:	20202020 	.word	0x20202020
 800168c:	20202020 	.word	0x20202020
 8001690:	20202020 	.word	0x20202020
 8001694:	20202020 	.word	0x20202020
 8001698:	20202020 	.word	0x20202020
 800169c:	20202020 	.word	0x20202020
 80016a0:	20202020 	.word	0x20202020
 80016a4:	20202020 	.word	0x20202020
 80016a8:	0000000a 	.word	0x0000000a
 80016ac:	202e7120 	.word	0x202e7120
 80016b0:	2044454c 	.word	0x2044454c
 80016b4:	756e654d 	.word	0x756e654d
 80016b8:	49555120 	.word	0x49555120
 80016bc:	00000a54 	.word	0x00000a54
 80016c0:	454c4553 	.word	0x454c4553
 80016c4:	54205443 	.word	0x54205443
 80016c8:	43204548 	.word	0x43204548
 80016cc:	414d4d4f 	.word	0x414d4d4f
 80016d0:	4e20444e 	.word	0x4e20444e
 80016d4:	45424d55 	.word	0x45424d55
 80016d8:	203a2052 	.word	0x203a2052
 80016dc:	0000000a 	.word	0x0000000a
 80016e0:	2079656b 	.word	0x2079656b
 80016e4:	6425203a 	.word	0x6425203a
 80016e8:	0000000a 	.word	0x0000000a
 80016ec:	312e6f4e 	.word	0x312e6f4e
 80016f0:	0000000a 	.word	0x0000000a
 80016f4:	65776f50 	.word	0x65776f50
 80016f8:	5f6e4f72 	.word	0x5f6e4f72
 80016fc:	45535f37 	.word	0x45535f37
 8001700:	00000047 	.word	0x00000047
 8001704:	322e6f4e 	.word	0x322e6f4e
 8001708:	0000000a 	.word	0x0000000a
 800170c:	65776f50 	.word	0x65776f50
 8001710:	66664f72 	.word	0x66664f72
 8001714:	535f375f 	.word	0x535f375f
 8001718:	00004745 	.word	0x00004745
 800171c:	332e6f4e 	.word	0x332e6f4e
 8001720:	0000000a 	.word	0x0000000a
 8001724:	342e6f4e 	.word	0x342e6f4e
 8001728:	0000000a 	.word	0x0000000a
 800172c:	352e6f4e 	.word	0x352e6f4e
 8001730:	0000000a 	.word	0x0000000a
 8001734:	362e6f4e 	.word	0x362e6f4e
 8001738:	0000000a 	.word	0x0000000a
 800173c:	372e6f4e 	.word	0x372e6f4e
 8001740:	0000000a 	.word	0x0000000a
 8001744:	382e6f4e 	.word	0x382e6f4e
 8001748:	0000000a 	.word	0x0000000a
 800174c:	392e6f4e 	.word	0x392e6f4e
 8001750:	0000000a 	.word	0x0000000a
 8001754:	302e6f4e 	.word	0x302e6f4e
 8001758:	0000000a 	.word	0x0000000a
 800175c:	612e6f4e 	.word	0x612e6f4e
 8001760:	0000000a 	.word	0x0000000a
 8001764:	622e6f4e 	.word	0x622e6f4e
 8001768:	0000000a 	.word	0x0000000a
 800176c:	632e6f4e 	.word	0x632e6f4e
 8001770:	0000000a 	.word	0x0000000a
 8001774:	642e6f4e 	.word	0x642e6f4e
 8001778:	0000000a 	.word	0x0000000a
 800177c:	652e6f4e 	.word	0x652e6f4e
 8001780:	0000000a 	.word	0x0000000a
 8001784:	662e6f4e 	.word	0x662e6f4e
 8001788:	0000000a 	.word	0x0000000a
 800178c:	672e6f4e 	.word	0x672e6f4e
 8001790:	0000000a 	.word	0x0000000a
 8001794:	682e6f4e 	.word	0x682e6f4e
 8001798:	0000000a 	.word	0x0000000a
 800179c:	692e6f4e 	.word	0x692e6f4e
 80017a0:	0000000a 	.word	0x0000000a
 80017a4:	6a2e6f4e 	.word	0x6a2e6f4e
 80017a8:	0000000a 	.word	0x0000000a
 80017ac:	6b2e6f4e 	.word	0x6b2e6f4e
 80017b0:	0000000a 	.word	0x0000000a
 80017b4:	20706d74 	.word	0x20706d74
 80017b8:	3a3a3a3a 	.word	0x3a3a3a3a
 80017bc:	0a642520 	.word	0x0a642520
 80017c0:	00000000 	.word	0x00000000
 80017c4:	5f495348 	.word	0x5f495348
 80017c8:	756c6156 	.word	0x756c6156
 80017cc:	3a3a2065 	.word	0x3a3a2065
 80017d0:	25203a3a 	.word	0x25203a3a
 80017d4:	00000a64 	.word	0x00000a64
 80017d8:	5f455348 	.word	0x5f455348
 80017dc:	55414c56 	.word	0x55414c56
 80017e0:	3a3a2045 	.word	0x3a3a2045
 80017e4:	25203a3a 	.word	0x25203a3a
 80017e8:	00000a64 	.word	0x00000a64
 80017ec:	6d6c6c70 	.word	0x6d6c6c70
 80017f0:	206c6c75 	.word	0x206c6c75
 80017f4:	3a3a3a3a 	.word	0x3a3a3a3a
 80017f8:	0a642520 	.word	0x0a642520
 80017fc:	00000000 	.word	0x00000000
 8001800:	736c6c70 	.word	0x736c6c70
 8001804:	6372756f 	.word	0x6372756f
 8001808:	3a3a2065 	.word	0x3a3a2065
 800180c:	25203a3a 	.word	0x25203a3a
 8001810:	00000a64 	.word	0x00000a64
 8001814:	43535953 	.word	0x43535953
 8001818:	465f4b4c 	.word	0x465f4b4c
 800181c:	75716572 	.word	0x75716572
 8001820:	79636e65 	.word	0x79636e65
 8001824:	25203a20 	.word	0x25203a20
 8001828:	00000a64 	.word	0x00000a64
 800182c:	5f495348 	.word	0x5f495348
 8001830:	756c6156 	.word	0x756c6156
 8001834:	203a2065 	.word	0x203a2065
 8001838:	000a6425 	.word	0x000a6425
 800183c:	20706d74 	.word	0x20706d74
 8001840:	4b4c4348 	.word	0x4b4c4348
 8001844:	25203a20 	.word	0x25203a20
 8001848:	00000a64 	.word	0x00000a64
 800184c:	4b4c4348 	.word	0x4b4c4348
 8001850:	706d7420 	.word	0x706d7420
 8001854:	203a2020 	.word	0x203a2020
 8001858:	000a6425 	.word	0x000a6425
 800185c:	4b4c4348 	.word	0x4b4c4348
 8001860:	6572465f 	.word	0x6572465f
 8001864:	6e657571 	.word	0x6e657571
 8001868:	74207963 	.word	0x74207963
 800186c:	3a20706d 	.word	0x3a20706d
 8001870:	38302520 	.word	0x38302520
 8001874:	00000a78 	.word	0x00000a78
 8001878:	4b4c4348 	.word	0x4b4c4348
 800187c:	6572465f 	.word	0x6572465f
 8001880:	6e657571 	.word	0x6e657571
 8001884:	70207963 	.word	0x70207963
 8001888:	63736572 	.word	0x63736572
 800188c:	25203a20 	.word	0x25203a20
 8001890:	0a783830 	.word	0x0a783830
 8001894:	00000000 	.word	0x00000000
 8001898:	4b4c4348 	.word	0x4b4c4348
 800189c:	6572465f 	.word	0x6572465f
 80018a0:	6e657571 	.word	0x6e657571
 80018a4:	70207963 	.word	0x70207963
 80018a8:	63736572 	.word	0x63736572
 80018ac:	25203a20 	.word	0x25203a20
 80018b0:	00000a64 	.word	0x00000a64
 80018b4:	706d7420 	.word	0x706d7420
 80018b8:	4c435020 	.word	0x4c435020
 80018bc:	465f314b 	.word	0x465f314b
 80018c0:	75716572 	.word	0x75716572
 80018c4:	79636e65 	.word	0x79636e65
 80018c8:	25203a20 	.word	0x25203a20
 80018cc:	00000a64 	.word	0x00000a64
 80018d0:	4b4c4350 	.word	0x4b4c4350
 80018d4:	72465f31 	.word	0x72465f31
 80018d8:	65757165 	.word	0x65757165
 80018dc:	2079636e 	.word	0x2079636e
 80018e0:	20706d74 	.word	0x20706d74
 80018e4:	25203a20 	.word	0x25203a20
 80018e8:	00000a64 	.word	0x00000a64
 80018ec:	4b4c4350 	.word	0x4b4c4350
 80018f0:	72465f31 	.word	0x72465f31
 80018f4:	65757165 	.word	0x65757165
 80018f8:	2079636e 	.word	0x2079636e
 80018fc:	73657270 	.word	0x73657270
 8001900:	203a2063 	.word	0x203a2063
 8001904:	78383025 	.word	0x78383025
 8001908:	0000000a 	.word	0x0000000a
 800190c:	4b4c4350 	.word	0x4b4c4350
 8001910:	72465f31 	.word	0x72465f31
 8001914:	65757165 	.word	0x65757165
 8001918:	2079636e 	.word	0x2079636e
 800191c:	73657270 	.word	0x73657270
 8001920:	203a2063 	.word	0x203a2063
 8001924:	000a6425 	.word	0x000a6425
 8001928:	4b4c4350 	.word	0x4b4c4350
 800192c:	72465f32 	.word	0x72465f32
 8001930:	65757165 	.word	0x65757165
 8001934:	2079636e 	.word	0x2079636e
 8001938:	73657270 	.word	0x73657270
 800193c:	203a2063 	.word	0x203a2063
 8001940:	78383025 	.word	0x78383025
 8001944:	0000000a 	.word	0x0000000a
 8001948:	4b4c4350 	.word	0x4b4c4350
 800194c:	72465f32 	.word	0x72465f32
 8001950:	65757165 	.word	0x65757165
 8001954:	2079636e 	.word	0x2079636e
 8001958:	73657270 	.word	0x73657270
 800195c:	203a2063 	.word	0x203a2063
 8001960:	000a6425 	.word	0x000a6425
 8001964:	706d7420 	.word	0x706d7420
 8001968:	43444120 	.word	0x43444120
 800196c:	5f4b4c43 	.word	0x5f4b4c43
 8001970:	71657246 	.word	0x71657246
 8001974:	636e6575 	.word	0x636e6575
 8001978:	203a2079 	.word	0x203a2079
 800197c:	000a6425 	.word	0x000a6425
 8001980:	43434441 	.word	0x43434441
 8001984:	465f4b4c 	.word	0x465f4b4c
 8001988:	75716572 	.word	0x75716572
 800198c:	79636e65 	.word	0x79636e65
 8001990:	706d7420 	.word	0x706d7420
 8001994:	25203a20 	.word	0x25203a20
 8001998:	00000a64 	.word	0x00000a64
 800199c:	43434441 	.word	0x43434441
 80019a0:	465f4b4c 	.word	0x465f4b4c
 80019a4:	75716572 	.word	0x75716572
 80019a8:	79636e65 	.word	0x79636e65
 80019ac:	65727020 	.word	0x65727020
 80019b0:	3a206373 	.word	0x3a206373
 80019b4:	38302520 	.word	0x38302520
 80019b8:	00000a78 	.word	0x00000a78
 80019bc:	43434441 	.word	0x43434441
 80019c0:	465f4b4c 	.word	0x465f4b4c
 80019c4:	75716572 	.word	0x75716572
 80019c8:	79636e65 	.word	0x79636e65
 80019cc:	65727020 	.word	0x65727020
 80019d0:	3a206373 	.word	0x3a206373
 80019d4:	0a642520 	.word	0x0a642520
 80019d8:	00000000 	.word	0x00000000
 80019dc:	72617453 	.word	0x72617453
 80019e0:	43707574 	.word	0x43707574
 80019e4:	746e756f 	.word	0x746e756f
 80019e8:	3a207265 	.word	0x3a207265
 80019ec:	0a642520 	.word	0x0a642520
 80019f0:	00000000 	.word	0x00000000
 80019f4:	74737953 	.word	0x74737953
 80019f8:	63206d65 	.word	0x63206d65
 80019fc:	6b636f6c 	.word	0x6b636f6c
 8001a00:	65726620 	.word	0x65726620
 8001a04:	6e657571 	.word	0x6e657571
 8001a08:	3d207963 	.word	0x3d207963
 8001a0c:	0a642520 	.word	0x0a642520
 8001a10:	00000000 	.word	0x00000000
 8001a14:	4b4c4348 	.word	0x4b4c4348
 8001a18:	6572465f 	.word	0x6572465f
 8001a1c:	6e756571 	.word	0x6e756571
 8001a20:	3a207963 	.word	0x3a207963
 8001a24:	0a642520 	.word	0x0a642520
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	4b4c4350 	.word	0x4b4c4350
 8001a30:	72465f31 	.word	0x72465f31
 8001a34:	65757165 	.word	0x65757165
 8001a38:	2079636e 	.word	0x2079636e
 8001a3c:	6425203a 	.word	0x6425203a
 8001a40:	0000000a 	.word	0x0000000a
 8001a44:	4b4c4350 	.word	0x4b4c4350
 8001a48:	72465f32 	.word	0x72465f32
 8001a4c:	65757165 	.word	0x65757165
 8001a50:	2079636e 	.word	0x2079636e
 8001a54:	6425203a 	.word	0x6425203a
 8001a58:	0000000a 	.word	0x0000000a
 8001a5c:	43434441 	.word	0x43434441
 8001a60:	465f4b4c 	.word	0x465f4b4c
 8001a64:	75716572 	.word	0x75716572
 8001a68:	79636e65 	.word	0x79636e65
 8001a6c:	25203a20 	.word	0x25203a20
 8001a70:	00000a64 	.word	0x00000a64
 8001a74:	74737973 	.word	0x74737973
 8001a78:	206b6369 	.word	0x206b6369
 8001a7c:	666e6f63 	.word	0x666e6f63
 8001a80:	65206769 	.word	0x65206769
 8001a84:	726f7272 	.word	0x726f7272
 8001a88:	0a212120 	.word	0x0a212120
 8001a8c:	00000000 	.word	0x00000000


main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000104c  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  20000000  0800104c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000190  20000014  08001060  00010014  2**2
                  ALLOC
  3 .debug_info   00002232  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000b43  00000000  00000000  00012246  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_loc    0000216e  00000000  00000000  00012d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000218  00000000  00000000  00014ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_ranges 00000288  00000000  00000000  0001510f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122f  00000000  00000000  00015397  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007db  00000000  00000000  000165c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000070  00000000  00000000  00016da1  2**0
                  CONTENTS, READONLY
 11 .ARM.attributes 00000033  00000000  00000000  00016e11  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000564  00000000  00000000  00016e44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <_ld_text_start>:
 8000000:	20005000 	.word	0x20005000
 8000004:	08000611 	.word	0x08000611

08000008 <main>:
#include "main.h"


int main()
{
 8000008:	b508      	push	{r3, lr}
    
    Hw_Init();
 800000a:	4b04      	ldr	r3, [pc, #16]	; (800001c <main+0x14>)
 800000c:	4798      	blx	r3
    Led_OffAll();
 800000e:	4b04      	ldr	r3, [pc, #16]	; (8000020 <main+0x18>)
 8000010:	4798      	blx	r3
    Led_Main();
 8000012:	4b04      	ldr	r3, [pc, #16]	; (8000024 <main+0x1c>)
 8000014:	4798      	blx	r3
 8000016:	2000      	movs	r0, #0
 8000018:	bd08      	pop	{r3, pc}
 800001a:	bf00      	nop
 800001c:	0800083d 	.word	0x0800083d
 8000020:	080008ed 	.word	0x080008ed
 8000024:	08000a25 	.word	0x08000a25

08000028 <RCC_GetClocksFreq>:
CLOCK_DEF void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000028:	4a23      	ldr	r2, [pc, #140]	; (80000b8 <RCC_GetClocksFreq+0x90>)
#include "Ap_Clock.h"

//extern __IO uint32_t StartUpCounter;

CLOCK_DEF void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800002a:	b430      	push	{r4, r5}
    uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800002c:	6853      	ldr	r3, [r2, #4]
 800002e:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000032:	2b04      	cmp	r3, #4
 8000034:	d038      	beq.n	80000a8 <RCC_GetClocksFreq+0x80>
 8000036:	2b08      	cmp	r3, #8
 8000038:	d025      	beq.n	8000086 <RCC_GetClocksFreq+0x5e>
 800003a:	b30b      	cbz	r3, 8000080 <RCC_GetClocksFreq+0x58>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800003c:	4a1f      	ldr	r2, [pc, #124]	; (80000bc <RCC_GetClocksFreq+0x94>)
      break;
 800003e:	4613      	mov	r3, r2
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8000040:	6002      	str	r2, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000042:	4a1d      	ldr	r2, [pc, #116]	; (80000b8 <RCC_GetClocksFreq+0x90>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000044:	4c1e      	ldr	r4, [pc, #120]	; (80000c0 <RCC_GetClocksFreq+0x98>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000046:	6851      	ldr	r1, [r2, #4]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 8000048:	4d1e      	ldr	r5, [pc, #120]	; (80000c4 <RCC_GetClocksFreq+0x9c>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 800004a:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 800004e:	5c61      	ldrb	r1, [r4, r1]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000050:	40cb      	lsrs	r3, r1
 8000052:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000054:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 8000056:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 800005a:	5c61      	ldrb	r1, [r4, r1]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800005c:	fa23 f101 	lsr.w	r1, r3, r1
 8000060:	6081      	str	r1, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000062:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 8000064:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 8000068:	5c61      	ldrb	r1, [r4, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800006a:	40cb      	lsrs	r3, r1
 800006c:	60c3      	str	r3, [r0, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800006e:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8000070:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8000074:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 8000076:	bc30      	pop	{r4, r5}
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000078:	fbb3 f3f2 	udiv	r3, r3, r2
 800007c:	6103      	str	r3, [r0, #16]
}
 800007e:	4770      	bx	lr
  tmp = RCC->CFGR & CFGR_SWS_Mask;
  
  switch (tmp)
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8000080:	4b0e      	ldr	r3, [pc, #56]	; (80000bc <RCC_GetClocksFreq+0x94>)
 8000082:	6003      	str	r3, [r0, #0]
      break;
 8000084:	e7dd      	b.n	8000042 <RCC_GetClocksFreq+0x1a>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000086:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000088:	6851      	ldr	r1, [r2, #4]
      
      pllmull = ( pllmull >> 18) + 2;
 800008a:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 800008e:	03c9      	lsls	r1, r1, #15
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
      pllmull = ( pllmull >> 18) + 2;
 8000090:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 8000094:	d50b      	bpl.n	80000ae <RCC_GetClocksFreq+0x86>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000096:	6852      	ldr	r2, [r2, #4]
 8000098:	0392      	lsls	r2, r2, #14
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 800009a:	bf4c      	ite	mi
 800009c:	4a0a      	ldrmi	r2, [pc, #40]	; (80000c8 <RCC_GetClocksFreq+0xa0>)
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 800009e:	4a0b      	ldrpl	r2, [pc, #44]	; (80000cc <RCC_GetClocksFreq+0xa4>)
 80000a0:	fb02 f303 	mul.w	r3, r2, r3
 80000a4:	6003      	str	r3, [r0, #0]
 80000a6:	e7cc      	b.n	8000042 <RCC_GetClocksFreq+0x1a>
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 80000a8:	4b08      	ldr	r3, [pc, #32]	; (80000cc <RCC_GetClocksFreq+0xa4>)
 80000aa:	6003      	str	r3, [r0, #0]
      break;
 80000ac:	e7c9      	b.n	8000042 <RCC_GetClocksFreq+0x1a>
      
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 80000ae:	4a08      	ldr	r2, [pc, #32]	; (80000d0 <RCC_GetClocksFreq+0xa8>)
 80000b0:	fb02 f303 	mul.w	r3, r2, r3
 80000b4:	6003      	str	r3, [r0, #0]
 80000b6:	e7c4      	b.n	8000042 <RCC_GetClocksFreq+0x1a>
 80000b8:	40021000 	.word	0x40021000
 80000bc:	007a1200 	.word	0x007a1200
 80000c0:	20000004 	.word	0x20000004
 80000c4:	20000000 	.word	0x20000000
 80000c8:	005b8d80 	.word	0x005b8d80
 80000cc:	00b71b00 	.word	0x00b71b00
 80000d0:	003d0900 	.word	0x003d0900

080000d4 <Ld_System_Information>:
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}

CLOCK_DEF void Ld_System_Information()
{
 80000d4:	b510      	push	{r4, lr}
 80000d6:	b086      	sub	sp, #24
    RCC_ClocksTypeDef  rcc_clocks;

    //Ld_printf("StartUpCounter : %d\n", StartUpCounter);

    RCC_GetClocksFreq(&rcc_clocks);
 80000d8:	4b0a      	ldr	r3, [pc, #40]	; (8000104 <Ld_System_Information+0x30>)
 80000da:	a801      	add	r0, sp, #4
 80000dc:	4798      	blx	r3

    Ld_printf("SYSCLK_Frequency = %d\n",rcc_clocks.SYSCLK_Frequency );
 80000de:	4c0a      	ldr	r4, [pc, #40]	; (8000108 <Ld_System_Information+0x34>)
 80000e0:	9901      	ldr	r1, [sp, #4]
 80000e2:	480a      	ldr	r0, [pc, #40]	; (800010c <Ld_System_Information+0x38>)
 80000e4:	47a0      	blx	r4
    Ld_printf("HCLK_Frequency = %d\n",rcc_clocks.HCLK_Frequency );
 80000e6:	9902      	ldr	r1, [sp, #8]
 80000e8:	4809      	ldr	r0, [pc, #36]	; (8000110 <Ld_System_Information+0x3c>)
 80000ea:	47a0      	blx	r4
    Ld_printf("PCLK1_Frequency = %d\n",rcc_clocks.PCLK1_Frequency );
 80000ec:	9903      	ldr	r1, [sp, #12]
 80000ee:	4809      	ldr	r0, [pc, #36]	; (8000114 <Ld_System_Information+0x40>)
 80000f0:	47a0      	blx	r4
    Ld_printf("PCLK2_Frequency = %d\n",rcc_clocks.PCLK2_Frequency );
 80000f2:	9904      	ldr	r1, [sp, #16]
 80000f4:	4808      	ldr	r0, [pc, #32]	; (8000118 <Ld_System_Information+0x44>)
 80000f6:	47a0      	blx	r4
    Ld_printf("ADCCLK_Frequency = %d\n",rcc_clocks.ADCCLK_Frequency );
 80000f8:	4808      	ldr	r0, [pc, #32]	; (800011c <Ld_System_Information+0x48>)
 80000fa:	9905      	ldr	r1, [sp, #20]
 80000fc:	47a0      	blx	r4
    
}
 80000fe:	b006      	add	sp, #24
 8000100:	bd10      	pop	{r4, pc}
 8000102:	bf00      	nop
 8000104:	08000029 	.word	0x08000029
 8000108:	080001ad 	.word	0x080001ad
 800010c:	08000c68 	.word	0x08000c68
 8000110:	08000c80 	.word	0x08000c80
 8000114:	08000c98 	.word	0x08000c98
 8000118:	08000cb0 	.word	0x08000cb0
 800011c:	08000cc8 	.word	0x08000cc8

08000120 <print_byte>:

 #include "Ld_Printf.h"
 
 void print_byte(unsigned int c)
 {
     if (c == '\n') print_byte('\r');
 8000120:	280a      	cmp	r0, #10
#define LDSTRING_LOCAL

 #include "Ld_Printf.h"
 
 void print_byte(unsigned int c)
 {
 8000122:	b510      	push	{r4, lr}
 8000124:	4604      	mov	r4, r0
     if (c == '\n') print_byte('\r');
 8000126:	d006      	beq.n	8000136 <print_byte+0x16>
     //while( !((*(volatile unsigned long *) 0x40013800) & 0x80) ) ;
     while( !(	(*(volatile unsigned long *)0x40013800) & 0x80) ) ;
 8000128:	4a05      	ldr	r2, [pc, #20]	; (8000140 <print_byte+0x20>)
 800012a:	6813      	ldr	r3, [r2, #0]
 800012c:	061b      	lsls	r3, r3, #24
 800012e:	d5fc      	bpl.n	800012a <print_byte+0xa>
     //*(volatile unsigned long *) 0x40013804 = c;
     (*(volatile unsigned long *)0x40013804) = c;
 8000130:	4b04      	ldr	r3, [pc, #16]	; (8000144 <print_byte+0x24>)
 8000132:	601c      	str	r4, [r3, #0]
 8000134:	bd10      	pop	{r4, pc}

 #include "Ld_Printf.h"
 
 void print_byte(unsigned int c)
 {
     if (c == '\n') print_byte('\r');
 8000136:	200d      	movs	r0, #13
 8000138:	f7ff fff2 	bl	8000120 <print_byte>
 800013c:	e7f4      	b.n	8000128 <print_byte+0x8>
 800013e:	bf00      	nop
 8000140:	40013800 	.word	0x40013800
 8000144:	40013804 	.word	0x40013804

08000148 <Ld_get_byte>:
 }
 
 LDSTRING_DEF char Ld_get_byte(void)
 {
     //while( !((*(volatile unsigned long *) 0x40013800) & 0x20) ) ;
     while( !((*(volatile unsigned long *)0x40013800) & 0x20) ) ;
 8000148:	4a03      	ldr	r2, [pc, #12]	; (8000158 <Ld_get_byte+0x10>)
 800014a:	6813      	ldr	r3, [r2, #0]
 800014c:	069b      	lsls	r3, r3, #26
 800014e:	d5fc      	bpl.n	800014a <Ld_get_byte+0x2>
     return (char)  (*(volatile unsigned long *)0x40013804);
 8000150:	4b02      	ldr	r3, [pc, #8]	; (800015c <Ld_get_byte+0x14>)
 8000152:	6818      	ldr	r0, [r3, #0]
     
 }
 8000154:	b2c0      	uxtb	r0, r0
 8000156:	4770      	bx	lr
 8000158:	40013800 	.word	0x40013800
 800015c:	40013804 	.word	0x40013804

08000160 <DecToLong>:
 //        retval : 변환된 값이 기록될 주소.
 // 반환 : return : 1 : success                0 : failure.
 // 주의 :
 int DecToLong(char *s, long *retval){
         long remainder;
         if (!s || !s[0]) return false;
 8000160:	b1e8      	cbz	r0, 800019e <DecToLong+0x3e>
 8000162:	7803      	ldrb	r3, [r0, #0]
 8000164:	b1db      	cbz	r3, 800019e <DecToLong+0x3e>
 
 
         for (*retval=0; *s; s++){
 8000166:	2300      	movs	r3, #0
 8000168:	600b      	str	r3, [r1, #0]
 800016a:	7802      	ldrb	r2, [r0, #0]
 800016c:	b1e2      	cbz	r2, 80001a8 <DecToLong+0x48>
 // 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
 // 매개 : s      : 변환할 문자열의 주소.
 //        retval : 변환된 값이 기록될 주소.
 // 반환 : return : 1 : success                0 : failure.
 // 주의 :
 int DecToLong(char *s, long *retval){
 800016e:	b430      	push	{r4, r5}
         long remainder;
         if (!s || !s[0]) return false;
 
 
         for (*retval=0; *s; s++){
                 if (*s < '0' || *s > '9') return false;
 8000170:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000174:	b2e2      	uxtb	r2, r4
 8000176:	2a09      	cmp	r2, #9
 8000178:	d902      	bls.n	8000180 <DecToLong+0x20>
 800017a:	e012      	b.n	80001a2 <DecToLong+0x42>
 800017c:	2d09      	cmp	r5, #9
 800017e:	d810      	bhi.n	80001a2 <DecToLong+0x42>
                 remainder = *s - '0';
                 *retval = *retval * 10 + remainder;
 8000180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000184:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000188:	600b      	str	r3, [r1, #0]
 int DecToLong(char *s, long *retval){
         long remainder;
         if (!s || !s[0]) return false;
 
 
         for (*retval=0; *s; s++){
 800018a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                 if (*s < '0' || *s > '9') return false;
 800018e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000192:	b2e5      	uxtb	r5, r4
 int DecToLong(char *s, long *retval){
         long remainder;
         if (!s || !s[0]) return false;
 
 
         for (*retval=0; *s; s++){
 8000194:	2a00      	cmp	r2, #0
 8000196:	d1f1      	bne.n	800017c <DecToLong+0x1c>
                 remainder = *s - '0';
                 *retval = *retval * 10 + remainder;
         }
 
 
         return true;
 8000198:	2001      	movs	r0, #1
 }        // DecToLong.
 800019a:	bc30      	pop	{r4, r5}
 800019c:	4770      	bx	lr
 //        retval : 변환된 값이 기록될 주소.
 // 반환 : return : 1 : success                0 : failure.
 // 주의 :
 int DecToLong(char *s, long *retval){
         long remainder;
         if (!s || !s[0]) return false;
 800019e:	2000      	movs	r0, #0
                 *retval = *retval * 10 + remainder;
         }
 
 
         return true;
 }        // DecToLong.
 80001a0:	4770      	bx	lr
 //        retval : 변환된 값이 기록될 주소.
 // 반환 : return : 1 : success                0 : failure.
 // 주의 :
 int DecToLong(char *s, long *retval){
         long remainder;
         if (!s || !s[0]) return false;
 80001a2:	2000      	movs	r0, #0
                 *retval = *retval * 10 + remainder;
         }
 
 
         return true;
 }        // DecToLong.
 80001a4:	bc30      	pop	{r4, r5}
 80001a6:	4770      	bx	lr
                 remainder = *s - '0';
                 *retval = *retval * 10 + remainder;
         }
 
 
         return true;
 80001a8:	2001      	movs	r0, #1
 }        // DecToLong.
 80001aa:	4770      	bx	lr

080001ac <Ld_printf>:
 // 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
 //              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
 // 반환 : 없음.
 // 주의 : 없음.
 LDSTRING_DEF void Ld_printf(char *fmt, ...)
 {
 80001ac:	b40f      	push	{r0, r1, r2, r3}
 80001ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001b2:	b089      	sub	sp, #36	; 0x24
         int                i;
         va_list args;
         char        *s=fmt;
 80001b4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
         return;
 }
 
 void PrintChar(char *fmt, char c)
 {
         print_byte(c);
 80001b8:	4ec6      	ldr	r6, [pc, #792]	; (80004d4 <Ld_printf+0x328>)
 // 주의 : 없음.
 LDSTRING_DEF void Ld_printf(char *fmt, ...)
 {
         int                i;
         va_list args;
         char        *s=fmt;
 80001ba:	f858 5b04 	ldr.w	r5, [r8], #4
         char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
         
         va_start(args, fmt);
         while (*s){
 80001be:	7828      	ldrb	r0, [r5, #0]
 80001c0:	b3a0      	cbz	r0, 800022c <Ld_printf+0x80>
                 if (*s=='%'){
 80001c2:	2825      	cmp	r0, #37	; 0x25
 80001c4:	d137      	bne.n	8000236 <Ld_printf+0x8a>
                         s++;
                         // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                         format[0] = '%';
 80001c6:	ac08      	add	r4, sp, #32
 80001c8:	f804 0d18 	strb.w	r0, [r4, #-24]!
 80001cc:	4621      	mov	r1, r4
         char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
         
         va_start(args, fmt);
         while (*s){
                 if (*s=='%'){
                         s++;
 80001ce:	1c6b      	adds	r3, r5, #1
 80001d0:	f105 0c0a 	add.w	ip, r5, #10
 80001d4:	1b5f      	subs	r7, r3, r5
 80001d6:	469e      	mov	lr, r3
                         // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                         format[0] = '%';
                         for (i=1; i<10;){
                                 if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 80001d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80001dc:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	f240 8095 	bls.w	8000310 <Ld_printf+0x164>
 80001e6:	2878      	cmp	r0, #120	; 0x78
 80001e8:	f000 8092 	beq.w	8000310 <Ld_printf+0x164>
 80001ec:	2873      	cmp	r0, #115	; 0x73
 80001ee:	f000 808f 	beq.w	8000310 <Ld_printf+0x164>
 80001f2:	2825      	cmp	r0, #37	; 0x25
 80001f4:	f000 808c 	beq.w	8000310 <Ld_printf+0x164>
         while (*s){
                 if (*s=='%'){
                         s++;
                         // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                         format[0] = '%';
                         for (i=1; i<10;){
 80001f8:	4563      	cmp	r3, ip
                                         format[i++] = *s;
                                         format[i] = '\0';
                                         break;
                                 }
                                 else {
                                         format[i++] = *s++;
 80001fa:	461a      	mov	r2, r3
 80001fc:	f801 0f01 	strb.w	r0, [r1, #1]!
         while (*s){
                 if (*s=='%'){
                         s++;
                         // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                         format[0] = '%';
                         for (i=1; i<10;){
 8000200:	d1e8      	bne.n	80001d4 <Ld_printf+0x28>
 8000202:	f89e 0001 	ldrb.w	r0, [lr, #1]
                                 else {
                                         format[i++] = *s++;
                                 }
                         }
                         // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                         switch (*s++){
 8000206:	1c55      	adds	r5, r2, #1
 8000208:	2864      	cmp	r0, #100	; 0x64
 800020a:	f000 808f 	beq.w	800032c <Ld_printf+0x180>
 800020e:	d815      	bhi.n	800023c <Ld_printf+0x90>
 8000210:	2825      	cmp	r0, #37	; 0x25
 8000212:	f000 810c 	beq.w	800042e <Ld_printf+0x282>
 8000216:	2863      	cmp	r0, #99	; 0x63
 8000218:	d1d1      	bne.n	80001be <Ld_printf+0x12>
         return;
 }
 
 void PrintChar(char *fmt, char c)
 {
         print_byte(c);
 800021a:	f898 0000 	ldrb.w	r0, [r8]
 800021e:	47b0      	blx	r6
         va_list args;
         char        *s=fmt;
         char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
         
         va_start(args, fmt);
         while (*s){
 8000220:	7828      	ldrb	r0, [r5, #0]
                                 }
                         }
                         // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                         switch (*s++){
                                 case 'c' :
                                         PrintChar(format, va_arg(args, int));
 8000222:	f108 0404 	add.w	r4, r8, #4
 8000226:	46a0      	mov	r8, r4
         va_list args;
         char        *s=fmt;
         char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
         
         va_start(args, fmt);
         while (*s){
 8000228:	2800      	cmp	r0, #0
 800022a:	d1ca      	bne.n	80001c2 <Ld_printf+0x16>
                         s++;
                 }
         }
         va_end(args);
         return;
 }
 800022c:	b009      	add	sp, #36	; 0x24
 800022e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000232:	b004      	add	sp, #16
 8000234:	4770      	bx	lr
 
 void PrintChar(char *fmt, char c)
 {
         print_byte(c);
 8000236:	47b0      	blx	r6
                                         break;
                         }
                 }
                 else {
                         PrintChar("%c", *s);
                         s++;
 8000238:	3501      	adds	r5, #1
 800023a:	e7c0      	b.n	80001be <Ld_printf+0x12>
                                 else {
                                         format[i++] = *s++;
                                 }
                         }
                         // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                         switch (*s++){
 800023c:	2873      	cmp	r0, #115	; 0x73
 800023e:	f000 80f8 	beq.w	8000432 <Ld_printf+0x286>
 8000242:	2878      	cmp	r0, #120	; 0x78
 8000244:	d1bb      	bne.n	80001be <Ld_printf+0x12>
                                         break;
                                 case 'd' :
                                         PrintDec(format, va_arg(args, int));
                                         break;
                                 case 'x' :
                                         PrintHex(format, va_arg(args, int));
 8000246:	f8d8 a000 	ldr.w	sl, [r8]
         char        uHex, lHex;
         int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.
 
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
 800024a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 
 void PrintHex(char *fmt, int l){
         int                i, j;
         char        c, *s=fmt, tol[10];
         bool        flag0=false, flagl=false;        // flags.
         long        flagcnt=0;
 800024e:	2700      	movs	r7, #0
 8000250:	f8cd a000 	str.w	sl, [sp]
                                         break;
                                 case 'd' :
                                         PrintDec(format, va_arg(args, int));
                                         break;
                                 case 'x' :
                                         PrintHex(format, va_arg(args, int));
 8000254:	f108 0804 	add.w	r8, r8, #4
 
 void PrintHex(char *fmt, int l){
         int                i, j;
         char        c, *s=fmt, tol[10];
         bool        flag0=false, flagl=false;        // flags.
         long        flagcnt=0;
 8000258:	9701      	str	r7, [sp, #4]
         char        uHex, lHex;
         int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.
 
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
 800025a:	2b00      	cmp	r3, #0
 800025c:	f000 80ff 	beq.w	800045e <Ld_printf+0x2b2>
                 if (c=='x') break;
 8000260:	2b78      	cmp	r3, #120	; 0x78
 8000262:	f000 80fc 	beq.w	800045e <Ld_printf+0x2b2>
 8000266:	46bb      	mov	fp, r7
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                 tol[j] = s[i++];
                         }
                         tol[j] = '\0';
 8000268:	46b9      	mov	r9, r7
 
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
                 if (c=='x') break;
                 else if (c>='1' && c<='9'){
 800026a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800026e:	2a08      	cmp	r2, #8
 8000270:	d84a      	bhi.n	8000308 <Ld_printf+0x15c>
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000272:	f814 300b 	ldrb.w	r3, [r4, fp]
 8000276:	eb04 010b 	add.w	r1, r4, fp
 800027a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800027e:	2a09      	cmp	r2, #9
 8000280:	f200 814f 	bhi.w	8000522 <Ld_printf+0x376>
 8000284:	a805      	add	r0, sp, #20
 8000286:	4686      	mov	lr, r0
 8000288:	2200      	movs	r2, #0
                                 tol[j] = s[i++];
 800028a:	f80e 3b01 	strb.w	r3, [lr], #1
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
                 if (c=='x') break;
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800028e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                                 tol[j] = s[i++];
 8000292:	f10b 0b01 	add.w	fp, fp, #1
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
                 if (c=='x') break;
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000296:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800029a:	f1bc 0f09 	cmp.w	ip, #9
 800029e:	f102 0201 	add.w	r2, r2, #1
 80002a2:	d9f2      	bls.n	800028a <Ld_printf+0xde>
                                 tol[j] = s[i++];
                         }
                         tol[j] = '\0';
 80002a4:	ab08      	add	r3, sp, #32
 80002a6:	441a      	add	r2, r3
                         i--;
                         DecToLong(tol, &flagcnt);
 80002a8:	a901      	add	r1, sp, #4
 80002aa:	4b8b      	ldr	r3, [pc, #556]	; (80004d8 <Ld_printf+0x32c>)
                 if (c=='x') break;
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                 tol[j] = s[i++];
                         }
                         tol[j] = '\0';
 80002ac:	f802 9c0c 	strb.w	r9, [r2, #-12]
                         i--;
 80002b0:	f10b 3bff 	add.w	fp, fp, #4294967295
                         DecToLong(tol, &flagcnt);
 80002b4:	4798      	blx	r3
         char        uHex, lHex;
         int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.
 
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
 80002b6:	f10b 0b01 	add.w	fp, fp, #1
 80002ba:	ab08      	add	r3, sp, #32
 80002bc:	445b      	add	r3, fp
 80002be:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80002c2:	b10b      	cbz	r3, 80002c8 <Ld_printf+0x11c>
                 if (c=='x') break;
 80002c4:	2b78      	cmp	r3, #120	; 0x78
 80002c6:	d1d0      	bne.n	800026a <Ld_printf+0xbe>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	fa9a f28a 	rev.w	r2, sl
                 else continue;
         }
 
 
         s = (char *)(&l);
         l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80002ce:	9200      	str	r2, [sp, #0]
         
         // 위의 flag에 따라 출력.
         if (flagcnt){
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	f000 80c7 	beq.w	8000464 <Ld_printf+0x2b8>
                 if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 80002d6:	07da      	lsls	r2, r3, #31
 80002d8:	f140 812c 	bpl.w	8000534 <Ld_printf+0x388>
                         c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 80002dc:	f1c3 0307 	rsb	r3, r3, #7
 80002e0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80002e4:	aa08      	add	r2, sp, #32
 80002e6:	eb02 0363 	add.w	r3, r2, r3, asr #1
                         
                         // lower 4 bits를 가져와서 ascii code로.
                         lHex = ((c>>0)&0x0f);
 80002ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
                         if (lHex!=0) leading_zero=false;
 80002ee:	f013 030f 	ands.w	r3, r3, #15
 80002f2:	f000 815a 	beq.w	80005aa <Ld_printf+0x3fe>
                         if (lHex<10) lHex+='0';
 80002f6:	2b09      	cmp	r3, #9
 80002f8:	f240 8175 	bls.w	80005e6 <Ld_printf+0x43a>
                         else         lHex+='A'-10;
 80002fc:	f103 0037 	add.w	r0, r3, #55	; 0x37
                         // lower 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
                         }
                         else print_byte(lHex);
 8000300:	47b0      	blx	r6
 8000302:	f04f 0900 	mov.w	r9, #0
 8000306:	e155      	b.n	80005b4 <Ld_printf+0x408>
                         }
                         tol[j] = '\0';
                         i--;
                         DecToLong(tol, &flagcnt);
                 }
                 else if (c=='0') flag0=true;
 8000308:	2b30      	cmp	r3, #48	; 0x30
 800030a:	bf08      	it	eq
 800030c:	2701      	moveq	r7, #1
 800030e:	e7d2      	b.n	80002b6 <Ld_printf+0x10a>
                         format[0] = '%';
                         for (i=1; i<10;){
                                 if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                         format[i++] = *s;
                                         format[i] = '\0';
                                         break;
 8000310:	4672      	mov	r2, lr
                         s++;
                         // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                         format[0] = '%';
                         for (i=1; i<10;){
                                 if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                         format[i++] = *s;
 8000312:	ab08      	add	r3, sp, #32
 8000314:	441f      	add	r7, r3
                                 else {
                                         format[i++] = *s++;
                                 }
                         }
                         // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                         switch (*s++){
 8000316:	2864      	cmp	r0, #100	; 0x64
                         // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                         format[0] = '%';
                         for (i=1; i<10;){
                                 if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                         format[i++] = *s;
                                         format[i] = '\0';
 8000318:	f04f 0300 	mov.w	r3, #0
                         s++;
                         // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                         format[0] = '%';
                         for (i=1; i<10;){
                                 if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                         format[i++] = *s;
 800031c:	f807 0c18 	strb.w	r0, [r7, #-24]
                                         format[i] = '\0';
 8000320:	f807 3c17 	strb.w	r3, [r7, #-23]
                                 else {
                                         format[i++] = *s++;
                                 }
                         }
                         // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                         switch (*s++){
 8000324:	f102 0501 	add.w	r5, r2, #1
 8000328:	f47f af71 	bne.w	800020e <Ld_printf+0x62>
         bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
         long        divisor, result, remainder;
 
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
 800032c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 void PrintDec(char *fmt, int l)
 {
         int        i, j;
         char        c, *s=fmt, tol[10];
         bool        flag0=false, flagl=false;        // "%08lx"에서 '0', 'l'의 존재 여부.
         long        flagcnt=0;                                        // "%08lx"에서 "8"을 찾아서 long형으로.
 8000330:	2200      	movs	r2, #0
 8000332:	9201      	str	r2, [sp, #4]
                         switch (*s++){
                                 case 'c' :
                                         PrintChar(format, va_arg(args, int));
                                         break;
                                 case 'd' :
                                         PrintDec(format, va_arg(args, int));
 8000334:	f108 0a04 	add.w	sl, r8, #4
 8000338:	f8d8 b000 	ldr.w	fp, [r8]
         bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
         long        divisor, result, remainder;
 
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
 800033c:	2b00      	cmp	r3, #0
 800033e:	f000 80c4 	beq.w	80004ca <Ld_printf+0x31e>
                 if (c=='d') break;
 8000342:	2b64      	cmp	r3, #100	; 0x64
 8000344:	f000 80c1 	beq.w	80004ca <Ld_printf+0x31e>
 8000348:	4690      	mov	r8, r2
 800034a:	4617      	mov	r7, r2
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                 tol[j] = s[i++];
                         }
                         tol[j] = '\0';
 800034c:	4691      	mov	r9, r2
 
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
                 if (c=='d') break;
                 else if (c>='1' && c<='9'){
 800034e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000352:	2a08      	cmp	r2, #8
 8000354:	d87e      	bhi.n	8000454 <Ld_printf+0x2a8>
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000356:	5de3      	ldrb	r3, [r4, r7]
 8000358:	19e1      	adds	r1, r4, r7
 800035a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800035e:	2a09      	cmp	r2, #9
 8000360:	f200 80dc 	bhi.w	800051c <Ld_printf+0x370>
 8000364:	a805      	add	r0, sp, #20
 8000366:	4686      	mov	lr, r0
 8000368:	2200      	movs	r2, #0
                                 tol[j] = s[i++];
 800036a:	f80e 3b01 	strb.w	r3, [lr], #1
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
                 if (c=='d') break;
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800036e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                                 tol[j] = s[i++];
 8000372:	3701      	adds	r7, #1
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
                 if (c=='d') break;
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000374:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8000378:	f1bc 0f09 	cmp.w	ip, #9
 800037c:	f102 0201 	add.w	r2, r2, #1
 8000380:	d9f3      	bls.n	800036a <Ld_printf+0x1be>
                                 tol[j] = s[i++];
                         }
                         tol[j] = '\0';
 8000382:	ab08      	add	r3, sp, #32
 8000384:	441a      	add	r2, r3
                         i--;
                         DecToLong(tol, &flagcnt);
 8000386:	a901      	add	r1, sp, #4
 8000388:	4b53      	ldr	r3, [pc, #332]	; (80004d8 <Ld_printf+0x32c>)
                 if (c=='d') break;
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                 tol[j] = s[i++];
                         }
                         tol[j] = '\0';
 800038a:	f802 9c0c 	strb.w	r9, [r2, #-12]
                         i--;
 800038e:	3f01      	subs	r7, #1
                         DecToLong(tol, &flagcnt);
 8000390:	4798      	blx	r3
         bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
         long        divisor, result, remainder;
 
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
 8000392:	3701      	adds	r7, #1
 8000394:	ab08      	add	r3, sp, #32
 8000396:	443b      	add	r3, r7
 8000398:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800039c:	b10b      	cbz	r3, 80003a2 <Ld_printf+0x1f6>
                 if (c=='d') break;
 800039e:	2b64      	cmp	r3, #100	; 0x64
 80003a0:	d1d5      	bne.n	800034e <Ld_printf+0x1a2>
                 else continue;
         }
 
 
         // 위의 flag에 따라 출력.
         if (flagcnt){
 80003a2:	9801      	ldr	r0, [sp, #4]
 80003a4:	2800      	cmp	r0, #0
 80003a6:	f000 8090 	beq.w	80004ca <Ld_printf+0x31e>
                 if (flagcnt>9) flagcnt=9;
 80003aa:	2809      	cmp	r0, #9
 80003ac:	f340 80bc 	ble.w	8000528 <Ld_printf+0x37c>
 80003b0:	2009      	movs	r0, #9
 80003b2:	9001      	str	r0, [sp, #4]
 80003b4:	2206      	movs	r2, #6
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003b6:	2107      	movs	r1, #7
 
 
         // 위의 flag에 따라 출력.
         if (flagcnt){
                 if (flagcnt>9) flagcnt=9;
                 remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80003b8:	230a      	movs	r3, #10
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003ba:	3901      	subs	r1, #1
                 retval *= num;
 80003bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003c0:	1c4c      	adds	r4, r1, #1
                 retval *= num;
 80003c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003c6:	d1f8      	bne.n	80003ba <Ld_printf+0x20e>
 
 
         // 위의 flag에 따라 출력.
         if (flagcnt){
                 if (flagcnt>9) flagcnt=9;
                 remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80003c8:	fb9b f7f3 	sdiv	r7, fp, r3
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003cc:	2802      	cmp	r0, #2
 
 
         // 위의 flag에 따라 출력.
         if (flagcnt){
                 if (flagcnt>9) flagcnt=9;
                 remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80003ce:	fb03 b717 	mls	r7, r3, r7, fp
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003d2:	f000 8106 	beq.w	80005e2 <Ld_printf+0x436>
 80003d6:	4613      	mov	r3, r2
 
 
         // 위의 flag에 따라 출력.
         if (flagcnt){
                 if (flagcnt>9) flagcnt=9;
                 remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80003d8:	240a      	movs	r4, #10
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003da:	3b01      	subs	r3, #1
                 retval *= num;
 80003dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003e0:	1c59      	adds	r1, r3, #1
                 retval *= num;
 80003e2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 80003e6:	d1f8      	bne.n	80003da <Ld_printf+0x22e>
 {
         int        i, j;
         char        c, *s=fmt, tol[10];
         bool        flag0=false, flagl=false;        // "%08lx"에서 '0', 'l'의 존재 여부.
         long        flagcnt=0;                                        // "%08lx"에서 "8"을 찾아서 long형으로.
         bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
 80003e8:	4643      	mov	r3, r8
 80003ea:	f04f 0901 	mov.w	r9, #1
 80003ee:	46a8      	mov	r8, r5
 80003f0:	461d      	mov	r5, r3
 80003f2:	e010      	b.n	8000416 <Ld_printf+0x26a>
                 for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                         result = remainder/divisor;
                         remainder %= divisor;
 
 
                         if (result!=0 || divisor==1) leading_zero = false;
 80003f4:	2c01      	cmp	r4, #1
 80003f6:	d016      	beq.n	8000426 <Ld_printf+0x27a>
 
 
                         if (leading_zero==true){
 80003f8:	f1b9 0f00 	cmp.w	r9, #0
 80003fc:	d013      	beq.n	8000426 <Ld_printf+0x27a>
                                 if (flag0)        print_byte('0');
 80003fe:	2030      	movs	r0, #48	; 0x30
 8000400:	b905      	cbnz	r5, 8000404 <Ld_printf+0x258>
                                 else                print_byte(' ');
 8000402:	2020      	movs	r0, #32
 8000404:	47b0      	blx	r6
         if (flagcnt){
                 if (flagcnt>9) flagcnt=9;
                 remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 
 
                 for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000406:	4b35      	ldr	r3, [pc, #212]	; (80004dc <Ld_printf+0x330>)
 8000408:	fb83 2304 	smull	r2, r3, r3, r4
 800040c:	17e4      	asrs	r4, r4, #31
 800040e:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8000412:	2c00      	cmp	r4, #0
 8000414:	dd7f      	ble.n	8000516 <Ld_printf+0x36a>
                         result = remainder/divisor;
 8000416:	fb97 f3f4 	sdiv	r3, r7, r4
 
                         if (leading_zero==true){
                                 if (flag0)        print_byte('0');
                                 else                print_byte(' ');
                         }
                         else print_byte((char)(result)+'0');
 800041a:	b2d8      	uxtb	r0, r3
 800041c:	3030      	adds	r0, #48	; 0x30
                 remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 
 
                 for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                         result = remainder/divisor;
                         remainder %= divisor;
 800041e:	fb04 7713 	mls	r7, r4, r3, r7
 
 
                         if (result!=0 || divisor==1) leading_zero = false;
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0e6      	beq.n	80003f4 <Ld_printf+0x248>
 
                         if (leading_zero==true){
                                 if (flag0)        print_byte('0');
                                 else                print_byte(' ');
                         }
                         else print_byte((char)(result)+'0');
 8000426:	47b0      	blx	r6
 8000428:	f04f 0900 	mov.w	r9, #0
 800042c:	e7eb      	b.n	8000406 <Ld_printf+0x25a>
         return;
 }
 
 void PrintChar(char *fmt, char c)
 {
         print_byte(c);
 800042e:	47b0      	blx	r6
 8000430:	e6c5      	b.n	80001be <Ld_printf+0x12>
                                         break;
                                 case 'x' :
                                         PrintHex(format, va_arg(args, int));
                                         break;
                                 case 's' :
                                         PrintString(format, va_arg(args, char *));
 8000432:	f8d8 4000 	ldr.w	r4, [r8]
 8000436:	f108 0804 	add.w	r8, r8, #4
         }
         return;
 }
 
 void PrintString(char *fmt, char *s){
         if (!fmt || !s) return;
 800043a:	2c00      	cmp	r4, #0
 800043c:	f43f aebf 	beq.w	80001be <Ld_printf+0x12>
         while (*s) print_byte(*s++);
 8000440:	7820      	ldrb	r0, [r4, #0]
 8000442:	2800      	cmp	r0, #0
 8000444:	f43f aebb 	beq.w	80001be <Ld_printf+0x12>
 8000448:	47b0      	blx	r6
 800044a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800044e:	2800      	cmp	r0, #0
 8000450:	d1fa      	bne.n	8000448 <Ld_printf+0x29c>
 8000452:	e6b4      	b.n	80001be <Ld_printf+0x12>
                         }
                         tol[j] = '\0';
                         i--;
                         DecToLong(tol, &flagcnt);
                 }
                 else if (c=='0') flag0=true;
 8000454:	2b30      	cmp	r3, #48	; 0x30
 8000456:	bf08      	it	eq
 8000458:	f04f 0801 	moveq.w	r8, #1
 800045c:	e799      	b.n	8000392 <Ld_printf+0x1e6>
 800045e:	fa9a f38a 	rev.w	r3, sl
                 else continue;
         }
 
 
         s = (char *)(&l);
         l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	46e9      	mov	r9, sp
                         else print_byte(lHex);
                 }
         }
         else {
                 for (i=0; i<4; i++){
                         c = s[i];
 8000466:	f819 3b01 	ldrb.w	r3, [r9], #1
                         // lower 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
                         }
                         else print_byte(lHex);
 800046a:	2201      	movs	r2, #1
                 for (i=0; i<4; i++){
                         c = s[i];
         
                         // get upper 4 bits and lower 4 bits.
                         uHex = ((c>>4)&0x0f);
                         lHex = ((c>>0)&0x0f);
 800046c:	f003 040f 	and.w	r4, r3, #15
 
 
                         // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                         if (uHex!=0) leading_zero = false;
 8000470:	091b      	lsrs	r3, r3, #4
                         // lower 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
                         }
                         else print_byte(lHex);
 8000472:	f04f 0700 	mov.w	r7, #0
                         uHex = ((c>>4)&0x0f);
                         lHex = ((c>>0)&0x0f);
 
 
                         // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                         if (uHex!=0) leading_zero = false;
 8000476:	d019      	beq.n	80004ac <Ld_printf+0x300>
                         if (uHex<10) uHex+='0';
 8000478:	2b09      	cmp	r3, #9
                         else         uHex+='A'-10;
 800047a:	bf88      	it	hi
 800047c:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                         lHex = ((c>>0)&0x0f);
 
 
                         // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                         if (uHex!=0) leading_zero = false;
                         if (uHex<10) uHex+='0';
 8000480:	f240 80b7 	bls.w	80005f2 <Ld_printf+0x446>
                         else         uHex+='A'-10;
                         if (!leading_zero) print_byte(uHex);
 8000484:	47b0      	blx	r6
 8000486:	2300      	movs	r3, #0
                         
                         if (lHex!=0 || i==3) leading_zero = false;
 8000488:	b9b4      	cbnz	r4, 80004b8 <Ld_printf+0x30c>
 800048a:	2f03      	cmp	r7, #3
 800048c:	f000 80b4 	beq.w	80005f8 <Ld_printf+0x44c>
                         if (lHex<10) lHex+='0';
                         else         lHex+='A'-10;
                         if (!leading_zero) print_byte(lHex);
 8000490:	2201      	movs	r2, #1
 8000492:	2b00      	cmp	r3, #0
 8000494:	f000 80b0 	beq.w	80005f8 <Ld_printf+0x44c>
                         }
                         else print_byte(lHex);
                 }
         }
         else {
                 for (i=0; i<4; i++){
 8000498:	3701      	adds	r7, #1
 800049a:	2f04      	cmp	r7, #4
 800049c:	f43f ae8f 	beq.w	80001be <Ld_printf+0x12>
                         c = s[i];
 80004a0:	f819 3b01 	ldrb.w	r3, [r9], #1
         
                         // get upper 4 bits and lower 4 bits.
                         uHex = ((c>>4)&0x0f);
                         lHex = ((c>>0)&0x0f);
 80004a4:	f003 040f 	and.w	r4, r3, #15
 
 
                         // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                         if (uHex!=0) leading_zero = false;
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	d1e5      	bne.n	8000478 <Ld_printf+0x2cc>
                         if (uHex<10) uHex+='0';
                         else         uHex+='A'-10;
                         if (!leading_zero) print_byte(uHex);
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 80a0 	beq.w	80005f2 <Ld_printf+0x446>
 80004b2:	2301      	movs	r3, #1
                         
                         if (lHex!=0 || i==3) leading_zero = false;
 80004b4:	2c00      	cmp	r4, #0
 80004b6:	d0e8      	beq.n	800048a <Ld_printf+0x2de>
                         if (lHex<10) lHex+='0';
 80004b8:	2c09      	cmp	r4, #9
                         else         lHex+='A'-10;
 80004ba:	bf88      	it	hi
 80004bc:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                         if (uHex<10) uHex+='0';
                         else         uHex+='A'-10;
                         if (!leading_zero) print_byte(uHex);
                         
                         if (lHex!=0 || i==3) leading_zero = false;
                         if (lHex<10) lHex+='0';
 80004c0:	f240 809a 	bls.w	80005f8 <Ld_printf+0x44c>
                         else         lHex+='A'-10;
                         if (!leading_zero) print_byte(lHex);
 80004c4:	47b0      	blx	r6
 80004c6:	2200      	movs	r2, #0
 80004c8:	e7e6      	b.n	8000498 <Ld_printf+0x2ec>
 
                         if (leading_zero==true){
                                 if (flag0)        print_byte('0');
                                 else                print_byte(' ');
                         }
                         else print_byte((char)(result)+'0');
 80004ca:	270a      	movs	r7, #10
 80004cc:	2201      	movs	r2, #1
 80004ce:	4c04      	ldr	r4, [pc, #16]	; (80004e0 <Ld_printf+0x334>)
 80004d0:	e013      	b.n	80004fa <Ld_printf+0x34e>
 80004d2:	bf00      	nop
 80004d4:	08000121 	.word	0x08000121
 80004d8:	08000161 	.word	0x08000161
 80004dc:	66666667 	.word	0x66666667
 80004e0:	3b9aca00 	.word	0x3b9aca00
                         result = remainder/divisor;
                         remainder %= divisor;
 
 
                         if (result!=0 || divisor==1) leading_zero = false;
                         if (leading_zero==false) print_byte((char)(result)+'0');
 80004e4:	47b0      	blx	r6
 80004e6:	2200      	movs	r2, #0
                 }
         } else {
                 remainder = l;
 
 
                 for (divisor=1000000000; divisor>0; divisor/=10){
 80004e8:	4b45      	ldr	r3, [pc, #276]	; (8000600 <Ld_printf+0x454>)
 80004ea:	3f01      	subs	r7, #1
 80004ec:	fb83 1304 	smull	r1, r3, r3, r4
 80004f0:	ea4f 74e4 	mov.w	r4, r4, asr #31
 80004f4:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 80004f8:	d00e      	beq.n	8000518 <Ld_printf+0x36c>
                         result = remainder/divisor;
 80004fa:	fb9b f3f4 	sdiv	r3, fp, r4
                         remainder %= divisor;
 
 
                         if (result!=0 || divisor==1) leading_zero = false;
                         if (leading_zero==false) print_byte((char)(result)+'0');
 80004fe:	b2d8      	uxtb	r0, r3
 8000500:	3030      	adds	r0, #48	; 0x30
                 remainder = l;
 
 
                 for (divisor=1000000000; divisor>0; divisor/=10){
                         result = remainder/divisor;
                         remainder %= divisor;
 8000502:	fb04 bb13 	mls	fp, r4, r3, fp
 
 
                         if (result!=0 || divisor==1) leading_zero = false;
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1ec      	bne.n	80004e4 <Ld_printf+0x338>
 800050a:	2c01      	cmp	r4, #1
 800050c:	d0ea      	beq.n	80004e4 <Ld_printf+0x338>
                         if (leading_zero==false) print_byte((char)(result)+'0');
 800050e:	2a00      	cmp	r2, #0
 8000510:	d0e8      	beq.n	80004e4 <Ld_printf+0x338>
 8000512:	2201      	movs	r2, #1
 8000514:	e7e8      	b.n	80004e8 <Ld_printf+0x33c>
 8000516:	4645      	mov	r5, r8
                         switch (*s++){
                                 case 'c' :
                                         PrintChar(format, va_arg(args, int));
                                         break;
                                 case 'd' :
                                         PrintDec(format, va_arg(args, int));
 8000518:	46d0      	mov	r8, sl
 800051a:	e650      	b.n	80001be <Ld_printf+0x12>
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
                 if (c=='d') break;
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800051c:	2200      	movs	r2, #0
 800051e:	a805      	add	r0, sp, #20
 8000520:	e72f      	b.n	8000382 <Ld_printf+0x1d6>
 
         // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
         for (i=0; (c=s[i]) != 0; i++){
                 if (c=='x') break;
                 else if (c>='1' && c<='9'){
                         for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000522:	2200      	movs	r2, #0
 8000524:	a805      	add	r0, sp, #20
 8000526:	e6bd      	b.n	80002a4 <Ld_printf+0xf8>
 int Power(int num, int cnt){
         long retval=num;
         cnt--;
 
 
         while (cnt--){
 8000528:	2801      	cmp	r0, #1
 800052a:	f1a0 0102 	sub.w	r1, r0, #2
 800052e:	d04a      	beq.n	80005c6 <Ld_printf+0x41a>
 8000530:	1ec2      	subs	r2, r0, #3
 8000532:	e741      	b.n	80003b8 <Ld_printf+0x20c>
 void PrintHex(char *fmt, int l){
         int                i, j;
         char        c, *s=fmt, tol[10];
         bool        flag0=false, flagl=false;        // flags.
         long        flagcnt=0;
         bool        leading_zero=true;
 8000534:	f04f 0901 	mov.w	r9, #1
                         flagcnt--;
                 }
 
 
                 // byte단위의 data를 Hex로 출력.
                 for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000538:	f1c3 0308 	rsb	r3, r3, #8
 800053c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000540:	ea4f 0a63 	mov.w	sl, r3, asr #1
 8000544:	f1ba 0f03 	cmp.w	sl, #3
 8000548:	f73f ae39 	bgt.w	80001be <Ld_printf+0x12>
 800054c:	46ab      	mov	fp, r5
 800054e:	44ea      	add	sl, sp
 8000550:	ac01      	add	r4, sp, #4
                         c = s[i];
 8000552:	f81a 3b01 	ldrb.w	r3, [sl], #1
                                 
                         // get upper 4 bits and lower 4 bits.
                         uHex = ((c>>4)&0x0f);
                         lHex = ((c>>0)&0x0f);
 8000556:	f003 050f 	and.w	r5, r3, #15
 
 
                         // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                         // upper 4 bits를 ascii code로.
                         if (uHex!=0) leading_zero = false;
 800055a:	091b      	lsrs	r3, r3, #4
 800055c:	d009      	beq.n	8000572 <Ld_printf+0x3c6>
                         if (uHex<10) uHex+='0';
 800055e:	2b09      	cmp	r3, #9
                         else         uHex+='A'-10;
 8000560:	bf88      	it	hi
 8000562:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
 
 
                         // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                         // upper 4 bits를 ascii code로.
                         if (uHex!=0) leading_zero = false;
                         if (uHex<10) uHex+='0';
 8000566:	d941      	bls.n	80005ec <Ld_printf+0x440>
                         // upper 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
                         }
                         else print_byte(uHex);
 8000568:	47b0      	blx	r6
                         
                         // lower 4 bits를 ascii code로.
                         if (lHex!=0) leading_zero = false;
 800056a:	b97d      	cbnz	r5, 800058c <Ld_printf+0x3e0>
                         if (lHex<10) lHex+='0';
 800056c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000570:	e010      	b.n	8000594 <Ld_printf+0x3e8>
                         if (uHex<10) uHex+='0';
                         else         uHex+='A'-10;
 
 
                         // upper 4 bits 출력.
                         if (leading_zero){
 8000572:	f1b9 0f00 	cmp.w	r9, #0
 8000576:	d039      	beq.n	80005ec <Ld_printf+0x440>
                                 if (flag0) print_byte('0');
 8000578:	b187      	cbz	r7, 800059c <Ld_printf+0x3f0>
 800057a:	2030      	movs	r0, #48	; 0x30
 800057c:	47b0      	blx	r6
                                 else       print_byte(' ');
                         }
                         else print_byte(uHex);
                         
                         // lower 4 bits를 ascii code로.
                         if (lHex!=0) leading_zero = false;
 800057e:	b92d      	cbnz	r5, 800058c <Ld_printf+0x3e0>
                         else         lHex+='A'-10;
 
 
                         // lower 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
 8000580:	2030      	movs	r0, #48	; 0x30
 8000582:	47b0      	blx	r6
                         flagcnt--;
                 }
 
 
                 // byte단위의 data를 Hex로 출력.
                 for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8000584:	45a2      	cmp	sl, r4
 8000586:	d1e4      	bne.n	8000552 <Ld_printf+0x3a6>
 8000588:	465d      	mov	r5, fp
 800058a:	e618      	b.n	80001be <Ld_printf+0x12>
                         }
                         else print_byte(uHex);
                         
                         // lower 4 bits를 ascii code로.
                         if (lHex!=0) leading_zero = false;
                         if (lHex<10) lHex+='0';
 800058c:	2d09      	cmp	r5, #9
 800058e:	d9ed      	bls.n	800056c <Ld_printf+0x3c0>
                         else         lHex+='A'-10;
 8000590:	f105 0037 	add.w	r0, r5, #55	; 0x37
                         // lower 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
                         }
                         else print_byte(lHex);
 8000594:	47b0      	blx	r6
 8000596:	f04f 0900 	mov.w	r9, #0
 800059a:	e7f3      	b.n	8000584 <Ld_printf+0x3d8>
 
 
                         // upper 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
 800059c:	2020      	movs	r0, #32
 800059e:	47b0      	blx	r6
                         }
                         else print_byte(uHex);
                         
                         // lower 4 bits를 ascii code로.
                         if (lHex!=0) leading_zero = false;
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d1f3      	bne.n	800058c <Ld_printf+0x3e0>
 
 
                         // lower 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
 80005a4:	2020      	movs	r0, #32
 80005a6:	47b0      	blx	r6
 80005a8:	e7ec      	b.n	8000584 <Ld_printf+0x3d8>
                         else         lHex+='A'-10;
 
 
                         // lower 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
 80005aa:	b13f      	cbz	r7, 80005bc <Ld_printf+0x410>
 80005ac:	2030      	movs	r0, #48	; 0x30
 80005ae:	47b0      	blx	r6
 void PrintHex(char *fmt, int l){
         int                i, j;
         char        c, *s=fmt, tol[10];
         bool        flag0=false, flagl=false;        // flags.
         long        flagcnt=0;
         bool        leading_zero=true;
 80005b0:	f04f 0901 	mov.w	r9, #1
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
                         }
                         else print_byte(lHex);
                         
                         flagcnt--;
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	e7bd      	b.n	8000538 <Ld_printf+0x38c>
 
 
                         // lower 4 bits 출력.
                         if (leading_zero){
                                 if (flag0) print_byte('0');
                                 else       print_byte(' ');
 80005bc:	2020      	movs	r0, #32
 80005be:	47b0      	blx	r6
 void PrintHex(char *fmt, int l){
         int                i, j;
         char        c, *s=fmt, tol[10];
         bool        flag0=false, flagl=false;        // flags.
         long        flagcnt=0;
         bool        leading_zero=true;
 80005c0:	f04f 0901 	mov.w	r9, #1
 80005c4:	e7f6      	b.n	80005b4 <Ld_printf+0x408>
 
 
         // 위의 flag에 따라 출력.
         if (flagcnt){
                 if (flagcnt>9) flagcnt=9;
                 remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <Ld_printf+0x454>)
 80005c8:	fb83 370b 	smull	r3, r7, r3, fp
 80005cc:	ea4f 73eb 	mov.w	r3, fp, asr #31
 80005d0:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
 80005d4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80005d8:	ebab 0743 	sub.w	r7, fp, r3, lsl #1
 80005dc:	f06f 0301 	mvn.w	r3, #1
 80005e0:	e6fa      	b.n	80003d8 <Ld_printf+0x22c>
         while (*s) print_byte(*s++);
         return;
 }
 
 int Power(int num, int cnt){
         long retval=num;
 80005e2:	240a      	movs	r4, #10
 80005e4:	e700      	b.n	80003e8 <Ld_printf+0x23c>
                         c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                         
                         // lower 4 bits를 가져와서 ascii code로.
                         lHex = ((c>>0)&0x0f);
                         if (lHex!=0) leading_zero=false;
                         if (lHex<10) lHex+='0';
 80005e6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80005ea:	e689      	b.n	8000300 <Ld_printf+0x154>
 
 
                         // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                         // upper 4 bits를 ascii code로.
                         if (uHex!=0) leading_zero = false;
                         if (uHex<10) uHex+='0';
 80005ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80005f0:	e7ba      	b.n	8000568 <Ld_printf+0x3bc>
                         lHex = ((c>>0)&0x0f);
 
 
                         // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                         if (uHex!=0) leading_zero = false;
                         if (uHex<10) uHex+='0';
 80005f2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80005f6:	e745      	b.n	8000484 <Ld_printf+0x2d8>
                         else         uHex+='A'-10;
                         if (!leading_zero) print_byte(uHex);
                         
                         if (lHex!=0 || i==3) leading_zero = false;
                         if (lHex<10) lHex+='0';
 80005f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80005fc:	e762      	b.n	80004c4 <Ld_printf+0x318>
 80005fe:	bf00      	nop
 8000600:	66666667 	.word	0x66666667

08000604 <Hw_1_second>:
{
    for(;time >0;time--);
}

UTIL_DEF void Hw_1_second()
{
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <Hw_1_second+0x8>)
#include "Util.h"


UTIL_DEF void Hw_second(volatile unsigned int time)
{
    for(;time >0;time--);
 8000606:	3b01      	subs	r3, #1
 8000608:	d1fd      	bne.n	8000606 <Hw_1_second+0x2>
}

UTIL_DEF void Hw_1_second()
{
    Hw_second(8065960);
 800060a:	4770      	bx	lr
 800060c:	007b13a8 	.word	0x007b13a8

08000610 <Reset_Handler>:
extern void Systick_Handler(void);

volatile unsigned long Hw_ISR_VectorTable[100] __attribute__((align(512)));

void Reset_Handler(void)
{
 8000610:	4668      	mov	r0, sp
 8000612:	f020 0107 	bic.w	r1, r0, #7
 8000616:	468d      	mov	sp, r1
    unsigned long *pulSrc, *pulDest;

    pulSrc = &_ld_data_start;
    pulDest = &_ld_ram_start;

    if(pulSrc != pulDest)
 8000618:	4a45      	ldr	r2, [pc, #276]	; (8000730 <Reset_Handler+0x120>)
 800061a:	4946      	ldr	r1, [pc, #280]	; (8000734 <Reset_Handler+0x124>)
extern void Systick_Handler(void);

volatile unsigned long Hw_ISR_VectorTable[100] __attribute__((align(512)));

void Reset_Handler(void)
{
 800061c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
    unsigned long *pulSrc, *pulDest;

    pulSrc = &_ld_data_start;
    pulDest = &_ld_ram_start;

    if(pulSrc != pulDest)
 800061e:	4291      	cmp	r1, r2
 8000620:	d00f      	beq.n	8000642 <Reset_Handler+0x32>
    {
        for(;pulDest < &_ld_data_end; )
 8000622:	4845      	ldr	r0, [pc, #276]	; (8000738 <Reset_Handler+0x128>)
 8000624:	4282      	cmp	r2, r0
 8000626:	d20c      	bcs.n	8000642 <Reset_Handler+0x32>
 8000628:	43d4      	mvns	r4, r2
 800062a:	460b      	mov	r3, r1
 800062c:	4420      	add	r0, r4
 800062e:	f020 0003 	bic.w	r0, r0, #3
 8000632:	3004      	adds	r0, #4
 8000634:	4408      	add	r0, r1
        {
            *(pulDest++) = *(pulSrc++);
 8000636:	f853 1b04 	ldr.w	r1, [r3], #4
    pulSrc = &_ld_data_start;
    pulDest = &_ld_ram_start;

    if(pulSrc != pulDest)
    {
        for(;pulDest < &_ld_data_end; )
 800063a:	4283      	cmp	r3, r0
        {
            *(pulDest++) = *(pulSrc++);
 800063c:	f842 1b04 	str.w	r1, [r2], #4
    pulSrc = &_ld_data_start;
    pulDest = &_ld_ram_start;

    if(pulSrc != pulDest)
    {
        for(;pulDest < &_ld_data_end; )
 8000640:	d1f9      	bne.n	8000636 <Reset_Handler+0x26>
            *(pulDest++) = *(pulSrc++);

        }
    }

    for(pulDest = &_ld_bss_start; pulDest <  &_ld_bss_end; )
 8000642:	493e      	ldr	r1, [pc, #248]	; (800073c <Reset_Handler+0x12c>)
 8000644:	4a3e      	ldr	r2, [pc, #248]	; (8000740 <Reset_Handler+0x130>)
 8000646:	4291      	cmp	r1, r2
 8000648:	d20b      	bcs.n	8000662 <Reset_Handler+0x52>
 800064a:	43c8      	mvns	r0, r1
 800064c:	4402      	add	r2, r0
 800064e:	f022 0203 	bic.w	r2, r2, #3
 8000652:	3204      	adds	r2, #4
 8000654:	460b      	mov	r3, r1
 8000656:	440a      	add	r2, r1
    {
        *(pulDest++) = 0;
 8000658:	2100      	movs	r1, #0
 800065a:	f843 1b04 	str.w	r1, [r3], #4
            *(pulDest++) = *(pulSrc++);

        }
    }

    for(pulDest = &_ld_bss_start; pulDest <  &_ld_bss_end; )
 800065e:	4293      	cmp	r3, r2
 8000660:	d1fb      	bne.n	800065a <Reset_Handler+0x4a>
    unsigned long HSEStatus = 0, StartUpCounter = 0;
    Init_Data();

    //////	FLASH Memory Latency ����(2 Wait State)
	// 0x40022000 FLASH_ACR RRRR RRRR RRRR RRRR RRRR RRRR RRxx xxxx xxxx
	*(volatile unsigned long *) 0x40022000 |=  0x10;		// xxxx xxxx xxxx xxxx xxxx xxxx xxx1 xxxx bit4 PRFTBE=1 Set.
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <Reset_Handler+0x134>)
	*(volatile unsigned long *) 0x40022000 &= ~(0x7);	// bit2,1,0 Clear
	*(volatile unsigned long *) 0x40022000 |=  0x2;		// bit2,1,0 = 0,1,0
    // flash memory latency end

    *(volatile unsigned long *)0x40021000 |= 0x1;
 8000664:	4938      	ldr	r1, [pc, #224]	; (8000748 <Reset_Handler+0x138>)
    unsigned long HSEStatus = 0, StartUpCounter = 0;
    Init_Data();

    //////	FLASH Memory Latency ����(2 Wait State)
	// 0x40022000 FLASH_ACR RRRR RRRR RRRR RRRR RRRR RRRR RRxx xxxx xxxx
	*(volatile unsigned long *) 0x40022000 |=  0x10;		// xxxx xxxx xxxx xxxx xxxx xxxx xxx1 xxxx bit4 PRFTBE=1 Set.
 8000666:	681a      	ldr	r2, [r3, #0]
    {
        HSEStatus = (0x40021000  & 0x1 << 1);
        StartUpCounter++;
    }while((HSEStatus == 0) && (StartUpCounter != 0x0500));
  
    *(volatile unsigned long *) 0x40021004 &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);            
 8000668:	4838      	ldr	r0, [pc, #224]	; (800074c <Reset_Handler+0x13c>)
    unsigned long HSEStatus = 0, StartUpCounter = 0;
    Init_Data();

    //////	FLASH Memory Latency ����(2 Wait State)
	// 0x40022000 FLASH_ACR RRRR RRRR RRRR RRRR RRRR RRRR RRxx xxxx xxxx
	*(volatile unsigned long *) 0x40022000 |=  0x10;		// xxxx xxxx xxxx xxxx xxxx xxxx xxx1 xxxx bit4 PRFTBE=1 Set.
 800066a:	f042 0210 	orr.w	r2, r2, #16
 800066e:	601a      	str	r2, [r3, #0]
    
    *(volatile unsigned long *) 0x40021004 |= (0x7<<18);                  
    
    *(volatile unsigned long *) 0x40021000 |= 0x01 << 24;                   

    while( ((*(volatile unsigned long *) 0x40021000) & 0x01 << 25) == 0);   
 8000670:	460a      	mov	r2, r1
    Init_Data();

    //////	FLASH Memory Latency ����(2 Wait State)
	// 0x40022000 FLASH_ACR RRRR RRRR RRRR RRRR RRRR RRRR RRxx xxxx xxxx
	*(volatile unsigned long *) 0x40022000 |=  0x10;		// xxxx xxxx xxxx xxxx xxxx xxxx xxx1 xxxx bit4 PRFTBE=1 Set.
	*(volatile unsigned long *) 0x40022000 &= ~(0x7);	// bit2,1,0 Clear
 8000672:	681c      	ldr	r4, [r3, #0]
 8000674:	f024 0407 	bic.w	r4, r4, #7
 8000678:	601c      	str	r4, [r3, #0]
	*(volatile unsigned long *) 0x40022000 |=  0x2;		// bit2,1,0 = 0,1,0
 800067a:	681c      	ldr	r4, [r3, #0]
 800067c:	f044 0402 	orr.w	r4, r4, #2
 8000680:	601c      	str	r4, [r3, #0]
    // flash memory latency end

    *(volatile unsigned long *)0x40021000 |= 0x1;
 8000682:	680b      	ldr	r3, [r1, #0]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	600b      	str	r3, [r1, #0]
    {
        HSEStatus = (0x40021000  & 0x1 << 1);
        StartUpCounter++;
    }while((HSEStatus == 0) && (StartUpCounter != 0x0500));
  
    *(volatile unsigned long *) 0x40021004 &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);            
 800068a:	6803      	ldr	r3, [r0, #0]
 800068c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000690:	6003      	str	r3, [r0, #0]
    
    *(volatile unsigned long *) 0x40021004 |= (0x7<<18);                  
 8000692:	6803      	ldr	r3, [r0, #0]
 8000694:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000698:	6003      	str	r3, [r0, #0]
    
    *(volatile unsigned long *) 0x40021000 |= 0x01 << 24;                   
 800069a:	680b      	ldr	r3, [r1, #0]
 800069c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006a0:	600b      	str	r3, [r1, #0]

    while( ((*(volatile unsigned long *) 0x40021000) & 0x01 << 25) == 0);   
 80006a2:	6813      	ldr	r3, [r2, #0]
 80006a4:	019b      	lsls	r3, r3, #6
 80006a6:	d5fc      	bpl.n	80006a2 <Reset_Handler+0x92>
    
    *(volatile unsigned long *) 0x40021004 &= ~0x3; 
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <Reset_Handler+0x13c>)
    
    *(volatile unsigned long *) 0x40021004 |= 0x2; 
    
    while( ((*(volatile unsigned long *) 0x40021004) & 0xC) != 0x08); 
 80006aa:	461a      	mov	r2, r3
    
    *(volatile unsigned long *) 0x40021000 |= 0x01 << 24;                   

    while( ((*(volatile unsigned long *) 0x40021000) & 0x01 << 25) == 0);   
    
    *(volatile unsigned long *) 0x40021004 &= ~0x3; 
 80006ac:	6819      	ldr	r1, [r3, #0]
 80006ae:	f021 0103 	bic.w	r1, r1, #3
 80006b2:	6019      	str	r1, [r3, #0]
    
    *(volatile unsigned long *) 0x40021004 |= 0x2; 
 80006b4:	6819      	ldr	r1, [r3, #0]
 80006b6:	f041 0102 	orr.w	r1, r1, #2
 80006ba:	6019      	str	r1, [r3, #0]
    
    while( ((*(volatile unsigned long *) 0x40021004) & 0xC) != 0x08); 
 80006bc:	6813      	ldr	r3, [r2, #0]
 80006be:	f003 030c 	and.w	r3, r3, #12
 80006c2:	2b08      	cmp	r3, #8
 80006c4:	d1fa      	bne.n	80006bc <Reset_Handler+0xac>
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
    *(volatile unsigned long *)0x40010004 &= ~(7<<24);
    *(volatile unsigned long *)0x40010004 |= (1<<26);

     *(volatile unsigned long *) 0x40013810 = 0x0;           
     *(volatile unsigned long *) 0x4001380C = 0x200C;        
 80006c6:	f242 070c 	movw	r7, #8204	; 0x200c
    
    *(volatile unsigned long *) 0x40021004 |= 0x2; 
    
    while( ((*(volatile unsigned long *) 0x40021004) & 0xC) != 0x08); 

    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0;         
 80006ca:	4921      	ldr	r1, [pc, #132]	; (8000750 <Reset_Handler+0x140>)
    
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <Reset_Handler+0x144>)
    
    *(volatile unsigned long *) 0x40021004 |= 0x2; 
    
    while( ((*(volatile unsigned long *) 0x40021004) & 0xC) != 0x08); 

    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0;         
 80006ce:	680b      	ldr	r3, [r1, #0]
    
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
 80006d0:	4c21      	ldr	r4, [pc, #132]	; (8000758 <Reset_Handler+0x148>)
    
    *(volatile unsigned long *) 0x40021004 |= 0x2; 
    
    while( ((*(volatile unsigned long *) 0x40021004) & 0xC) != 0x08); 

    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0;         
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
    *(volatile unsigned long *)0x40010004 &= ~(7<<24);
 80006d6:	4a21      	ldr	r2, [pc, #132]	; (800075c <Reset_Handler+0x14c>)
    
    *(volatile unsigned long *) 0x40021004 |= 0x2; 
    
    while( ((*(volatile unsigned long *) 0x40021004) & 0xC) != 0x08); 

    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0;         
 80006d8:	f043 0305 	orr.w	r3, r3, #5
 80006dc:	600b      	str	r3, [r1, #0]
    
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
 80006de:	6004      	str	r4, [r0, #0]
    *(volatile unsigned long *)0x40010004 &= ~(7<<24);
 80006e0:	6813      	ldr	r3, [r2, #0]
    *(volatile unsigned long *)0x40010004 |= (1<<26);

     *(volatile unsigned long *) 0x40013810 = 0x0;           
 80006e2:	f8df e094 	ldr.w	lr, [pc, #148]	; 8000778 <Reset_Handler+0x168>
    while( ((*(volatile unsigned long *) 0x40021004) & 0xC) != 0x08); 

    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0;         
    
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
    *(volatile unsigned long *)0x40010004 &= ~(7<<24);
 80006e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ea:	6013      	str	r3, [r2, #0]
    *(volatile unsigned long *)0x40010004 |= (1<<26);
 80006ec:	6811      	ldr	r1, [r2, #0]

     *(volatile unsigned long *) 0x40013810 = 0x0;           
     *(volatile unsigned long *) 0x4001380C = 0x200C;        
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <Reset_Handler+0x150>)
     *(volatile unsigned long *) 0x40013814 = 0x0;           
 80006f0:	4e1c      	ldr	r6, [pc, #112]	; (8000764 <Reset_Handler+0x154>)
     *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8;   
 80006f2:	4c1d      	ldr	r4, [pc, #116]	; (8000768 <Reset_Handler+0x158>)
    
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
    *(volatile unsigned long *)0x40010004 &= ~(7<<24);
    *(volatile unsigned long *)0x40010004 |= (1<<26);

     *(volatile unsigned long *) 0x40013810 = 0x0;           
 80006f4:	2000      	movs	r0, #0

    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0;         
    
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
    *(volatile unsigned long *)0x40010004 &= ~(7<<24);
    *(volatile unsigned long *)0x40010004 |= (1<<26);
 80006f6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000

     *(volatile unsigned long *) 0x40013810 = 0x0;           
     *(volatile unsigned long *) 0x4001380C = 0x200C;        
     *(volatile unsigned long *) 0x40013814 = 0x0;           
     *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8;   
 80006fa:	f44f 759c 	mov.w	r5, #312	; 0x138

    *(volatile unsigned long *) 0x40021018 |= 0x1 << 14 | 0x1 << 2 | 0x1 << 0;         
    
    *(volatile unsigned long *)0x40010804 = 0x888444B4;
    *(volatile unsigned long *)0x40010004 &= ~(7<<24);
    *(volatile unsigned long *)0x40010004 |= (1<<26);
 80006fe:	6011      	str	r1, [r2, #0]

     *(volatile unsigned long *) 0x40013810 = 0x0;           
 8000700:	f8ce 0000 	str.w	r0, [lr]
     *(volatile unsigned long *) 0x4001380C = 0x200C;        
 8000704:	601f      	str	r7, [r3, #0]
     *(volatile unsigned long *) 0x40013814 = 0x0;           
 8000706:	6030      	str	r0, [r6, #0]
     *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8;   
 8000708:	6025      	str	r5, [r4, #0]
     *(volatile unsigned long *) 0x4001380C |= 0x2000;       
 800070a:	681a      	ldr	r2, [r3, #0]

    //인터럽트 2 - 벡터를 RAM 영역으로 이동
    *(volatile unsigned long *)0xE000ED08 = (unsigned long)Hw_ISR_VectorTable;
 800070c:	4917      	ldr	r1, [pc, #92]	; (800076c <Reset_Handler+0x15c>)
 800070e:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000712:	f5a4 4496 	sub.w	r4, r4, #19200	; 0x4b00

     *(volatile unsigned long *) 0x40013810 = 0x0;           
     *(volatile unsigned long *) 0x4001380C = 0x200C;        
     *(volatile unsigned long *) 0x40013814 = 0x0;           
     *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8;   
     *(volatile unsigned long *) 0x4001380C |= 0x2000;       
 8000716:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000

    //인터럽트 2 - 벡터를 RAM 영역으로 이동
    *(volatile unsigned long *)0xE000ED08 = (unsigned long)Hw_ISR_VectorTable;
    
    //인터럽트 3 - SYSTEM TIMER interrupt 설정
    Hw_ISR_VectorTable[ 15 ] = Systick_Handler;
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <Reset_Handler+0x160>)

     *(volatile unsigned long *) 0x40013810 = 0x0;           
     *(volatile unsigned long *) 0x4001380C = 0x200C;        
     *(volatile unsigned long *) 0x40013814 = 0x0;           
     *(volatile unsigned long *) 0x40013808 = 19 << 4 | 8;   
     *(volatile unsigned long *) 0x4001380C |= 0x2000;       
 800071c:	601a      	str	r2, [r3, #0]

    //인터럽트 2 - 벡터를 RAM 영역으로 이동
    *(volatile unsigned long *)0xE000ED08 = (unsigned long)Hw_ISR_VectorTable;
 800071e:	6021      	str	r1, [r4, #0]
    
    //인터럽트 3 - SYSTEM TIMER interrupt 설정
    Hw_ISR_VectorTable[ 15 ] = Systick_Handler;
    
    main();
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <Reset_Handler+0x164>)

    //인터럽트 2 - 벡터를 RAM 영역으로 이동
    *(volatile unsigned long *)0xE000ED08 = (unsigned long)Hw_ISR_VectorTable;
    
    //인터럽트 3 - SYSTEM TIMER interrupt 설정
    Hw_ISR_VectorTable[ 15 ] = Systick_Handler;
 8000722:	63c8      	str	r0, [r1, #60]	; 0x3c
    
    main();
 8000724:	4798      	blx	r3

}
 8000726:	e8bd 40f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, lr}
 800072a:	4685      	mov	sp, r0
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000
 8000734:	20000000 	.word	0x20000000
 8000738:	20000014 	.word	0x20000014
 800073c:	20000014 	.word	0x20000014
 8000740:	200001a4 	.word	0x200001a4
 8000744:	40022000 	.word	0x40022000
 8000748:	40021000 	.word	0x40021000
 800074c:	40021004 	.word	0x40021004
 8000750:	40021018 	.word	0x40021018
 8000754:	40010804 	.word	0x40010804
 8000758:	888444b4 	.word	0x888444b4
 800075c:	40010004 	.word	0x40010004
 8000760:	4001380c 	.word	0x4001380c
 8000764:	40013814 	.word	0x40013814
 8000768:	40013808 	.word	0x40013808
 800076c:	20000014 	.word	0x20000014
 8000770:	08000839 	.word	0x08000839
 8000774:	08000009 	.word	0x08000009
 8000778:	40013810 	.word	0x40013810

0800077c <GPIO_Init>:
        }
    }
}

GPIO_DEF void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
  uint32_t tmpreg = 0x00, pinmask = 0x00;
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000780:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000782:	06eb      	lsls	r3, r5, #27
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000784:	bf48      	it	mi
 8000786:	788b      	ldrbmi	r3, [r1, #2]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000788:	8809      	ldrh	r1, [r1, #0]
{
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
  uint32_t tmpreg = 0x00, pinmask = 0x00;
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800078a:	f005 0e0f 	and.w	lr, r5, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800078e:	bf48      	it	mi
 8000790:	ea4e 0e03 	orrmi.w	lr, lr, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000794:	f011 0fff 	tst.w	r1, #255	; 0xff
 8000798:	d021      	beq.n	80007de <GPIO_Init+0x62>
  {
    tmpreg = GPIOx->CRL;
 800079a:	6806      	ldr	r6, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800079c:	2300      	movs	r3, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 800079e:	2701      	movs	r7, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80007a0:	f04f 080f 	mov.w	r8, #15
 80007a4:	e002      	b.n	80007ac <GPIO_Init+0x30>
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007a6:	3301      	adds	r3, #1
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d017      	beq.n	80007dc <GPIO_Init+0x60>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80007ac:	fa07 f203 	lsl.w	r2, r7, r3
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007b0:	ea02 0401 	and.w	r4, r2, r1
      if (currentpin == pos)
 80007b4:	4294      	cmp	r4, r2
 80007b6:	d1f6      	bne.n	80007a6 <GPIO_Init+0x2a>
      {
        pos = pinpos << 2;
 80007b8:	009a      	lsls	r2, r3, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80007ba:	fa08 fc02 	lsl.w	ip, r8, r2
        tmpreg &= ~pinmask;
 80007be:	ea26 060c 	bic.w	r6, r6, ip
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007c2:	fa0e f202 	lsl.w	r2, lr, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80007c6:	2d28      	cmp	r5, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007c8:	ea46 0602 	orr.w	r6, r6, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80007cc:	d031      	beq.n	8000832 <GPIO_Init+0xb6>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80007ce:	2d48      	cmp	r5, #72	; 0x48
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007d0:	f103 0301 	add.w	r3, r3, #1
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80007d4:	bf08      	it	eq
 80007d6:	6104      	streq	r4, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007d8:	2b08      	cmp	r3, #8
 80007da:	d1e7      	bne.n	80007ac <GPIO_Init+0x30>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80007dc:	6006      	str	r6, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80007de:	29ff      	cmp	r1, #255	; 0xff
 80007e0:	d923      	bls.n	800082a <GPIO_Init+0xae>
  {
    tmpreg = GPIOx->CRH;
 80007e2:	6846      	ldr	r6, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007e4:	2300      	movs	r3, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80007e6:	2701      	movs	r7, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80007e8:	f04f 0c0f 	mov.w	ip, #15
 80007ec:	e002      	b.n	80007f4 <GPIO_Init+0x78>
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007ee:	3301      	adds	r3, #1
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d019      	beq.n	8000828 <GPIO_Init+0xac>
 80007f4:	f103 0208 	add.w	r2, r3, #8
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80007f8:	fa07 f202 	lsl.w	r2, r7, r2
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80007fc:	ea02 0401 	and.w	r4, r2, r1
      if (currentpin == pos)
 8000800:	4294      	cmp	r4, r2
 8000802:	d1f4      	bne.n	80007ee <GPIO_Init+0x72>
      {
        pos = pinpos << 2;
 8000804:	009a      	lsls	r2, r3, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000806:	fa0c f802 	lsl.w	r8, ip, r2
        tmpreg &= ~pinmask;
 800080a:	ea26 0608 	bic.w	r6, r6, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800080e:	fa0e f202 	lsl.w	r2, lr, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000812:	2d28      	cmp	r5, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000814:	ea46 0602 	orr.w	r6, r6, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000818:	d009      	beq.n	800082e <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800081a:	2d48      	cmp	r5, #72	; 0x48
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800081c:	f103 0301 	add.w	r3, r3, #1
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000820:	bf08      	it	eq
 8000822:	6104      	streq	r4, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000824:	2b08      	cmp	r3, #8
 8000826:	d1e5      	bne.n	80007f4 <GPIO_Init+0x78>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000828:	6046      	str	r6, [r0, #4]
 800082a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800082e:	6144      	str	r4, [r0, #20]
 8000830:	e7dd      	b.n	80007ee <GPIO_Init+0x72>
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000832:	6144      	str	r4, [r0, #20]
 8000834:	e7b7      	b.n	80007a6 <GPIO_Init+0x2a>
 8000836:	bf00      	nop

08000838 <Systick_Handler>:
    
    
}

SYSTICK_DEF void Systick_Handler(void)
{
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <Hw_Init>:

#include "Hw.h"

HW_DEF void Hw_Init()
{
    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <Hw_Init+0x44>)
#define HW_LOCAL

#include "Hw.h"

HW_DEF void Hw_Init()
{
 800083e:	b570      	push	{r4, r5, r6, lr}
    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
 8000840:	699a      	ldr	r2, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStructure;
    
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000842:	2610      	movs	r6, #16

#include "Hw.h"

HW_DEF void Hw_Init()
{
    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
 8000844:	f042 0204 	orr.w	r2, r2, #4
 8000848:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2Periph_GPIOB;
 800084a:	699a      	ldr	r2, [r3, #24]
#define HW_LOCAL

#include "Hw.h"

HW_DEF void Hw_Init()
{
 800084c:	b082      	sub	sp, #8
    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
    RCC->APB2ENR |= RCC_APB2Periph_GPIOB;
 800084e:	f042 0208 	orr.w	r2, r2, #8
 8000852:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
 8000854:	699a      	ldr	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2Periph_GPIOD;
    GPIO_InitTypeDef GPIO_InitStructure;
    
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
 8000856:	f44f 7548 	mov.w	r5, #800	; 0x320

HW_DEF void Hw_Init()
{
    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
    RCC->APB2ENR |= RCC_APB2Periph_GPIOB;
    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
 800085a:	4332      	orrs	r2, r6
 800085c:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2Periph_GPIOD;
 800085e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStructure;
    
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000860:	2403      	movs	r4, #3
HW_DEF void Hw_Init()
{
    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
    RCC->APB2ENR |= RCC_APB2Periph_GPIOB;
    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
    RCC->APB2ENR |= RCC_APB2Periph_GPIOD;
 8000862:	f042 0220 	orr.w	r2, r2, #32
 8000866:	619a      	str	r2, [r3, #24]
    
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <Hw_Init+0x48>)
 800086a:	a901      	add	r1, sp, #4
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <Hw_Init+0x4c>)
    RCC->APB2ENR |= RCC_APB2Periph_GPIOC;
    RCC->APB2ENR |= RCC_APB2Periph_GPIOD;
    GPIO_InitTypeDef GPIO_InitStructure;
    
    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
 800086e:	f8ad 5004 	strh.w	r5, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000872:	f88d 4006 	strb.w	r4, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000876:	f88d 6007 	strb.w	r6, [sp, #7]
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 800087a:	4798      	blx	r3

 800087c:	b002      	add	sp, #8
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	40010c00 	.word	0x40010c00
 8000888:	0800077d 	.word	0x0800077d

0800088c <Red_On>:
#include "Hw_Led.h"


LED_DEF void Red_On()
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 800088c:	4a02      	ldr	r2, [pc, #8]	; (8000898 <Red_On+0xc>)
 800088e:	6953      	ldr	r3, [r2, #20]
 8000890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4770      	bx	lr
 8000898:	40010c00 	.word	0x40010c00

0800089c <Red_Off>:
}
LED_DEF void Red_Off()
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 800089c:	4a02      	ldr	r2, [pc, #8]	; (80008a8 <Red_Off+0xc>)
 800089e:	6913      	ldr	r3, [r2, #16]
 80008a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a4:	6113      	str	r3, [r2, #16]
 80008a6:	4770      	bx	lr
 80008a8:	40010c00 	.word	0x40010c00

080008ac <Yellow_On>:
}
LED_DEF void Yellow_On()
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 80008ac:	4a02      	ldr	r2, [pc, #8]	; (80008b8 <Yellow_On+0xc>)
 80008ae:	6953      	ldr	r3, [r2, #20]
 80008b0:	f043 0320 	orr.w	r3, r3, #32
 80008b4:	6153      	str	r3, [r2, #20]
 80008b6:	4770      	bx	lr
 80008b8:	40010c00 	.word	0x40010c00

080008bc <Yellow_Off>:
}
LED_DEF void Yellow_Off()
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 80008bc:	4a02      	ldr	r2, [pc, #8]	; (80008c8 <Yellow_Off+0xc>)
 80008be:	6913      	ldr	r3, [r2, #16]
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6113      	str	r3, [r2, #16]
 80008c6:	4770      	bx	lr
 80008c8:	40010c00 	.word	0x40010c00

080008cc <Blue_On>:
}
LED_DEF void Blue_On()
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 80008cc:	4a02      	ldr	r2, [pc, #8]	; (80008d8 <Blue_On+0xc>)
 80008ce:	6953      	ldr	r3, [r2, #20]
 80008d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4770      	bx	lr
 80008d8:	40010c00 	.word	0x40010c00

080008dc <Blue_Off>:
}
LED_DEF void Blue_Off()
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 80008dc:	4a02      	ldr	r2, [pc, #8]	; (80008e8 <Blue_Off+0xc>)
 80008de:	6913      	ldr	r3, [r2, #16]
 80008e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e4:	6113      	str	r3, [r2, #16]
 80008e6:	4770      	bx	lr
 80008e8:	40010c00 	.word	0x40010c00

080008ec <Led_OffAll>:
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
}
LED_DEF void Red_Off()
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <Led_OffAll+0x1c>)
 80008ee:	691a      	ldr	r2, [r3, #16]
 80008f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008f4:	611a      	str	r2, [r3, #16]
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
}
LED_DEF void Yellow_Off()
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 80008f6:	691a      	ldr	r2, [r3, #16]
 80008f8:	f042 0220 	orr.w	r2, r2, #32
 80008fc:	611a      	str	r2, [r3, #16]
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
}
LED_DEF void Blue_Off()
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000904:	611a      	str	r2, [r3, #16]
 8000906:	4770      	bx	lr
 8000908:	40010c00 	.word	0x40010c00

0800090c <Led_Mult>:
    Yellow_Off();
    Blue_Off();
}

LED_DEF void Led_Mult(uint32_t count)
{
 800090c:	b570      	push	{r4, r5, r6, lr}
    for(;count>0; count--)
 800090e:	4606      	mov	r6, r0
 8000910:	2800      	cmp	r0, #0
 8000912:	d02a      	beq.n	800096a <Led_Mult+0x5e>
 8000914:	4d15      	ldr	r5, [pc, #84]	; (800096c <Led_Mult+0x60>)
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
}
LED_DEF void Red_Off()
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
 8000916:	4c16      	ldr	r4, [pc, #88]	; (8000970 <Led_Mult+0x64>)
 8000918:	6923      	ldr	r3, [r4, #16]
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	6123      	str	r3, [r4, #16]
}
LED_DEF void Yellow_On()
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 8000920:	6963      	ldr	r3, [r4, #20]
 8000922:	f043 0320 	orr.w	r3, r3, #32
 8000926:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
}
LED_DEF void Blue_On()
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 8000928:	6963      	ldr	r3, [r4, #20]
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	6163      	str	r3, [r4, #20]
    for(;count>0; count--)
    {
        Red_Off();
        Yellow_On();
        Blue_On();
        Hw_1_second();
 8000930:	47a8      	blx	r5
#include "Hw_Led.h"


LED_DEF void Red_On()
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 8000932:	6963      	ldr	r3, [r4, #20]
 8000934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000938:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
}
LED_DEF void Yellow_Off()
{
    GPIO_LED->BSRR |= GPIO_LED2_PIN;
 800093a:	6923      	ldr	r3, [r4, #16]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	6123      	str	r3, [r4, #16]
}
LED_DEF void Blue_On()
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
 8000942:	6963      	ldr	r3, [r4, #20]
 8000944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000948:	6163      	str	r3, [r4, #20]
        Hw_1_second();

        Red_On();
        Yellow_Off();
        Blue_On();
        Hw_1_second();
 800094a:	47a8      	blx	r5
#include "Hw_Led.h"


LED_DEF void Red_On()
{
    GPIO_LED->BRR |= GPIO_LED1_PIN;
 800094c:	6963      	ldr	r3, [r4, #20]
 800094e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000952:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BSRR |= GPIO_LED1_PIN;
}
LED_DEF void Yellow_On()
{
    GPIO_LED->BRR |= GPIO_LED2_PIN;
 8000954:	6963      	ldr	r3, [r4, #20]
 8000956:	f043 0320 	orr.w	r3, r3, #32
 800095a:	6163      	str	r3, [r4, #20]
{
    GPIO_LED->BRR |= GPIO_LED3_PIN;
}
LED_DEF void Blue_Off()
{
    GPIO_LED->BSRR |= GPIO_LED3_PIN;
 800095c:	6923      	ldr	r3, [r4, #16]
 800095e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000962:	6123      	str	r3, [r4, #16]
        Hw_1_second();

        Red_On();
        Yellow_On();
        Blue_Off();
        Hw_1_second();
 8000964:	47a8      	blx	r5
    Blue_Off();
}

LED_DEF void Led_Mult(uint32_t count)
{
    for(;count>0; count--)
 8000966:	3e01      	subs	r6, #1
 8000968:	d1d6      	bne.n	8000918 <Led_Mult+0xc>
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	08000605 	.word	0x08000605
 8000970:	40010c00 	.word	0x40010c00

08000974 <Led_Test>:
        
    }
}

LED_DEF void Led_Test()
{
 8000974:	b508      	push	{r3, lr}
        Hw_1_second();
        Led_OffAll();
        Hw_1_second();
        Led_OnAll();
    #else
        Led_Mult(30);
 8000976:	201e      	movs	r0, #30
 8000978:	4b01      	ldr	r3, [pc, #4]	; (8000980 <Led_Test+0xc>)
 800097a:	4798      	blx	r3
 800097c:	bd08      	pop	{r3, pc}
 800097e:	bf00      	nop
 8000980:	0800090d 	.word	0x0800090d

08000984 <Led_main_menu>:
    return 0;
}


LED_MENU_DEF int Led_main_menu(void)
{
 8000984:	b570      	push	{r4, r5, r6, lr}
    int key;

    Ld_printf("\n\n");
 8000986:	4e16      	ldr	r6, [pc, #88]	; (80009e0 <Led_main_menu+0x5c>)
    Ld_printf("-------------------------------------------------\n");
 8000988:	4d16      	ldr	r5, [pc, #88]	; (80009e4 <Led_main_menu+0x60>)

LED_MENU_DEF int Led_main_menu(void)
{
    int key;

    Ld_printf("\n\n");
 800098a:	4c17      	ldr	r4, [pc, #92]	; (80009e8 <Led_main_menu+0x64>)
 800098c:	4630      	mov	r0, r6
 800098e:	47a0      	blx	r4
    Ld_printf("-------------------------------------------------\n");
 8000990:	4628      	mov	r0, r5
 8000992:	47a0      	blx	r4
    Ld_printf("                 LED MAIN MENU\n");
 8000994:	4815      	ldr	r0, [pc, #84]	; (80009ec <Led_main_menu+0x68>)
 8000996:	47a0      	blx	r4
    Ld_printf("-------------------------------------------------\n");
 8000998:	4628      	mov	r0, r5
 800099a:	47a0      	blx	r4
    Ld_printf(" 1. Red On                                         \n");
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <Led_main_menu+0x6c>)
 800099e:	47a0      	blx	r4
    Ld_printf(" 2. Red Off                                         \n");
 80009a0:	4814      	ldr	r0, [pc, #80]	; (80009f4 <Led_main_menu+0x70>)
 80009a2:	47a0      	blx	r4
    Ld_printf(" 3. Yellow On                                         \n");
 80009a4:	4814      	ldr	r0, [pc, #80]	; (80009f8 <Led_main_menu+0x74>)
 80009a6:	47a0      	blx	r4
    Ld_printf(" 4. Yellow Off                                         \n");
 80009a8:	4814      	ldr	r0, [pc, #80]	; (80009fc <Led_main_menu+0x78>)
 80009aa:	47a0      	blx	r4
    Ld_printf(" 5. Blue On                                         \n");
 80009ac:	4814      	ldr	r0, [pc, #80]	; (8000a00 <Led_main_menu+0x7c>)
 80009ae:	47a0      	blx	r4
    Ld_printf(" 6. Blue Off                                         \n");
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <Led_main_menu+0x80>)
 80009b2:	47a0      	blx	r4
    Ld_printf(" 7. Led Test                                         \n");
 80009b4:	4814      	ldr	r0, [pc, #80]	; (8000a08 <Led_main_menu+0x84>)
 80009b6:	47a0      	blx	r4
    Ld_printf(" 8. System_Information                                         \n");
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <Led_main_menu+0x88>)
 80009ba:	47a0      	blx	r4
    Ld_printf(" 9. Test                                         \n");
 80009bc:	4814      	ldr	r0, [pc, #80]	; (8000a10 <Led_main_menu+0x8c>)
 80009be:	47a0      	blx	r4
    Ld_printf(" 0. Test                                         \n");
 80009c0:	4814      	ldr	r0, [pc, #80]	; (8000a14 <Led_main_menu+0x90>)
 80009c2:	47a0      	blx	r4
    Ld_printf("-------------------------------------------------\n");
 80009c4:	4628      	mov	r0, r5
 80009c6:	47a0      	blx	r4
    Ld_printf(" q. LED Menu QUIT\n");
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <Led_main_menu+0x94>)
 80009ca:	47a0      	blx	r4
    Ld_printf("-------------------------------------------------\n");
 80009cc:	4628      	mov	r0, r5
 80009ce:	47a0      	blx	r4
    Ld_printf("\n\n");
 80009d0:	4630      	mov	r0, r6
 80009d2:	47a0      	blx	r4

    Ld_printf("SELECT THE COMMAND NUMBER : ");
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <Led_main_menu+0x98>)
 80009d6:	47a0      	blx	r4
    key=Ld_get_byte();
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <Led_main_menu+0x9c>)
 80009da:	4798      	blx	r3

    return key;
}
 80009dc:	bd70      	pop	{r4, r5, r6, pc}
 80009de:	bf00      	nop
 80009e0:	08000ce0 	.word	0x08000ce0
 80009e4:	08000ce4 	.word	0x08000ce4
 80009e8:	080001ad 	.word	0x080001ad
 80009ec:	08000d18 	.word	0x08000d18
 80009f0:	08000d38 	.word	0x08000d38
 80009f4:	08000d70 	.word	0x08000d70
 80009f8:	08000da8 	.word	0x08000da8
 80009fc:	08000de0 	.word	0x08000de0
 8000a00:	08000e1c 	.word	0x08000e1c
 8000a04:	08000e54 	.word	0x08000e54
 8000a08:	08000e8c 	.word	0x08000e8c
 8000a0c:	08000ec4 	.word	0x08000ec4
 8000a10:	08000f08 	.word	0x08000f08
 8000a14:	08000f3c 	.word	0x08000f3c
 8000a18:	08000f70 	.word	0x08000f70
 8000a1c:	08000f84 	.word	0x08000f84
 8000a20:	08000149 	.word	0x08000149

08000a24 <Led_Main>:
LED_MENU_DEF int Led_main_menu(void);
static unsigned short flag;


LED_MENU_DEF int Led_Main(void)
{
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	4c71      	ldr	r4, [pc, #452]	; (8000bec <Led_Main+0x1c8>)
                Ld_printf("No.j\n");

            break;

            case 'k':
                Ld_printf("No.k\n");
 8000a28:	4d71      	ldr	r5, [pc, #452]	; (8000bf0 <Led_Main+0x1cc>)
LED_MENU_DEF int Led_Main(void)
{

    int key;

    while((key=Led_main_menu()) != 0)
 8000a2a:	47a0      	blx	r4
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	f000 808b 	beq.w	8000b48 <Led_Main+0x124>
    {
        switch(key)
 8000a32:	3830      	subs	r0, #48	; 0x30
 8000a34:	2841      	cmp	r0, #65	; 0x41
 8000a36:	d8f8      	bhi.n	8000a2a <Led_Main+0x6>
 8000a38:	a301      	add	r3, pc, #4	; (adr r3, 8000a40 <Led_Main+0x1c>)
 8000a3a:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8000a3e:	bf00      	nop
 8000a40:	08000be5 	.word	0x08000be5
 8000a44:	08000bdb 	.word	0x08000bdb
 8000a48:	08000bd1 	.word	0x08000bd1
 8000a4c:	08000bc7 	.word	0x08000bc7
 8000a50:	08000bbd 	.word	0x08000bbd
 8000a54:	08000bb3 	.word	0x08000bb3
 8000a58:	08000ba9 	.word	0x08000ba9
 8000a5c:	08000b9f 	.word	0x08000b9f
 8000a60:	08000b95 	.word	0x08000b95
 8000a64:	08000b8f 	.word	0x08000b8f
 8000a68:	08000a2b 	.word	0x08000a2b
 8000a6c:	08000a2b 	.word	0x08000a2b
 8000a70:	08000a2b 	.word	0x08000a2b
 8000a74:	08000a2b 	.word	0x08000a2b
 8000a78:	08000a2b 	.word	0x08000a2b
 8000a7c:	08000a2b 	.word	0x08000a2b
 8000a80:	08000a2b 	.word	0x08000a2b
 8000a84:	08000a2b 	.word	0x08000a2b
 8000a88:	08000a2b 	.word	0x08000a2b
 8000a8c:	08000a2b 	.word	0x08000a2b
 8000a90:	08000a2b 	.word	0x08000a2b
 8000a94:	08000a2b 	.word	0x08000a2b
 8000a98:	08000a2b 	.word	0x08000a2b
 8000a9c:	08000a2b 	.word	0x08000a2b
 8000aa0:	08000a2b 	.word	0x08000a2b
 8000aa4:	08000a2b 	.word	0x08000a2b
 8000aa8:	08000a2b 	.word	0x08000a2b
 8000aac:	08000a2b 	.word	0x08000a2b
 8000ab0:	08000a2b 	.word	0x08000a2b
 8000ab4:	08000a2b 	.word	0x08000a2b
 8000ab8:	08000a2b 	.word	0x08000a2b
 8000abc:	08000a2b 	.word	0x08000a2b
 8000ac0:	08000a2b 	.word	0x08000a2b
 8000ac4:	08000a2b 	.word	0x08000a2b
 8000ac8:	08000a2b 	.word	0x08000a2b
 8000acc:	08000a2b 	.word	0x08000a2b
 8000ad0:	08000a2b 	.word	0x08000a2b
 8000ad4:	08000a2b 	.word	0x08000a2b
 8000ad8:	08000a2b 	.word	0x08000a2b
 8000adc:	08000a2b 	.word	0x08000a2b
 8000ae0:	08000a2b 	.word	0x08000a2b
 8000ae4:	08000a2b 	.word	0x08000a2b
 8000ae8:	08000a2b 	.word	0x08000a2b
 8000aec:	08000a2b 	.word	0x08000a2b
 8000af0:	08000a2b 	.word	0x08000a2b
 8000af4:	08000a2b 	.word	0x08000a2b
 8000af8:	08000a2b 	.word	0x08000a2b
 8000afc:	08000a2b 	.word	0x08000a2b
 8000b00:	08000a2b 	.word	0x08000a2b
 8000b04:	08000b89 	.word	0x08000b89
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b7d 	.word	0x08000b7d
 8000b10:	08000b77 	.word	0x08000b77
 8000b14:	08000b71 	.word	0x08000b71
 8000b18:	08000b6b 	.word	0x08000b6b
 8000b1c:	08000b65 	.word	0x08000b65
 8000b20:	08000b5f 	.word	0x08000b5f
 8000b24:	08000b59 	.word	0x08000b59
 8000b28:	08000b53 	.word	0x08000b53
 8000b2c:	08000b4d 	.word	0x08000b4d
 8000b30:	08000a2b 	.word	0x08000a2b
 8000b34:	08000a2b 	.word	0x08000a2b
 8000b38:	08000a2b 	.word	0x08000a2b
 8000b3c:	08000a2b 	.word	0x08000a2b
 8000b40:	08000a2b 	.word	0x08000a2b
 8000b44:	08000b49 	.word	0x08000b49
            case 'q':
                return 0;
        }
    }
    return 0;
}
 8000b48:	2000      	movs	r0, #0
 8000b4a:	bd38      	pop	{r3, r4, r5, pc}
                Ld_printf("No.j\n");

            break;

            case 'k':
                Ld_printf("No.k\n");
 8000b4c:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <Led_Main+0x1d0>)
 8000b4e:	47a8      	blx	r5

            break;
 8000b50:	e76b      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.i\n");

            break;

            case 'j':
                Ld_printf("No.j\n");
 8000b52:	4829      	ldr	r0, [pc, #164]	; (8000bf8 <Led_Main+0x1d4>)
 8000b54:	47a8      	blx	r5

            break;
 8000b56:	e768      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.h\n");
       
            break;

            case 'i':
                Ld_printf("No.i\n");
 8000b58:	4828      	ldr	r0, [pc, #160]	; (8000bfc <Led_Main+0x1d8>)
 8000b5a:	47a8      	blx	r5

            break;
 8000b5c:	e765      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.g\n");
     
            break;

            case 'h':
                Ld_printf("No.h\n");
 8000b5e:	4828      	ldr	r0, [pc, #160]	; (8000c00 <Led_Main+0x1dc>)
 8000b60:	47a8      	blx	r5
       
            break;
 8000b62:	e762      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.f\n");

            break;

            case 'g':
                Ld_printf("No.g\n");
 8000b64:	4827      	ldr	r0, [pc, #156]	; (8000c04 <Led_Main+0x1e0>)
 8000b66:	47a8      	blx	r5
     
            break;
 8000b68:	e75f      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.e\n");
     
            break;

            case 'f':
                Ld_printf("No.f\n");
 8000b6a:	4827      	ldr	r0, [pc, #156]	; (8000c08 <Led_Main+0x1e4>)
 8000b6c:	47a8      	blx	r5

            break;
 8000b6e:	e75c      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.d\n");
        
            break;

            case 'e':
                Ld_printf("No.e\n");
 8000b70:	4826      	ldr	r0, [pc, #152]	; (8000c0c <Led_Main+0x1e8>)
 8000b72:	47a8      	blx	r5
     
            break;
 8000b74:	e759      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.c\n");
            
            break;

            case 'd':
                Ld_printf("No.d\n");
 8000b76:	4826      	ldr	r0, [pc, #152]	; (8000c10 <Led_Main+0x1ec>)
 8000b78:	47a8      	blx	r5
        
            break;
 8000b7a:	e756      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.b\n");
              
            break;

            case 'c':
                Ld_printf("No.c\n");
 8000b7c:	4825      	ldr	r0, [pc, #148]	; (8000c14 <Led_Main+0x1f0>)
 8000b7e:	47a8      	blx	r5
            
            break;
 8000b80:	e753      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.a\n");
            
            break;

            case 'b':
                Ld_printf("No.b\n");
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <Led_Main+0x1f4>)
 8000b84:	47a8      	blx	r5
              
            break;
 8000b86:	e750      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.0\n");
             
            break;

            case 'a':
                Ld_printf("No.a\n");
 8000b88:	4824      	ldr	r0, [pc, #144]	; (8000c1c <Led_Main+0x1f8>)
 8000b8a:	47a8      	blx	r5
            
            break;
 8000b8c:	e74d      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.8\n");
                Ld_System_Information();
            break;

            case '9':
                Ld_printf("No.9\n");
 8000b8e:	4824      	ldr	r0, [pc, #144]	; (8000c20 <Led_Main+0x1fc>)
 8000b90:	47a8      	blx	r5
                
            break;
 8000b92:	e74a      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.7\n");
                Led_Test();
            break;

            case '8':
                Ld_printf("No.8\n");
 8000b94:	4823      	ldr	r0, [pc, #140]	; (8000c24 <Led_Main+0x200>)
 8000b96:	47a8      	blx	r5
                Ld_System_Information();
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <Led_Main+0x204>)
 8000b9a:	4798      	blx	r3
            break;
 8000b9c:	e745      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.6\n");
                Blue_Off();
            break;

            case '7':
                Ld_printf("No.7\n");
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <Led_Main+0x208>)
 8000ba0:	47a8      	blx	r5
                Led_Test();
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <Led_Main+0x20c>)
 8000ba4:	4798      	blx	r3
            break;
 8000ba6:	e740      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.5\n");
                Blue_On();
            break;

            case '6':
                Ld_printf("No.6\n");
 8000ba8:	4822      	ldr	r0, [pc, #136]	; (8000c34 <Led_Main+0x210>)
 8000baa:	47a8      	blx	r5
                Blue_Off();
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <Led_Main+0x214>)
 8000bae:	4798      	blx	r3
            break;
 8000bb0:	e73b      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.4\n");
                Yellow_Off();
            break;
              
            case '5':
                Ld_printf("No.5\n");
 8000bb2:	4822      	ldr	r0, [pc, #136]	; (8000c3c <Led_Main+0x218>)
 8000bb4:	47a8      	blx	r5
                Blue_On();
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <Led_Main+0x21c>)
 8000bb8:	4798      	blx	r3
            break;
 8000bba:	e736      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.3\n");
                Yellow_On();
            break;

            case '4':
                Ld_printf("No.4\n");
 8000bbc:	4821      	ldr	r0, [pc, #132]	; (8000c44 <Led_Main+0x220>)
 8000bbe:	47a8      	blx	r5
                Yellow_Off();
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <Led_Main+0x224>)
 8000bc2:	4798      	blx	r3
            break;
 8000bc4:	e731      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.2\n");
                Red_Off();
            break;
            
            case '3':
                Ld_printf("No.3\n");
 8000bc6:	4821      	ldr	r0, [pc, #132]	; (8000c4c <Led_Main+0x228>)
 8000bc8:	47a8      	blx	r5
                Yellow_On();
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <Led_Main+0x22c>)
 8000bcc:	4798      	blx	r3
            break;
 8000bce:	e72c      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.1\n");
                Red_On();
            break;

            case '2':
                Ld_printf("No.2\n");
 8000bd0:	4820      	ldr	r0, [pc, #128]	; (8000c54 <Led_Main+0x230>)
 8000bd2:	47a8      	blx	r5
                Red_Off();
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <Led_Main+0x234>)
 8000bd6:	4798      	blx	r3
            break;
 8000bd8:	e727      	b.n	8000a2a <Led_Main+0x6>
    while((key=Led_main_menu()) != 0)
    {
        switch(key)
        {
            case '1':
                Ld_printf("No.1\n");
 8000bda:	4820      	ldr	r0, [pc, #128]	; (8000c5c <Led_Main+0x238>)
 8000bdc:	47a8      	blx	r5
                Red_On();
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <Led_Main+0x23c>)
 8000be0:	4798      	blx	r3
            break;
 8000be2:	e722      	b.n	8000a2a <Led_Main+0x6>
                Ld_printf("No.9\n");
                
            break;

            case '0':
                Ld_printf("No.0\n");
 8000be4:	481f      	ldr	r0, [pc, #124]	; (8000c64 <Led_Main+0x240>)
 8000be6:	47a8      	blx	r5
             
            break;
 8000be8:	e71f      	b.n	8000a2a <Led_Main+0x6>
 8000bea:	bf00      	nop
 8000bec:	08000985 	.word	0x08000985
 8000bf0:	080001ad 	.word	0x080001ad
 8000bf4:	08001044 	.word	0x08001044
 8000bf8:	0800103c 	.word	0x0800103c
 8000bfc:	08001034 	.word	0x08001034
 8000c00:	0800102c 	.word	0x0800102c
 8000c04:	08001024 	.word	0x08001024
 8000c08:	0800101c 	.word	0x0800101c
 8000c0c:	08001014 	.word	0x08001014
 8000c10:	0800100c 	.word	0x0800100c
 8000c14:	08001004 	.word	0x08001004
 8000c18:	08000ffc 	.word	0x08000ffc
 8000c1c:	08000ff4 	.word	0x08000ff4
 8000c20:	08000fe4 	.word	0x08000fe4
 8000c24:	08000fdc 	.word	0x08000fdc
 8000c28:	080000d5 	.word	0x080000d5
 8000c2c:	08000fd4 	.word	0x08000fd4
 8000c30:	08000975 	.word	0x08000975
 8000c34:	08000fcc 	.word	0x08000fcc
 8000c38:	080008dd 	.word	0x080008dd
 8000c3c:	08000fc4 	.word	0x08000fc4
 8000c40:	080008cd 	.word	0x080008cd
 8000c44:	08000fbc 	.word	0x08000fbc
 8000c48:	080008bd 	.word	0x080008bd
 8000c4c:	08000fb4 	.word	0x08000fb4
 8000c50:	080008ad 	.word	0x080008ad
 8000c54:	08000fac 	.word	0x08000fac
 8000c58:	0800089d 	.word	0x0800089d
 8000c5c:	08000fa4 	.word	0x08000fa4
 8000c60:	0800088d 	.word	0x0800088d
 8000c64:	08000fec 	.word	0x08000fec
 8000c68:	43535953 	.word	0x43535953
 8000c6c:	465f4b4c 	.word	0x465f4b4c
 8000c70:	75716572 	.word	0x75716572
 8000c74:	79636e65 	.word	0x79636e65
 8000c78:	25203d20 	.word	0x25203d20
 8000c7c:	00000a64 	.word	0x00000a64
 8000c80:	4b4c4348 	.word	0x4b4c4348
 8000c84:	6572465f 	.word	0x6572465f
 8000c88:	6e657571 	.word	0x6e657571
 8000c8c:	3d207963 	.word	0x3d207963
 8000c90:	0a642520 	.word	0x0a642520
 8000c94:	00000000 	.word	0x00000000
 8000c98:	4b4c4350 	.word	0x4b4c4350
 8000c9c:	72465f31 	.word	0x72465f31
 8000ca0:	65757165 	.word	0x65757165
 8000ca4:	2079636e 	.word	0x2079636e
 8000ca8:	6425203d 	.word	0x6425203d
 8000cac:	0000000a 	.word	0x0000000a
 8000cb0:	4b4c4350 	.word	0x4b4c4350
 8000cb4:	72465f32 	.word	0x72465f32
 8000cb8:	65757165 	.word	0x65757165
 8000cbc:	2079636e 	.word	0x2079636e
 8000cc0:	6425203d 	.word	0x6425203d
 8000cc4:	0000000a 	.word	0x0000000a
 8000cc8:	43434441 	.word	0x43434441
 8000ccc:	465f4b4c 	.word	0x465f4b4c
 8000cd0:	75716572 	.word	0x75716572
 8000cd4:	79636e65 	.word	0x79636e65
 8000cd8:	25203d20 	.word	0x25203d20
 8000cdc:	00000a64 	.word	0x00000a64
 8000ce0:	00000a0a 	.word	0x00000a0a
 8000ce4:	2d2d2d2d 	.word	0x2d2d2d2d
 8000ce8:	2d2d2d2d 	.word	0x2d2d2d2d
 8000cec:	2d2d2d2d 	.word	0x2d2d2d2d
 8000cf0:	2d2d2d2d 	.word	0x2d2d2d2d
 8000cf4:	2d2d2d2d 	.word	0x2d2d2d2d
 8000cf8:	2d2d2d2d 	.word	0x2d2d2d2d
 8000cfc:	2d2d2d2d 	.word	0x2d2d2d2d
 8000d00:	2d2d2d2d 	.word	0x2d2d2d2d
 8000d04:	2d2d2d2d 	.word	0x2d2d2d2d
 8000d08:	2d2d2d2d 	.word	0x2d2d2d2d
 8000d0c:	2d2d2d2d 	.word	0x2d2d2d2d
 8000d10:	2d2d2d2d 	.word	0x2d2d2d2d
 8000d14:	00000a2d 	.word	0x00000a2d
 8000d18:	20202020 	.word	0x20202020
 8000d1c:	20202020 	.word	0x20202020
 8000d20:	20202020 	.word	0x20202020
 8000d24:	20202020 	.word	0x20202020
 8000d28:	44454c20 	.word	0x44454c20
 8000d2c:	49414d20 	.word	0x49414d20
 8000d30:	454d204e 	.word	0x454d204e
 8000d34:	000a554e 	.word	0x000a554e
 8000d38:	202e3120 	.word	0x202e3120
 8000d3c:	20646552 	.word	0x20646552
 8000d40:	20206e4f 	.word	0x20206e4f
 8000d44:	20202020 	.word	0x20202020
 8000d48:	20202020 	.word	0x20202020
 8000d4c:	20202020 	.word	0x20202020
 8000d50:	20202020 	.word	0x20202020
 8000d54:	20202020 	.word	0x20202020
 8000d58:	20202020 	.word	0x20202020
 8000d5c:	20202020 	.word	0x20202020
 8000d60:	20202020 	.word	0x20202020
 8000d64:	20202020 	.word	0x20202020
 8000d68:	0a202020 	.word	0x0a202020
 8000d6c:	00000000 	.word	0x00000000
 8000d70:	202e3220 	.word	0x202e3220
 8000d74:	20646552 	.word	0x20646552
 8000d78:	2066664f 	.word	0x2066664f
 8000d7c:	20202020 	.word	0x20202020
 8000d80:	20202020 	.word	0x20202020
 8000d84:	20202020 	.word	0x20202020
 8000d88:	20202020 	.word	0x20202020
 8000d8c:	20202020 	.word	0x20202020
 8000d90:	20202020 	.word	0x20202020
 8000d94:	20202020 	.word	0x20202020
 8000d98:	20202020 	.word	0x20202020
 8000d9c:	20202020 	.word	0x20202020
 8000da0:	20202020 	.word	0x20202020
 8000da4:	0000000a 	.word	0x0000000a
 8000da8:	202e3320 	.word	0x202e3320
 8000dac:	6c6c6559 	.word	0x6c6c6559
 8000db0:	4f20776f 	.word	0x4f20776f
 8000db4:	2020206e 	.word	0x2020206e
 8000db8:	20202020 	.word	0x20202020
 8000dbc:	20202020 	.word	0x20202020
 8000dc0:	20202020 	.word	0x20202020
 8000dc4:	20202020 	.word	0x20202020
 8000dc8:	20202020 	.word	0x20202020
 8000dcc:	20202020 	.word	0x20202020
 8000dd0:	20202020 	.word	0x20202020
 8000dd4:	20202020 	.word	0x20202020
 8000dd8:	20202020 	.word	0x20202020
 8000ddc:	000a2020 	.word	0x000a2020
 8000de0:	202e3420 	.word	0x202e3420
 8000de4:	6c6c6559 	.word	0x6c6c6559
 8000de8:	4f20776f 	.word	0x4f20776f
 8000dec:	20206666 	.word	0x20206666
 8000df0:	20202020 	.word	0x20202020
 8000df4:	20202020 	.word	0x20202020
 8000df8:	20202020 	.word	0x20202020
 8000dfc:	20202020 	.word	0x20202020
 8000e00:	20202020 	.word	0x20202020
 8000e04:	20202020 	.word	0x20202020
 8000e08:	20202020 	.word	0x20202020
 8000e0c:	20202020 	.word	0x20202020
 8000e10:	20202020 	.word	0x20202020
 8000e14:	0a202020 	.word	0x0a202020
 8000e18:	00000000 	.word	0x00000000
 8000e1c:	202e3520 	.word	0x202e3520
 8000e20:	65756c42 	.word	0x65756c42
 8000e24:	206e4f20 	.word	0x206e4f20
 8000e28:	20202020 	.word	0x20202020
 8000e2c:	20202020 	.word	0x20202020
 8000e30:	20202020 	.word	0x20202020
 8000e34:	20202020 	.word	0x20202020
 8000e38:	20202020 	.word	0x20202020
 8000e3c:	20202020 	.word	0x20202020
 8000e40:	20202020 	.word	0x20202020
 8000e44:	20202020 	.word	0x20202020
 8000e48:	20202020 	.word	0x20202020
 8000e4c:	20202020 	.word	0x20202020
 8000e50:	0000000a 	.word	0x0000000a
 8000e54:	202e3620 	.word	0x202e3620
 8000e58:	65756c42 	.word	0x65756c42
 8000e5c:	66664f20 	.word	0x66664f20
 8000e60:	20202020 	.word	0x20202020
 8000e64:	20202020 	.word	0x20202020
 8000e68:	20202020 	.word	0x20202020
 8000e6c:	20202020 	.word	0x20202020
 8000e70:	20202020 	.word	0x20202020
 8000e74:	20202020 	.word	0x20202020
 8000e78:	20202020 	.word	0x20202020
 8000e7c:	20202020 	.word	0x20202020
 8000e80:	20202020 	.word	0x20202020
 8000e84:	20202020 	.word	0x20202020
 8000e88:	00000a20 	.word	0x00000a20
 8000e8c:	202e3720 	.word	0x202e3720
 8000e90:	2064654c 	.word	0x2064654c
 8000e94:	74736554 	.word	0x74736554
 8000e98:	20202020 	.word	0x20202020
 8000e9c:	20202020 	.word	0x20202020
 8000ea0:	20202020 	.word	0x20202020
 8000ea4:	20202020 	.word	0x20202020
 8000ea8:	20202020 	.word	0x20202020
 8000eac:	20202020 	.word	0x20202020
 8000eb0:	20202020 	.word	0x20202020
 8000eb4:	20202020 	.word	0x20202020
 8000eb8:	20202020 	.word	0x20202020
 8000ebc:	20202020 	.word	0x20202020
 8000ec0:	00000a20 	.word	0x00000a20
 8000ec4:	202e3820 	.word	0x202e3820
 8000ec8:	74737953 	.word	0x74737953
 8000ecc:	495f6d65 	.word	0x495f6d65
 8000ed0:	726f666e 	.word	0x726f666e
 8000ed4:	6974616d 	.word	0x6974616d
 8000ed8:	20206e6f 	.word	0x20206e6f
 8000edc:	20202020 	.word	0x20202020
 8000ee0:	20202020 	.word	0x20202020
 8000ee4:	20202020 	.word	0x20202020
 8000ee8:	20202020 	.word	0x20202020
 8000eec:	20202020 	.word	0x20202020
 8000ef0:	20202020 	.word	0x20202020
 8000ef4:	20202020 	.word	0x20202020
 8000ef8:	20202020 	.word	0x20202020
 8000efc:	20202020 	.word	0x20202020
 8000f00:	0a202020 	.word	0x0a202020
 8000f04:	00000000 	.word	0x00000000
 8000f08:	202e3920 	.word	0x202e3920
 8000f0c:	74736554 	.word	0x74736554
 8000f10:	20202020 	.word	0x20202020
 8000f14:	20202020 	.word	0x20202020
 8000f18:	20202020 	.word	0x20202020
 8000f1c:	20202020 	.word	0x20202020
 8000f20:	20202020 	.word	0x20202020
 8000f24:	20202020 	.word	0x20202020
 8000f28:	20202020 	.word	0x20202020
 8000f2c:	20202020 	.word	0x20202020
 8000f30:	20202020 	.word	0x20202020
 8000f34:	20202020 	.word	0x20202020
 8000f38:	00000a20 	.word	0x00000a20
 8000f3c:	202e3020 	.word	0x202e3020
 8000f40:	74736554 	.word	0x74736554
 8000f44:	20202020 	.word	0x20202020
 8000f48:	20202020 	.word	0x20202020
 8000f4c:	20202020 	.word	0x20202020
 8000f50:	20202020 	.word	0x20202020
 8000f54:	20202020 	.word	0x20202020
 8000f58:	20202020 	.word	0x20202020
 8000f5c:	20202020 	.word	0x20202020
 8000f60:	20202020 	.word	0x20202020
 8000f64:	20202020 	.word	0x20202020
 8000f68:	20202020 	.word	0x20202020
 8000f6c:	00000a20 	.word	0x00000a20
 8000f70:	202e7120 	.word	0x202e7120
 8000f74:	2044454c 	.word	0x2044454c
 8000f78:	756e654d 	.word	0x756e654d
 8000f7c:	49555120 	.word	0x49555120
 8000f80:	00000a54 	.word	0x00000a54
 8000f84:	454c4553 	.word	0x454c4553
 8000f88:	54205443 	.word	0x54205443
 8000f8c:	43204548 	.word	0x43204548
 8000f90:	414d4d4f 	.word	0x414d4d4f
 8000f94:	4e20444e 	.word	0x4e20444e
 8000f98:	45424d55 	.word	0x45424d55
 8000f9c:	203a2052 	.word	0x203a2052
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	312e6f4e 	.word	0x312e6f4e
 8000fa8:	0000000a 	.word	0x0000000a
 8000fac:	322e6f4e 	.word	0x322e6f4e
 8000fb0:	0000000a 	.word	0x0000000a
 8000fb4:	332e6f4e 	.word	0x332e6f4e
 8000fb8:	0000000a 	.word	0x0000000a
 8000fbc:	342e6f4e 	.word	0x342e6f4e
 8000fc0:	0000000a 	.word	0x0000000a
 8000fc4:	352e6f4e 	.word	0x352e6f4e
 8000fc8:	0000000a 	.word	0x0000000a
 8000fcc:	362e6f4e 	.word	0x362e6f4e
 8000fd0:	0000000a 	.word	0x0000000a
 8000fd4:	372e6f4e 	.word	0x372e6f4e
 8000fd8:	0000000a 	.word	0x0000000a
 8000fdc:	382e6f4e 	.word	0x382e6f4e
 8000fe0:	0000000a 	.word	0x0000000a
 8000fe4:	392e6f4e 	.word	0x392e6f4e
 8000fe8:	0000000a 	.word	0x0000000a
 8000fec:	302e6f4e 	.word	0x302e6f4e
 8000ff0:	0000000a 	.word	0x0000000a
 8000ff4:	612e6f4e 	.word	0x612e6f4e
 8000ff8:	0000000a 	.word	0x0000000a
 8000ffc:	622e6f4e 	.word	0x622e6f4e
 8001000:	0000000a 	.word	0x0000000a
 8001004:	632e6f4e 	.word	0x632e6f4e
 8001008:	0000000a 	.word	0x0000000a
 800100c:	642e6f4e 	.word	0x642e6f4e
 8001010:	0000000a 	.word	0x0000000a
 8001014:	652e6f4e 	.word	0x652e6f4e
 8001018:	0000000a 	.word	0x0000000a
 800101c:	662e6f4e 	.word	0x662e6f4e
 8001020:	0000000a 	.word	0x0000000a
 8001024:	672e6f4e 	.word	0x672e6f4e
 8001028:	0000000a 	.word	0x0000000a
 800102c:	682e6f4e 	.word	0x682e6f4e
 8001030:	0000000a 	.word	0x0000000a
 8001034:	692e6f4e 	.word	0x692e6f4e
 8001038:	0000000a 	.word	0x0000000a
 800103c:	6a2e6f4e 	.word	0x6a2e6f4e
 8001040:	0000000a 	.word	0x0000000a
 8001044:	6b2e6f4e 	.word	0x6b2e6f4e
 8001048:	0000000a 	.word	0x0000000a
